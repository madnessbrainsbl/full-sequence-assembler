// Machine Readable Diagnostics Manual for C    revision 1.0
//
// FW Revision : RO08.SDM2.01138956.00306432
// Build Date : 10/25/2016  22:33:38
// Builder GID: 00306432
// Manual built: Tue Oct 25 22:41:33 2016

#ifndef MRDM
#define MRDM

#define MRDMCompatibilityString "RO08.SDM2.01138956"


#define DSB_HEADER_LEN 8

struct  dsb_header
   {
   uint16          DataTypeId;
   uint16          RevisionId;
   uint32          Error;
   };

#define SEQ_THROUGHPUT_BY_LBA_SAMPLE_LEN 16

struct  seq_throughput_by_lba_sample
   {
   uint64          HostLba;
   uint32          BlocksTransferred;
   uint32          ElapsedUSecs;
   };

#define SEQ_THROUGHPUT_BY_LBA_DSB_LEN 1048584

struct  seq_throughput_by_lba_dsb
   {
   dsb_header      Header;
   seq_throughput_by_lba_sample Samples[65536];
   };

#define TEST_135_AR_SENSOR_DATA_LEN 4

struct  test_135_ar_sensor_data
   {
   uint8           ReadContactDac;
   uint8           WriteContactDac;
   int16           TemperatureInCelsius;
   };

#define TEST_74_AR_SENSOR_DAC_DATA_LEN 12

struct  test_74_ar_sensor_dac_data
   {
   uint32          HirpValue; // This is really a 32 bit float value.
   uint32          ArValue; // This is really a 32 bit float value.
   int16           TemperatureInCelsius;
   uint8           HeaterDacValue;
   uint8           ReaderClearanceInAngstroms;
   };

#define TEST_74_AR_SENSOR_DATA_LEN 3080

struct  test_74_ar_sensor_data
   {
   test_74_ar_sensor_dac_data DacData[255];
   uint8           ValidDacIndicies;
   uint8           padding1[3];
   uint32          HirpVsDacTerms[3]; // This is really a 32 bit float value.
   uint32          HirpVsDacBeta; // This is really a 32 bit float value.
   };

#define FAFH_SFT_AR_SENSOR_TEMP_DIAMETER_HD_DATA_LEN 3084

struct  fafh_sft_ar_sensor_temp_diameter_hd_data
   {
   test_135_ar_sensor_data Test135;
   test_74_ar_sensor_data Test74;
   };

#define FAFH_SFT_AR_SENSOR_MEASUREMENTS_LEN 222048

struct  fafh_sft_ar_sensor_measurements
   {
   fafh_sft_ar_sensor_temp_diameter_hd_data Measurements[2][3][12];
   };

#define TEST_74_TRACK_PREP_STATUS_LEN 8

struct  test_74_track_prep_status
   {
   uint32          FieldArMeasurementsDisabledStatus;
   uint16          FafhReservedAreaTaCount;
   uint16          Reserved;
   };

#define FAFH_SFT_SENSOR_DATA_LEN 222336

struct  fafh_sft_sensor_data
   {
   fafh_sft_ar_sensor_measurements ArSensor;
   test_74_track_prep_status Test74TrackPrepStatus[3][12];
   };

#define SDBP_PACKET_HEADER_LEN 8

struct  sdbp_packet_header
   {
   uint16          FromPort;
   uint16          ToPort;
   uint32          Length;
   };

#define READ_LOG_EXT_PARAMETERS_LEN 8

struct  read_log_ext_parameters
   {
   uint16          LogSpecific;
   uint16          BlockCount;
   uint8           LogAddress;
   uint8           padding1;
   uint16          PageNumber;
   };

#define READ_LOG_EXT_DSB_LEN 16400

struct  read_log_ext_dsb
   {
   dsb_header      Header;
   read_log_ext_parameters Parameters;
   uint8           Data[16384];
   };

#define READ_LOG_EXT_SDBP_DSB_LEN 16408

struct  read_log_ext_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_log_ext_dsb Dsb;
   };

#define SPARE_POOL_INFO_LEN 32

struct  spare_pool_info
   {
   uint8           LogicalHead;
   uint8           padding1[3];
   uint32          LogicalCylinder;
   uint64          StartSparePba;
   uint64          EndSparePba;
   uint32          AvailableRstSpares;
   uint32          AvailableSctSpares;
   };

#define GET_SPARE_POOL_INFO_DSB_LEN 40

struct  get_spare_pool_info_dsb
   {
   dsb_header      Header;
   spare_pool_info SparePoolInfo;
   };

#define GET_SPARE_POOL_INFO_SDBP_DSB_LEN 48

struct  get_spare_pool_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_spare_pool_info_dsb Dsb;
   };

#define DFB_HEADER_LEN 4

struct  dfb_header
   {
   uint16          FunctionId;
   uint16          RevisionId;
   };

#define GET_DEFECTS_REPORT_LISTS_INFO_DFB_LEN 4

struct  get_defects_report_lists_info_dfb
   {
   dfb_header      Header;
   };

#define DIAG_GET_TA_LIST_INPUTS_LEN 8

struct  diag_get_ta_list_inputs
   {
   uint32          StartIndex;
   uint32          NumEntriesRequested;
   };

#define MD_CONTACT_DETECT_INPUT_LEN 52

struct  md_contact_detect_input
   {
   uint32          CylOrRadius;
   uint16          Head;
   uint16          Iterations;
   uint32          ControlFlags;
   uint16          PreHeaterStart;
   uint16          HeaterStart;
   uint16          HeaterEnd;
   int16           HeaterIncrement;
   uint8           PctOfBpi;
   uint8           PatternSelect;
   uint16          AgcValue;
   uint16          CTFFR;
   uint8           ATT2R;
   uint8           padding1;
   uint16          HscLength;
   uint16          APreWrNumSvoWedges;
   uint16          BWrNumSvoWedges;
   uint16          CPostWrNumSvoWedges;
   uint16          DRdNumSvoWedges;
   uint16          ETrailingNumSvoWedges;
   int16           CoarseSearchStartClearanceOffset;
   int16           FineSearchStartClearanceOffset;
   int16           ContactSearchLimitClearanceOffset;
   uint16          padding2;
   uint32          DebugFlag;
   };

#define CONGEN_LONG_PAGE_LEN 4096

struct  congen_long_page
   {
   uint8           CongenData[4096];
   };

#define GET_CONGEN_DSB_LEN 4108

struct  get_congen_dsb
   {
   dsb_header      Header;
   uint32          CongenLength;
   congen_long_page Congen;
   };

#define GET_CONGEN_SDBP_DSB_LEN 4116

struct  get_congen_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_congen_dsb  Dsb;
   };

#define TRANSLATE_USER_LBA_TO_MEDIA_LBA_DFB_LEN 16

struct  translate_user_lba_to_media_lba_dfb
   {
   dfb_header      Header;
   uint32          padding1;
   int64           MediaLba;
   };

#define TRANSLATE_USER_LBA_TO_MEDIA_LBA_SDBP_DFB_LEN 24

struct  translate_user_lba_to_media_lba_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   translate_user_lba_to_media_lba_dfb Dfb;
   };

#define FAST_IO_READBACK_MODE_TABLE_ENTRIES_LEN 24

struct  fast_io_readback_mode_table_entries
   {
   uint32          VariableAddr[4];
   uint16          LeftShiftCount[4];
   };

#define TEST_SPACE_OPTIONS_LEN 4

struct  test_space_options
   {
   uint32          Bitfield1  ;
   };

#define test_space_options_AllHds_OFFSET                                                                     0x0000
#define test_space_options_AllHds_MASK                                                                       0x0001

#define test_space_options_AllCyls_OFFSET                                                                    0x0001
#define test_space_options_AllCyls_MASK                                                                      0x0002

#define test_space_options_RandomCylAndHd_OFFSET                                                             0x0002
#define test_space_options_RandomCylAndHd_MASK                                                               0x0004

#define test_space_options_spare0_OFFSET                                                                     0x0003
#define test_space_options_spare0_MASK                                                                       0x0008

#define test_space_options_EvenCyls_OFFSET                                                                   0x0004
#define test_space_options_EvenCyls_MASK                                                                     0x0010

#define test_space_options_OddCyls_OFFSET                                                                    0x0005
#define test_space_options_OddCyls_MASK                                                                      0x0020

#define test_space_options_SequentialOut_OFFSET                                                              0x0006
#define test_space_options_SequentialOut_MASK                                                                0x0040

#define test_space_options_RandomData_OFFSET                                                                 0x0007
#define test_space_options_RandomData_MASK                                                                   0x0080

#define test_space_options_RandomStartingSector_OFFSET                                                       0x0008
#define test_space_options_RandomStartingSector_MASK                                                         0x0100

#define test_space_options_RandomTransferLength_OFFSET                                                       0x0009
#define test_space_options_RandomTransferLength_MASK                                                         0x0200

#define test_space_options_spare1_OFFSET                                                                     0x000A
#define test_space_options_spare1_MASK                                                                       0x0400

#define test_space_options_Sequential80Random20_OFFSET                                                       0x000B
#define test_space_options_Sequential80Random20_MASK                                                         0x0800

#define test_space_options_spare2_OFFSET                                                                     0x000C
#define test_space_options_spare2_MASK                                                                       0xFFFFF000


#define SET_TEST_SPACE_CYL_LIMIT_LEN 8

struct  set_test_space_cyl_limit
   {
   uint32          Cyl;
   uint8           Hd;
   uint8           padding1[3];
   };

#define SET_TEST_SPACE_PARAMETER_LEN 8

struct  set_test_space_parameter
   {
   uint8           TargetAddrMode;
   uint8           padding1[7];
   test_space_options Options;
   uint32          padding2;
   uint64          LbaLimit;
   set_test_space_cyl_limit CylLimit;
   uint8           HdLimit;
   uint8           padding3[7];
   uint64          TargetBufferSectorOffset;
   };

#define SET_TEST_SPACE_DFB_LEN 16

struct  set_test_space_dfb
   {
   dfb_header      Header;
   uint8           ParmType;
   uint8           padding1[3];
   set_test_space_parameter ParmValue;
   };

#define FAFH_PARAMETER_FILE_HEADER_LEN 108

struct  fafh_parameter_file_header
   {
   uint16          MajorRevision;
   uint16          MinorRevision;
   uint16          TriggerEnables;
   uint16          padding1;
   uint32          DebugEnables;
   uint8           FafhParmFileInitialized;
   uint8           FafhParmFileValid;
   uint8           MaxDiametersSupported;
   uint8           DiametersUsed;
   uint8           MaxHeadsSupported;
   uint8           HeadsUsed;
   uint8           DriveParamTriggerParamPeriodicTimerIntervalTableEntriesSupported;
   uint8           MaxHeadTestsSupported;
   uint8           MaxSensorTypesSupported;
   uint8           SensorTypesUsed;
   uint8           MaxCommandStepsSupported;
   uint8           CommandStepsUsed;
   uint8           UserZoneGroupsSupported;
   uint8           UserZoneGroupsUsed;
   uint16          padding2;
   uint32          FileBytesAllocated;
   uint32          FileBytesRequired;
   uint32          FileHeaderBytes;
   uint32          DriveParamBytes;
   uint32          DriveParamTriggerParamBytes;
   uint32          DriveParamFlyHeightAdjustmentEwmaFilterParamBytes;
   uint32          DriveParamFlyHeightAdjustmentLimitBytes;
   uint32          DriveParamFlyHeightAdjustmentLimitsBytesPerDiameterAndHead;
   uint32          DriveParamIdleRequestParamBytes;
   uint32          DriveParamFieldTargetClearanceBytes;
   uint32          HeadTestParamBytes;
   uint32          SensorParamBytes;
   uint32          SensorParamHeaderBytes;
   uint32          SensorParamDescriptorBytes;
   uint32          SensorParamDescriptorHeaderBytes;
   uint32          SensorParamDescriptorDataBytes;
   uint32          CommandStepBytes;
   uint32          CommandStepEntryBytes;
   uint32          SftDataBytes;
   uint32          NewParamBytes;
   };

#define PERIODIC_TIMER_INTERVAL_TABLE_ENTRY_LEN 12

struct  periodic_timer_interval_table_entry
   {
   uint16          StartingTimerIntervalInSeconds;
   uint16          TimerIntervalMultiplier;
   uint16          TimerIntervalIncrement;
   uint16          MaxTimerTriggersForEntry;
   uint8           NextEntry;
   uint8           ClearanceSettlingActive;
   uint8           Reserved[2];
   };

#define FAFH_TRIGGER_PARAMETERS_LEN 116

struct  fafh_trigger_parameters
   {
   int16           TemperatureChangeTriggerThresholdInCelsius;
   uint16          padding1;
   uint32          HumidityChangeTriggerThresholdInGramsPerKg; // This is really a 32 bit float value.
   int32           AltitudeChangeTriggerThresholdInFeet;
   uint32          SecondsOnRampRequiringSettling;
   uint8           HeadLoadWithSettlingPeriodicTimerIntervalTableEntry;
   uint8           HeadLoadWithoutSettlingPeriodicTimerIntervalTableEntry;
   uint8           PowerUpPeriodicTimerIntervalTableEntry;
   uint8           Reserved2;
   periodic_timer_interval_table_entry PeriodicTimerIntervalTable[8];
   };

#define FLY_HEIGHT_ADJUSTMENT_EWMA_FILTER_PARAMETERS_LEN 8

struct  fly_height_adjustment_ewma_filter_parameters
   {
   uint32          ClearanceSettlingTimerTriggerFilterAlpha; // This is really a 32 bit float value.
   uint32          SteadyStateTimerTriggerFilterAlpha; // This is really a 32 bit float value.
   };

#define FLY_HEIGHT_ADJUSTMENT_RANGE_RESTRICTIONS_LEN 12

struct  fly_height_adjustment_range_restrictions
   {
   uint32          MinClearanceChangeThresholdInAngstroms; // This is really a 32 bit float value.
   uint32          MaxClearanceAdjAwayFromDiskInAngstroms; // This is really a 32 bit float value.
   uint32          MaxClearanceAdjTowardDiskInAngstroms; // This is really a 32 bit float value.
   };

#define FAFH_IDLE_REQUEST_PARAMETERS_LEN 16

struct  fafh_idle_request_parameters
   {
   uint32          InitialRequestBusIdlePeriodInMsec;
   uint32          InitialRequestGracePeriodInMsec;
   uint32          SuspendRerequestBusIdlePeriodInMsec;
   uint32          SuspendRerequestGracePeriodInMsec;
   };

#define FAFH_SEEK_SETTLE_TIME_LEN 8

struct  fafh_seek_settle_time
   {
   uint32          ShortSettleInMsec;
   uint32          LongSettleInMsec;
   };

#define FAFH_DRIVE_PARAMETERS_LEN 1160

struct  fafh_drive_parameters
   {
   fafh_trigger_parameters TriggerParams;
   fly_height_adjustment_ewma_filter_parameters FlyHeightAdjustmentEwmaFilterParams;
   fly_height_adjustment_range_restrictions ClearanceSettlingFlyHeightAdjustmentLimits[3][12];
   fly_height_adjustment_range_restrictions SteadyStateFlyHeightAdjustmentLimits[3][12];
   fafh_idle_request_parameters IdleRequestParams;
   uint32          FieldTargetClearanceInAngstroms[3][12]; // This is really a 32 bit float value.
   fafh_seek_settle_time SeekSettleTime;
   uint32          FafhHistoryLogSaveToDiskFrequency;
   };

#define FAFH_HEAD_TEST_PARAMETERS_LEN 84

struct  fafh_head_test_parameters
   {
   uint16          TestEnableFlags;
   uint16          TestFrequency[16];
   uint16          OriginalHeadResistance[12];
   uint16          padding1;
   uint32          MaxAllowedHeadResistancePercentChange; // This is really a 32 bit float value.
   uint32          TrigCountForArConvergenceRateCalc;
   uint32          HdEnableMinTrigPercentWithArConvergence; // This is really a 32 bit float value.
   uint32          MaxAveragedArMeasurementSequences;
   uint32          MaxAveragedAtomicArMeasurements;
   uint32          MaxAvgAtomicArMeasurementTimeInMsec;
   };

#define SENSOR_PARAMETERS_TABLE_HEADER_LEN 5

struct  sensor_parameters_table_header
   {
   uint8           NumberOfSensors;
   uint8           SensorEnables;
   uint8           Reserved[3];
   };

#define FLOAT_AFH_ADJUSTMENTS_LEN 8

struct  float_afh_adjustments
   {
   uint32          Scaling; // This is really a 32 bit float value.
   uint32          Offset; // This is really a 32 bit float value.
   };

#define FLOAT_HIRP_WIRP_LEN 16

struct  float_hirp_wirp
   {
   float_afh_adjustments Read;
   float_afh_adjustments Write;
   };

#define FAFH_MEASUREMENT_TRACK_INFO_LEN 68

struct  fafh_measurement_track_info
   {
   uint8           Diameter;
   uint8           Head;
   uint16          padding1;
   uint32          RwCyl;
   uint32          NominalCyl; // This is really a 32 bit float value.
   uint32          ScaledNominalCyl; // This is really a 32 bit float value.
   uint16          RadiusQ4;
   uint8           ZoneGroup;
   uint8           padding2;
   uint16          FlexZone;
   uint16          padding3;
   float_hirp_wirp HirpWirp;
   uint32          MeasuredPassiveClearanceInAngstroms; // This is really a 32 bit float value.
   uint32          WriteTargetClearanceInAngstroms; // This is really a 32 bit float value.
   uint32          UserZonesToFafhMeasurementTrackInterpolationMultiplier; // This is really a 32 bit float value.
   uint32          ZoneFormatBudgetTableEntryPtr;
   uint16          ChannelZoneIndex;
   uint16          padding4;
   uint32          WallaceEquationPremultiplier; // This is really a 32 bit float value.
   uint32          Gammah; // This is really a 32 bit float value.
   };

#define FAFH_SENSOR_COMMON_INFO_LEN 14788

struct  fafh_sensor_common_info
   {
   uint8           SensorType;
   uint8           Reserved1[3];
   fafh_measurement_track_info FafhMeasurementTrackInfo[3][12];
   uint32          FafhOdIdToFafhMdInterpolationMultiplier[12]; // This is really a 32 bit float value.
   uint32          FafhDiametersToUserZoneInterpolationMultiplier[12][255]; // This is really a 32 bit float value.
   uint32          FafhDiametersToSystemZoneInterpolationMultiplier[12]; // This is really a 32 bit float value.
   };

#define GENERIC_SENSOR_DESCRIPTOR_LEN 14792

struct  generic_sensor_descriptor
   {
   fafh_sensor_common_info Header;
   uint8           Parm;
   uint8           padding1[3];
   };

#define AMPLITUDE_RATIO_SENSOR_CONVERGENCE_CRITERIA_LEN 24

struct  amplitude_ratio_sensor_convergence_criteria
   {
   uint8           MaxMeasurementIterations;
   uint8           MaxHeaterDacDifference;
   uint16          padding1;
   uint32          PredictionIntervalLimit; // This is really a 32 bit float value.
   uint32          LastIterationPredictionIntervalLimit; // This is really a 32 bit float value.
   uint32          ExtrapDistanceUpperLimit; // This is really a 32 bit float value.
   uint32          ExtrapDistanceLowerLimitTgtClrMultiplier; // This is really a 32 bit float value.
   uint32          MaxActualToPredictedHirpSlopeDelta; // This is really a 32 bit float value.
   };

#define AMPLITUDE_RATIO_SENSOR_FAST_IO_SAMPLE_COUNTS_LEN 10

struct  amplitude_ratio_sensor_fast_io_sample_counts
   {
   uint16          PhaseAPreheatServoWedges;
   uint16          PhaseBHeatingServoWedges;
   uint16          PhaseCPostWriteServoWedges;
   uint16          PhaseDReadServoWedges;
   uint16          PhaseETrailingServoWedges;
   };

#define AMPLITUDE_RATIO_SENSOR_DIAMETER_AND_HEAD_INFO_LEN 80

struct  amplitude_ratio_sensor_diameter_and_head_info
   {
   uint32          ChannelFreq; // This is really a 32 bit float value.
   uint16          Vgar;
   uint8           Att2r;
   uint8           padding1;
   uint16          Ctffr;
   uint8           Zfr;
   uint8           padding2;
   int16           LowFreqAmpOffset;
   uint16          padding3;
   uint32          CoeffA[5]; // This is really a 32 bit float value.
   uint32          HirpVsDacTerms[3]; // This is really a 32 bit float value.
   uint32          LocalHirpVsDacSlope; // This is really a 32 bit float value.
   uint32          ReadWedgeXferSizeInNrzSymbols;
   uint32          WriteWedgeXferSizeInNrzSymbols;
   uint16          NrzSymbolCountAtPushFreq;
   uint8           PreAmpGain;
   uint8           AttcRd;
   uint16          HscStart;
   uint16          HscLength;
   uint32          SelfTestPassiveHirpSlope; // This is really a 32 bit float value.
   uint32          SelfTestPassiveClearance; // This is really a 32 bit float value.
   uint8           AdjustedSeqSGateToWGate;
   uint8           AdjustedSeqSGateToRGate;
   uint16          padding4;
   };

#define AMPLITUDE_RATIO_SENSOR_DESCRIPTOR_LEN 18376

struct  amplitude_ratio_sensor_descriptor
   {
   fafh_sensor_common_info Header;
   uint32          OptionsFlags;
   uint32          HirpVsDacBeta; // This is really a 32 bit float value.
   uint32          TargetClearanceMultiplierForSafeDacCalc; // This is really a 32 bit float value.
   uint32          SafeDacCalcAlphaForExtrapDistanceLimitExceeded; // This is really a 32 bit float value.
   uint8           CalcPredictedHirpSlopeDeltaTransferFuncCoeffsSupported;
   uint8           padding1[3];
   uint32          CalcPredictedHirpSlopeDeltaTransferFuncCoeff[3][5]; // This is really a 32 bit float value.
   amplitude_ratio_sensor_convergence_criteria SteadyStateConvergenceCriteria;
   amplitude_ratio_sensor_convergence_criteria ClearanceSettlingConvergenceCriteria;
   amplitude_ratio_sensor_fast_io_sample_counts SteadyStateFastIoSampleCounts;
   amplitude_ratio_sensor_fast_io_sample_counts ClearanceSettlingFastIoSampleCounts;
   uint8           CalRegData[550];
   uint16          padding2;
   uint32          ArSensorInfoBytesPerDiameterAndHead;
   uint16          ArSensorCalibrationProcessorRegsSupported;
   uint8           ArMeasurementToClearanceTransferFunctionCoeffsSupported;
   uint8           HirpVsDacTermsSupported;
   amplitude_ratio_sensor_diameter_and_head_info DiameterAndHeadInfo[3][12];
   };

#define SENSOR_DESCRIPTOR_LEN 18376

struct  sensor_descriptor
   {
   generic_sensor_descriptor GenericSensor;
   uint32          padding1[896];
   amplitude_ratio_sensor_descriptor AmplitudeRatioSensor;
   };

#define FAFH_SENSOR_PARAMETERS_LEN 55136

struct  fafh_sensor_parameters
   {
   sensor_parameters_table_header SensorTableHeader;
   uint8           padding1[3];
   sensor_descriptor SensorTable[3];
   };

#define FAFH_DIAMETER_HEAD_MASKS_LEN 14

struct  fafh_diameter_head_masks
   {
   uint16          HeadMask[3];
   uint16          QuickCheckHeadMask[3];
   uint8           MaxRetryCount;
   uint8           padding1;
   };

#define COMMAND_STEPS_TABLE_ENTRY_LEN 32

struct  command_steps_table_entry
   {
   uint8           SensorType;
   uint8           padding1;
   fafh_diameter_head_masks SteadyStateDiameterHeadMasks;
   fafh_diameter_head_masks ClearanceSettlingDiameterHeadMasks;
   uint8           NextStepIfTooFewValidMsrmts;
   uint8           AdjustFlyHeightBasedOnResults;
   };

#define FAFH_COMMAND_STEPS_LEN 64

struct  fafh_command_steps
   {
   command_steps_table_entry CommandStepsTable[2];
   };

#define FAFH_NEW_PARAMETERS_LEN 19804

struct  fafh_new_parameters
   {
   uint32          StartOfFafhNewParametersSection;
   uint8           ArCalRegData[3][12][550];
   };

#define FAFH_PARAMETER_FILE_LEN 298692

struct  fafh_parameter_file
   {
   fafh_parameter_file_header FileHeader;
   fafh_drive_parameters DriveParams;
   fafh_head_test_parameters HeadTestParams;
   fafh_sensor_parameters SensorParams;
   fafh_command_steps CommandSteps;
   fafh_sft_sensor_data SftData;
   fafh_new_parameters NewParams;
   };

#define GET_FAFH_PARMS_DSB_LEN 298700

struct  get_fafh_parms_dsb
   {
   dsb_header      Header;
   fafh_parameter_file FafhParmFile;
   };

#define GET_FAFH_PARMS_SDBP_DSB_LEN 298708

struct  get_fafh_parms_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_fafh_parms_dsb Dsb;
   };

#define CONTACT_DETECT_PARMS_LEN 200

struct  contact_detect_parms
   {
   int8            IpdPreheatOffset;
   int8            IpdWriteHeatOffset;
   int8            IpdReadHeatOffset;
   int8            maxDAC_preheat_offset;
   int8            maxDAC_write_heat_offset;
   int8            maxDAC_read_heat_offset;
   uint16          padding1;
   uint32          TargetCyl;
   uint16          HeadRange;
   uint16          Revs;
   uint16          BaselineRevs;
   uint16          cword;
   uint16          PESThreshold;
   uint16          WCInput;
   uint16          Increment;
   uint16          DampingInput;
   uint16          FailSafe;
   uint16          rw_mode;
   int16           Offset;
   int16           RetryIncr;
   uint16          DpesVarStdevMinLimitInt;
   uint16          DeltaSigmaLimit;
   uint16          agere_wc_limit;
   uint16          HeaterRange;
   uint16          HeaterIncr;
   uint16          BackoffAmount;
   uint16          ViolationsAllowed;
   uint16          StartPt;
   uint16          NumPt;
   uint16          padding2;
   uint32          ZoneMask;
   uint32          ZoneMaskExt;
   uint16          UnsafeLimit;
   uint16          FilterDelta;
   uint16          PercentDiffLimitPes;
   uint16          PercentDiffLimitAgc;
   uint8           DfltSampleSize;
   int8            ReadHeatOffset;
   int16           TccOffsetUpperLimit;
   int16           TccOffsetLowerLimit;
   uint16          RptOption;
   uint16          DampingDuration;
   uint16          SeekDelay;
   uint16          StartPt2;
   uint16          NumPt2;
   uint16          BaselineReps;
   uint16          BaselineVarThreshold;
   uint16          RetryDecr;
   uint16          RetryLimit;
   uint16          cword2;
   int16           WriteHeatUdiffLimit;
   int16           WriteHeatLdiffLimit;
   uint16          cword3;
   uint16          TuneSeekCount;
   uint16          TuneSeekDelay;
   uint16          TuneSeekLength;
   uint16          StartHarm;
   int16           ExpFactor;
   int16           FactorWindow;
   uint16          BlPSpectrumLimit;
   uint16          DpesTotalSpectrumLimit;
   uint16          DpesTotalSpectrumLimitScale;
   uint16          PeakAlgoSpectrumSigmaLimit;
   uint16          VarThresInt;
   uint16          FixedThresInt;
   uint16          APreWrNumSvoWedges;
   uint16          BWrNumSvoWedges;
   uint16          CPostWrNumSvoWedges;
   uint16          DRdNumSvoWedges;
   uint16          ETrailingNumSvoWedges;
   uint16          FilterPsd;
   uint8           FineSearchBackup;
   uint8           padding3;
   uint16          HscFsel;
   uint16          MaxRadius;
   uint16          StrtFreqRange;
   uint16          EndFreqRange;
   uint16          DynamicThresholdParam_NumberBaselineSamples;
   uint16          DynamicThresholdParam_DacBackoff;
   uint16          DynamicThresholdParam_PSDLimit;
   uint16          DynamicThresholdParam_PESLimit;
   uint16          DynamicThresholdParam_CWord;
   int16           NumContactFFTsToDisplay;
   uint16          PSDVarStdevMinLimitInt;
   uint16          PsdVarThresInt;
   uint16          PSDLinearFitLength;
   uint16          PeakAlgoInputParam;
   int16           NumNonContactFFTsToDisplay;
   int16           DebugFlag;
   int16           MovingBaselineBackoffStep;
   int16           MinLikelyContactDac;
   uint16          MaxDiscardSigma;
   uint32          DpesVarStdevMinLimitfloat; // This is really a 32 bit float value.
   uint16          VarthreshbackupDACstep;
   uint16          DeltaLimit;
   uint8           HeaterRampOffset;
   uint8           padding4;
   uint16          DeltaLimitPostproc;
   int16           WritePlusHeatContactDac;
   int16           HeatOnlyContactDac;
   uint16          Gamma;
   uint8           ActiveHeater;
   uint8           padding5;
   };

#define RSZ_SCAN_TEST_DFB_LEN 6

struct  rsz_scan_test_dfb
   {
   dfb_header      Header;
   uint8           RSZScanTestOption;
   uint8           padding1;
   };

#define RSZ_SCAN_TEST_SDBP_DFB_LEN 16

struct  rsz_scan_test_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rsz_scan_test_dfb Dfb;
   uint16          padding1;
   };

#define RD_READ_CHANNEL_REG_DSB_LEN 36876

struct  rd_read_channel_reg_dsb
   {
   dsb_header      Header;
   uint16          RegAddr;
   uint16          NumOfRegsRd;
   uint16          RegData[18432];
   };

#define RD_READ_CHANNEL_REG_SDBP_DSB_LEN 36884

struct  rd_read_channel_reg_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rd_read_channel_reg_dsb Dsb;
   };

#define RD_PREAMP_REG_DFB_LEN 10

struct  rd_preamp_reg_dfb
   {
   dfb_header      Header;
   uint8           RegPage;
   uint8           RegAddrOffset;
   uint16          NumOfRegsToRd;
   uint16          RegBitMask;
   };

#define RD_PREAMP_REG_SDBP_DFB_LEN 20

struct  rd_preamp_reg_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rd_preamp_reg_dfb Dfb;
   uint16          padding1;
   };

#define RREV2_GENERIC_SERVO_FAST_IO_WITH_INJECT_DFB_LEN 4112

struct  rrev2_generic_servo_fast_io_with_inject_dfb
   {
   dfb_header      Header;
   uint8           InjectChannel1Flag;
   uint8           InjectChannel2Flag;
   uint8           InjectServoCmdFlag;
   uint8           Pad;
   uint16          RevsToCollect;
   uint16          RevToInjectServocmd;
   uint16          WedgeToInjectServoCmd;
   uint16          Param[32];
   uint16          TriggerValue;
   uint16          TriggerCommandWord;
   uint16          padding1;
   uint32          AuxPort1Address;
   uint32          AuxPort2Address;
   uint32          AuxPort3Address;
   uint32          AuxPort4Address;
   uint8           AuxPort1Shift;
   uint8           AuxPort2Shift;
   uint8           AuxPort3Shift;
   uint8           AuxPort4Shift;
   uint32          Channel1InjectionAddress;
   uint32          Channel2InjectionAddress;
   uint16          Channel1InjectionTrace[1000];
   uint16          Channel2InjectionTrace[1000];
   };

#define DIAG_UINT32_STATISTICS_RESULT_LEN 16

struct  diag_uint32_statistics_result
   {
   uint32          Mean;
   uint32          Min;
   uint32          Max;
   uint32          StdDev; // This is really a 32 bit float value.
   };

#define DIAG_UINT32_STATISTICS_LEN 24

struct  diag_uint32_statistics
   {
   uint32          FirstSamplePtr;
   uint16          NumOfSamples;
   uint8           TrimPercentage;
   uint8           padding1;
   diag_uint32_statistics_result Result;
   };

#define LOAD_UNLOAD_HEADS_PARMS_LEN 8

struct  load_unload_heads_parms
   {
   uint8           LoadUnloadOperationType;
   uint8           padding1;
   int16           VelocityInAdcCounts;
   uint8           EnableDemodSync;
   uint8           EnableDwell;
   uint8           UnloadType;
   uint8           padding2;
   };

#define FORMAT_PARTITION_OPTIONS_LEN 4

struct  format_partition_options
   {
   uint32          Bitfield1  ;
   };

#define format_partition_options_CorruptUserPartitionPrimaryDefects_OFFSET                                   0x0000
#define format_partition_options_CorruptUserPartitionPrimaryDefects_MASK                                     0x0001

#define format_partition_options_DisableUserPartitionFormat_OFFSET                                           0x0001
#define format_partition_options_DisableUserPartitionFormat_MASK                                             0x0002

#define format_partition_options_DisableUserPartitionCertify_OFFSET                                          0x0002
#define format_partition_options_DisableUserPartitionCertify_MASK                                            0x0004

#define format_partition_options_EnableEventBasedFormatLogging_OFFSET                                        0x0003
#define format_partition_options_EnableEventBasedFormatLogging_MASK                                          0x0008

#define format_partition_options_SkipZoneReformat_OFFSET                                                     0x0004
#define format_partition_options_SkipZoneReformat_MASK                                                       0x0010

#define format_partition_options_EnableFormatXfSpace_OFFSET                                                  0x0005
#define format_partition_options_EnableFormatXfSpace_MASK                                                    0x0020

#define format_partition_options_DisableTrackRewriteOnDataSyncErrors_OFFSET                                  0x0006
#define format_partition_options_DisableTrackRewriteOnDataSyncErrors_MASK                                    0x0040

#define format_partition_options_DisableTrackRewrite_OFFSET                                                  0x0007
#define format_partition_options_DisableTrackRewrite_MASK                                                    0x0080

#define format_partition_options_FormatProcessVariableGuardBand_OFFSET                                       0x0008
#define format_partition_options_FormatProcessVariableGuardBand_MASK                                         0x0100

#define format_partition_options_FormatProcessZoneSkipped_OFFSET                                             0x0009
#define format_partition_options_FormatProcessZoneSkipped_MASK                                               0x0200

#define format_partition_options_unused_OFFSET                                                               0x000A
#define format_partition_options_unused_MASK                                                                 0xFFFFFC00


#define SMART_FRAME_DFB_LEN 16

struct  smart_frame_dfb
   {
   dfb_header      Header;
   uint8           DataSourceSelector;
   uint8           Bitfield1  ;
   uint16          padding1;
   uint32          StartingFrame;
   uint32          NumberOfFrames;
   };

#define smart_frame_dfb_GetFactoryData_OFFSET                                                                0x0000
#define smart_frame_dfb_GetFactoryData_MASK                                                                  0x00FF


#define SMART_FRAME_SDBP_DFB_LEN 24

struct  smart_frame_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   smart_frame_dfb Dfb;
   };

#define GENERIC_SERVO_COMMAND_DSB_LEN 12

struct  generic_servo_command_dsb
   {
   dsb_header      Header;
   uint16          CommandResult;
   uint16          padding1;
   };

#define GENERIC_SERVO_COMMAND_SDBP_DSB_LEN 20

struct  generic_servo_command_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   generic_servo_command_dsb Dsb;
   };

#define DIAG_GET_REASSIGNED_SECTORS_LIST_INPUTS_LEN 4

struct  diag_get_reassigned_sectors_list_inputs
   {
   uint16          StartIndex;
   uint16          NumEntriesRequested;
   };

#define GET_REASSIGNED_SECTORS_LIST_DFB_LEN 12

struct  get_reassigned_sectors_list_dfb
   {
   dfb_header      Header;
   uint32          PassThrough;
   diag_get_reassigned_sectors_list_inputs InputInfo;
   };

#define GET_REASSIGNED_SECTORS_LIST_SDBP_DFB_LEN 20

struct  get_reassigned_sectors_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_reassigned_sectors_list_dfb Dfb;
   };

#define SERVO_ZONE_INFO_LEN 24

struct  servo_zone_info
   {
   uint8           PhysicalHead;
   uint8           padding1;
   uint16          Zone;
   uint32          StartCylinder;
   uint32          NumOfCylinder;
   uint32          StartNominalTrackOrSerpent;
   uint32          NumOfNominalTracksOrSerpents;
   uint16          ServoGateWidth;
   uint16          padding2;
   };

#define SERVO_ZONE_CONFIGURE_INFO_LEN 9600

struct  servo_zone_configure_info
   {
   servo_zone_info ServoZoneInfo[4][100];
   };

#define GET_SERVO_ZONE_CONFIGURE_DSB_LEN 9608

struct  get_servo_zone_configure_dsb
   {
   dsb_header      Header;
   servo_zone_configure_info ServoZoneConfigureInfo;
   };

#define GET_SERVO_ZONE_CONFIGURE_SDBP_DSB_LEN 9616

struct  get_servo_zone_configure_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_servo_zone_configure_dsb Dsb;
   };

#define CLEAR_DOS_LOG_PAGE_COUNTERS_DFB_LEN 4

struct  clear_dos_log_page_counters_dfb
   {
   dfb_header      Header;
   };

#define CORRUPT_BURST_INFO_LEN 6

struct  corrupt_burst_info
   {
   uint16          BurstOffset;
   uint16          NumberOfOffsetsToCorrupt;
   uint16          SpanForRandomCorrupt;
   };

#define DRIVE_GEOMETRY_MEDIA_PARTITION_HEAD_INFO_LEN 20

struct  drive_geometry_media_partition_head_info
   {
   uint32          StartingPhysicalCyl;
   uint32          EndingPhysicalCyl;
   uint32          StartingLogicalCyl;
   uint32          EndingLogicalCyl;
   uint32          StartingSingleHeadZoneTableIndex;
   };

#define ATTRIBUTE_LEN 12

struct  attribute
   {
   uint8           AttributeNum;
   uint8           FlagsLow;
   uint8           FlagsHigh;
   uint8           Normalized;
   uint8           WorstEver;
   uint8           Raw[7];
   };

#define VENDOR_INFO_LEN 126

struct  vendor_info
   {
   uint16          PadAlignmentBytes;
   uint8           CustSMARTAttributeVersion;
   uint8           DSTVendorUniqueVersion;
   uint32          CRCErrorIntervalCount;
   uint8           SpinIndex;
   uint8           SpinTimes[8];
   uint8           SpinRetries[8];
   uint8           SMARTEnabled;
   uint16          Reserved410;
   uint16          Reserved412;
   uint8           SavedNextSelfTestStep[4];
   uint16          SavedLastSelfTest;
   uint16          ShockSensorTriggers;
   uint16          NumberOfRAWReWrites;
   uint64          SavedLifetimeUSecs;
   uint16          AggressiveScanCount;
   uint16          PendingTimerSet;
   uint16          InitializationReason;
   uint16          NumberOfSystemSectorFails;
   uint64          LifetimeWritesFromHost;
   uint64          LifetimeReadsFromHost;
   uint32          PowerOnHoursOfLastScanedLBA;
   uint32          BitErrors195;
   uint16          PreviousAttributeStatus;
   uint8           H2SATSupported;
   uint8           Reserved0;
   uint32          BitErrors;
   uint16          CTOIntervalCount;
   uint16          CTOErrorCount;
   uint16          LastPowerCycleCount;
   uint16          LastPowerOnHours;
   uint16          RVAbsMean;
   uint8           RVCntrl;
   uint8           FHMWorkaroundHeadMask;
   uint32          ConvertedRAWSectorCount;
   uint8           MaxSpinTimesSinceLastFrame;
   uint8           Reserved1[3];
   uint16          SoftwareITCMError;
   uint8           InlineDiagnosticsSupported;
   uint8           LastPowerOnMinutes;
   uint32          LoadRetryCount;
   uint32          UnloadRetryCount;
   uint16          DataSyncReallocations;
   uint8           CriticalEventSectorsSupported;
   uint8           AttributesSupported;
   uint16          Reserved508;
   };

#define SMART_ATTRIBUTES_SECTOR_LEN 512

struct  SMART_attributes_sector
   {
   uint16          SMARTStructureVersion;
   attribute       Attribute[30];
   uint8           OfflineDataCollectionStatus;
   uint8           SavedSelfTestProgressIndicator;
   uint16          SecondsToFinishNextSegment;
   uint8           Reserved;
   uint8           OfflineDataCollectionCapability;
   uint16          DriveFailurePredictionCapability;
   uint8           ErrorLoggingCapability;
   uint8           VendorSpecificSelfTestVector;
   uint8           MinutesToPerformShortSelfTest;
   uint8           MinutesToPerformLongSelfTest;
   uint8           MinutesForConveyanceSelfTest;
   uint8           ExtendedMinutesToPerformLongSelfTestLow;
   uint8           ExtendedMinutesToPerformLongSelfTestHi;
   uint8           ReservedBlock[7];
   vendor_info     VendorInfo;
   uint8           VendorSpare;
   uint8           Checksum;
   };

#define ATTRIBUTE_WARRANTY_THRESHOLD_LEN 12

struct  attribute_warranty_threshold
   {
   uint8           AttributeNum;
   uint8           AttributeThreshold;
   uint8           Reserved[10];
   };

#define SMART_WARRANTY_SECTOR_LEN 512

struct  smart_warranty_sector
   {
   uint16          SMARTStructureVersion;
   attribute_warranty_threshold WarrantyValue[30];
   uint8           Reserved[18];
   uint8           VendorUnique[131];
   uint8           Checksum;
   };

#define SMART_THRESHOLD_OR_ATTRIBUTE_DATA_LEN 512

struct  smart_threshold_or_attribute_data
   {
   SMART_attributes_sector SmartAttributesData;
   smart_warranty_sector SmartWarrantyData;
   };

#define RLIST_INFORMATION_LEN 24

struct  rlist_information
   {
   uint32          RListMax;
   uint32          RListCurrent;
   uint32          PowerOnTimeInMinutes;
   uint32          TimeLimitInMinutes;
   uint32          PercentageOfTimeUsed;
   uint32          Bitfield1  ;
   };

#define rlist_information_UsingSMARTPOH_OFFSET                                                               0x0000
#define rlist_information_UsingSMARTPOH_MASK                                                                 0x0001

#define rlist_information_WithinTimeLimit_OFFSET                                                             0x0001
#define rlist_information_WithinTimeLimit_MASK                                                               0x0002

#define rlist_information_NoTimeLimit_OFFSET                                                                 0x0002
#define rlist_information_NoTimeLimit_MASK                                                                   0xFFFFFFFC


#define SMART_CONTROL_DSB_LEN 548

struct  smart_control_dsb
   {
   dsb_header      Header;
   uint8           Command;
   uint8           padding1;
   smart_threshold_or_attribute_data Data;
   uint8           AttributeUpdatedAndAttribNoTrip;
   uint8           padding2;
   rlist_information RListInfo;
   };

#define SMART_CONTROL_SDBP_DSB_LEN 556

struct  smart_control_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   smart_control_dsb Dsb;
   };

#define PRINT_OUT_SERIAL_PORT_DFB_LEN 504

struct  print_out_serial_port_dfb
   {
   dfb_header      DfbHeader;
   uint32          NumberOfCharsToDisplay;
   uint8           CharArrayToDisplay[496];
   };

#define DEPENDENT_USER_ZONE_INFO_LEN 8

struct  dependent_user_zone_info
   {
   uint32          NumSectorsPerTrk;
   uint32          WedgeSizeInNrzSymbols;
   };

#define UNIV_TIMESTAMP_LEN 8

struct  univ_timestamp
   {
   uint16          TimestampBits00Thru15;
   uint16          TimestampBits16Thru31;
   uint16          TimestampBits32Thru47;
   uint16          PowerCycleCount;
   };

#define CHS_TYPE_LEN 8

struct  chs_type
   {
   uint32          Cylinder;
   uint8           Head;
   uint8           padding1;
   uint16          Sector;
   };

#define CHAN_ERROR_LEN 48

struct  chan_error
   {
   uint16          AnalogError0;
   uint16          AnalogError1;
   uint16          AnalogError2;
   uint16          AnalogError3;
   uint16          AnalogError4;
   uint16          AnalogError5;
   uint16          RawAnalogError0;
   uint16          RawAnalogError1;
   uint16          RawAnalogError2;
   uint16          RawAnalogError3;
   uint16          RawAnalogError4;
   uint16          RawAnalogError5;
   uint16          GluFault;
   uint16          RSMFault;
   uint16          RSMFault1;
   uint16          SABFault;
   uint16          BCIFault;
   uint16          WSMFault;
   uint16          RawWSMFault;
   uint16          RawGluFault;
   uint16          RawRSMFault;
   uint16          RawRSMFault1;
   uint16          RawSABFault;
   uint16          RawBCIFault;
   };

#define RW_OP_STATUS_LEN None

struct  rw_op_status
   {
   uint8           RwSenseStatus;
   uint32          RwErrorCode;
   univ_timestamp  StartingTimeStamp;
   uint32          ElapsedTimeInUsec;
   uint8           SystemAreaAccess;
   uint8           WedgeMode;
   uint8           SeekType;
   uint8           SeekSpeedEnabled;
   uint8           SeekSpeed;
   uint16          SeekTimeInServoBursts;
   uint8           PersistentTrackFollowOffsetPercentValid;
   int16           PersistentTrackFollowOffsetPercent;
   int16           PersistentTrackFollowOffsetCount;
   uint8           TemporaryTrackFollowOffsetPercentValid;
   int16           TemporaryTrackFollowOffsetPercent;
   int16           TemporaryTrackFollowOffsetCount;
   int16           TotalTrackFollowOffsetPercent;
   int16           TotalTrackFollowOffsetCount;
   uint32          SeekDistance;
   uint64          StartingLba;
   chs_type        StartingLllChs;
   chs_type        StartingPlpChs;
   uint64          StartingPba;
   uint64          StartingTransferLength;
   uint8           NextAddrValid;
   uint64          NextLba;
   chs_type        NextLllChs;
   chs_type        NextPlpChs;
   uint64          RemainingTransferLength;
   uint8           RecoveryStatusValid;
   uint64          LastRecoveredLba;
   chs_type        LastRecoveredLllChs;
   chs_type        LastRecoveredPlpChs;
   uint64          RecoveryStatusFlags;
   uint16          RetryCount;
   uint8           FaultStatusValid;
      uint16          PreampFaultStatus;
   uint8           FileErrorCodeValid;
   uint16          FileErrorCode;
   int16           DataTrackWidthInServoCounts;
   uint64          EDACBlkAddrErrValue;
   chan_error      ChannelFaultStatus;
   };

#define RESET_DRIVE_DFB_LEN 6

struct  reset_drive_dfb
   {
   dfb_header      Header;
   uint8           JumpToBootStrapLoader;
   uint8           padding1;
   };

#define BIST_DATA_LEN 28

struct  BIST_data
   {
   uint32          BISTMode;
   uint32          BISTPattern1;
   uint32          BISTPattern2;
   uint32          BISTModeTimeout;
   uint32          BISTValidTag;
   uint32          BISTActivateFISDelayTime;
   uint32          BISTSpeedControlSetting;
   };

#define SET_BIST_FUNCTIONALITY_DFB_LEN 36

struct  set_bist_functionality_dfb
   {
   dfb_header      Header;
   uint16          FunctionCode;
   uint16          padding1;
   BIST_data       BistData;
   };

#define SET_BIST_FUNCTIONALITY_SDBP_DFB_LEN 44

struct  set_bist_functionality_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_bist_functionality_dfb Dfb;
   };

#define SET_BIST_FUNCTIONALITY_DSB_LEN 12

struct  set_bist_functionality_dsb
   {
   dsb_header      Header;
   uint16          BISTActualSATASpeed;
   uint16          BISTCapableSATASpeed;
   };

#define SET_BIST_FUNCTIONALITY_SDBP_DSB_LEN 20

struct  set_bist_functionality_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_bist_functionality_dsb Dsb;
   };

#define SET_SERVO_TRACING_STATE_DSB_LEN 12

struct  set_servo_tracing_state_dsb
   {
   dsb_header      Header;
   uint32          ServoTracingState;
   };

#define GET_VGA_DATA_DSB_LEN 510020

struct  get_vga_data_dsb
   {
   dsb_header      Header;
   uint8           StatusType;
   uint8           padding1;
   uint16          Revs;
   uint16          ServoSectorsPerTrack;
   uint16          WriteHeat;
   uint16          WritePreheat;
   uint16          ReadHeat;
   uint16          VgaData[255][1000];
   };

#define GET_VGA_DATA_SDBP_DSB_LEN 510028

struct  get_vga_data_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_vga_data_dsb Dsb;
   };

#define CLEARANCE_COEFS_ADJ_LEN 20

struct  clearance_coefs_adj
   {
   uint32          Slope; // This is really a 32 bit float value.
   uint32          Intercept; // This is really a 32 bit float value.
   uint32          Correlataion; // This is really a 32 bit float value.
   uint32          MinResidual; // This is really a 32 bit float value.
   uint32          MaxResidual; // This is really a 32 bit float value.
   };

#define HSC_CONTROL_LEN 40

struct  hsc_control
   {
   uint32          ChannelFreq; // This is really a 32 bit float value.
   uint32          Gammah; // This is really a 32 bit float value.
   uint16          AgcValue;
   uint16          CTFFR;
   uint16          CtfRngR;
   uint8           ATT2R;
   uint8           ZFR;
   uint16          HscStart;
   uint16          HscLength;
   uint8           ZoneGroup;
   uint8           Head;
   uint8           SystemPartition;
   uint8           ATTC;
   uint32          CtffrScaler; // This is really a 32 bit float value.
   uint32          DeltaFlyHeight; // This is really a 32 bit float value.
   uint8           FafhDiameter;
   uint8           ATTCRD;
   uint8           PreAmpGain;
   uint8           padding1;
   uint16          VGAS;
   uint16          padding2;
   };

#define HIRP_ARRAY_LEN 16

struct  hirp_array
   {
   uint32          Hirp; // This is really a 32 bit float value.
   uint32          Hiwp; // This is really a 32 bit float value.
   uint32          DefCoefsHiwp; // This is really a 32 bit float value.
   uint32          DefCoefsWhiwp; // This is really a 32 bit float value.
   };

#define HSC_DATA_LEN 20

struct  hsc_data
   {
   uint16          HeaterDac;
   uint16          padding1;
   uint32          ThirdHarmonic;
   uint32          ThirdHarmonicStdDev; // This is really a 32 bit float value.
   uint32          LowFreqHarmonic; // This is really a 32 bit float value.
   uint32          LowFreqHarmonicStdDev; // This is really a 32 bit float value.
   };

#define ALL_HSC_DATA_LEN 10244

struct  all_hsc_data
   {
   uint16          HscSamplesThisTrack;
   uint16          padding1;
   hsc_data        HscData[512];
   };

#define RW_SENSE_LEN 8

struct  rw_sense
   {
   uint8           Status;
   uint8           padding1[3];
   uint32          ErrorCode;
   };

#define RW_RESPONSE_COMMON_LEN 12

struct  rw_response_common
   {
   uint32          ReqCmpltCallBackFuncPtr;
   rw_sense        Sense;
   };

#define RW_CALCULATE_TRACK_POSITION_REQUEST_RESPONSE_LEN 56

struct  rw_calculate_track_position_request_response
   {
   rw_response_common Comm;
   uint32          RwCyl;
   uint32          NominalCyl;
   uint32          padding1;
   int64           NominalPosition;
   int32           LogicalServoPosition;
   int32           PhysicalServoPosition;
   uint16          TrackPitchMultiplier;
   uint16          padding2;
   uint32          Partition;
   uint16          RadiusQ4;
   uint8           Head;
   uint8           ValidField;
   uint32          padding3;
   };

#define WRITE_TRIPLETS_LEN 6

struct  write_triplets
   {
   uint16          WriteCurrent;
   uint16          WriteDamping;
   uint16          WriteDampingDuration;
   };

#define CHANNEL_REGS_DUMP_LEN 36870

struct  channel_regs_dump
   {
   uint8           ChannelRegsDumpedFlag;
   uint8           padding1;
   uint16          NumOfRegsRd;
   uint16          RegAddr;
   uint16          RegData[18432];
   };

#define ALL_CHANNEL_REGS_DUMP_LEN 73740

struct  all_channel_regs_dump
   {
   channel_regs_dump PreChannelRegsDump;
   channel_regs_dump PostChannelRegsDump;
   };

#define SUPER_SECTOR_DATA_DUMP_LEN 10248

struct  super_sector_data_dump
   {
   uint8           SuperSectorDataDumpFlag;
   uint8           padding1;
   uint16          PreHeaterDAC;
   uint16          HeaterDAC;
   uint16          NumSuperSectorsSampled;
   uint32          ThirdHarmonic[1024]; // This is really a 32 bit float value.
   int16           Pes[1024];
   uint32          LowFreqHarmonic[1024]; // This is really a 32 bit float value.
   };

#define CHANNEL_CALIBRATION_PROCESSOR_REGISTERS_LEN 4508

struct  channel_calibration_processor_registers
   {
   uint8           CalProcRegFlag;
   uint8           OutputAllCalRegs;
   uint16          NumProcCalRegsToDisplay;
   uint16          CalRegAddr[500];
   uint8           CalRegData[500];
   uint16          CalRegVerificationAddr[500];
   uint8           CalRegVerificationData[500];
   uint8           Head;
   uint8           Diameter;
   uint16          NumOriginalProcCalRegsToDisplay;
   uint16          CalRegOriginalAddr[500];
   uint8           CalRegOriginalData[500];
   };

#define CAL_CLEARANCE_COEFS_ADJ_OUTPUT_LEN 98888

struct  cal_clearance_coefs_adj_output
   {
   clearance_coefs_adj CoefAdj;
   uint32          ControlFlags;
   hsc_control     HscControl;
   hirp_array      HirpArray;
   all_hsc_data    AllHscData;
   uint32          padding1;
   rw_calculate_track_position_request_response TrkPos;
   write_triplets  WrtTriplet;
   all_channel_regs_dump AllChannelRegsDump;
   uint16          padding2;
   super_sector_data_dump SuperSectorDataDump;
   channel_calibration_processor_registers ChannelCalProcessorRegs;
   };

#define GET_DOS_VERSION_DFB_LEN 4

struct  get_dos_version_dfb
   {
   dfb_header      Header;
   };

#define DISABLE_ENABLE_SERVO_ZAP_DFB_LEN 6

struct  disable_enable_servo_zap_dfb
   {
   dfb_header      Header;
   uint8           ChangeZAPControl;
   uint8           ZAPControlMode;
   };

#define ATA_FAST_PERFORMANCE_PRM_LEN 76

struct  ata_fast_performance_prm
   {
   uint32          ataNeedFreeVBMEntry;
   uint32          ataNeedFreePoolSectors;
   uint32          ataNumberOfHostOverlapCm;
   uint32          ataNumberOfReadCacheHitCm;
   uint32          ataNumberOfReadCommand;
   uint32          ataNumberOfWriteCommand;
   uint32          ataNeedDiscNodeForRead;
   uint32          ataNeedDiscNodeForWrite;
   uint32          ataWCachedGt56;
   uint32          ataWCachedGt48;
   uint32          ataWCachedGt40;
   uint32          ataWCachedGt32;
   uint32          ataWCachedLt32;
   uint32          ataNumberOfWriteScatterGather;
   uint32          ataNumOfWSGGt4096;
   uint32          ataNumOfWSGGt3072;
   uint32          ataNumOfWSGGt2048;
   uint32          ataNumOfWSGGt1024;
   uint32          ataNumOfWSGLt1024;
   };

#define START_ELEMENT_LEN 4

struct  start_element
   {
   uint32          DefectLogicalCylinder;
   uint32          Index;
   };

#define ELEMENT_COUNT_LEN 4

struct  element_count
   {
   uint32          Cylinders;
   uint32          Indices;
   };

#define GET_DEFECT_LISTS_INFO_DFB_LEN 24

struct  get_defect_lists_info_dfb
   {
   dfb_header      Header;
   uint16          ListMask;
   uint16          FlagsMask;
   uint32          ChosenHead;
   start_element   StartElement;
   element_count   ElementCount;
   uint8           ExtraSummaryRequested;
   uint8           padding1[3];
   };

#define LOAD_UNLOAD_DATA_LEN 20

struct  load_unload_data
   {
   int16           LoadUnloadCounter;
   int16           CalibratedBemfKnobSetting;
   int16           VcmBemfOffset;
   int16           BemfCalResidualError;
   int16           BemfCalRetries;
   int16           LoadUnloadPeakCurrent;
   int16           LoadUnloadMaxSpinDipError;
   int16           LoadUnloadPeakVelocity;
   int16           LoadHeadsRetries;
   uint16          LoadUnloadErrorCode;
   };

#define LOAD_UNLOAD_HEADS_DSB_LEN 44

struct  load_unload_heads_dsb
   {
   dsb_header      Header;
   load_unload_heads_parms LoadUnloadParms;
   load_unload_data LoadUnloadInfo;
   uint32          ElapsedTimeInUsec;
   int16           VelocityDefaultInAdcCounts;
   uint16          padding1;
   };

#define NRZ_SYMBOL_EXTENT_ADDR_TYPE_LEN 16

struct  nrz_symbol_extent_addr_type
   {
   uint32          PhysicalCylinder;
   uint8           LogicalHead;
   uint8           padding1[3];
   uint32          SymbolsFromIndex;
   uint32          LengthInSymbols;
   };

#define TRANSLATION_ADDR_LEN 16

struct  translation_addr
   {
   uint64          Lba;
   uint64          padding1;
   uint64          Pba;
   uint64          padding2;
   uint64          LogicalTrack;
   uint64          padding3;
   chs_type        Chs;
   uint64          padding4;
   chs_type        Chw;
   uint64          padding5;
   uint32          Cyl;
   uint32          padding6[3];
   uint16          Sector;
   uint16          padding7[7];
   uint16          Wedge;
   uint16          padding8[7];
   nrz_symbol_extent_addr_type SymbolExtentAddr;
   };

#define SYS_DISC_HDR_INFO_LEN 8

struct  sys_disc_hdr_info
   {
   int32           StartLBA;
   int32           EndLBA;
   };

#define TRACK_POSITION_LEN 12

struct  track_position
   {
   uint32          Cyl;
   uint32          DataCyl;
   uint8           Head;
   uint8           padding1[3];
   };

#define SECTOR_POSITION_LEN 16

struct  sector_position
   {
   track_position  Track;
   uint16          Sector;
   uint16          padding1;
   };

#define SIM_FILE_INFO_LEN 40

struct  sim_file_info
   {
   uint32          FileDesc;
   uint32          FileSize;
   uint64          FileLocation;
   sector_position SectorPos;
   uint32          FileVolume;
   uint32          RWErrCode;
   };

#define FILE_VOLUME_INFO_LEN 20016

struct  file_volume_info
   {
   uint32          Volume;
   uint32          padding1;
   sim_file_info   SIMFileInfo[500];
   uint16          TotalFiles;
   uint16          padding2[3];
   };

#define FLASH_SEG_INFO_LEN 24

struct  flash_seg_info
   {
   uint8           SegType;
   uint8           padding1[3];
   uint32          FlashSegOffset;
   uint32          ContSegOffset;
   uint32          SegLength;
   uint32          DirLevel;
   uint32          Flags;
   };

#define FLASH_LAYOUT_INFO_LEN 868

struct  flash_layout_info
   {
   flash_seg_info  FlashSegmentInfo[36];
   uint16          TotalSegments;
   uint16          padding1;
   };

#define SIM_FILES_INFO_DSB_LEN 301160

struct  sim_files_info_dsb
   {
   dsb_header      Header;
   uint32          FileDescReq;
   sys_disc_hdr_info SysDiscHdrInfo[4];
   uint32          padding1;
   file_volume_info SIMFileAndVolInfo[15];
   flash_layout_info FlashLayoutInfo;
   uint32          Options;
   };

#define SIM_FILES_INFO_SDBP_DSB_LEN 301168

struct  sim_files_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   sim_files_info_dsb Dsb;
   };

#define RW_BERP_REQUEST_LEN 16

struct  rw_berp_request
   {
   uint8           Options;
   uint8           ControlFlags;
   uint16          ErasureFlagControl;
   uint16          ErasureSlideWindowSize;
   uint16          ErasureSlideWindowJog;
   uint16          ExtendedIterations;
   uint16          MaxLocalIterations;
   uint16          SlidingWindowIterations;
   uint16          MAMRIterations;
   };

#define LDPC_ITERATION_CONTROL_DSB_LEN 40

struct  ldpc_iteration_control_dsb
   {
   dsb_header      Header;
   uint32          HardwareIterationCount;
   uint32          RwLocalIterationCount;
   uint8           RwLocalIterationOverride;
   uint8           RwGlobalIterationEnable;
   uint8           RwGlobalIterationOverride;
   uint8           padding1;
   rw_berp_request BerpRequest;
   uint8           BerpOverride;
   uint8           padding2[3];
   };

#define TWEAKED_WRITE_POWER_LEN 3

struct  tweaked_write_power
   {
   uint8           WriteCurrent;
   uint8           WriteDamping;
   uint8           WriteDampingDur;
   };

#define CONFIGURE_GPIO_TEST_PINS_DFB_LEN 8

struct  configure_GPIO_test_pins_dfb
   {
   dfb_header      Header;
   uint32          ConfigurePinsSubCmd;
   };

#define READ_SERVO_RAM_AT_ADDR_DFB_LEN 12

struct  read_servo_ram_at_addr_dfb
   {
   dfb_header      Header;
   uint32          ServoRamAddr;
   uint8           NumberOfBytes;
   uint8           padding1[3];
   };

#define READ_SERVO_RAM_AT_ADDR_SDBP_DFB_LEN 20

struct  read_servo_ram_at_addr_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_servo_ram_at_addr_dfb Dfb;
   };

#define READ_SMART_LOG_DSB_LEN 32848

struct  read_smart_log_dsb
   {
   dsb_header      Header;
   uint16          LogAddress;
   uint16          ByteXfrLen;
   uint16          Offset;
   uint8           Options;
   uint8           ValueFromOptions[64];
   uint8           FileData[32768];
   uint8           padding1;
   };

#define READ_SMART_LOG_SDBP_DSB_LEN 32856

struct  read_smart_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_smart_log_dsb Dsb;
   };

#define RW_FORMAT_LOG_FORMAT_XFR_EVENT_INFO_LEN 40

struct  rw_format_log_format_xfr_event_info
   {
   int32           FormatWrite;
   uint32          padding1;
   uint64          StartBlkAddr;
   uint64          XfrLen;
   uint64          NextAccessedBlkAddr;
   uint32          ErrCode;
   uint8           Status;
   uint8           padding2[3];
   };

#define SPIN_UP_DRIVE_DFB_LEN 16

struct  spin_up_drive_dfb
   {
   dfb_header      Header;
   uint8           SpinUpHoldState;
   uint8           PhysicalCylValid;
   uint16          padding1;
   uint32          PhysicalCyl;
   uint8           LogicalHdValid;
   uint8           LogicalHd;
   uint16          padding2;
   };

#define RW_RETRIEVE_RW_PARITY_SECS_SLIP_LIST_INFO_INPUTS_LEN 4

struct  rw_retrieve_rw_parity_secs_slip_list_info_inputs
   {
   uint16          StartIndex;
   uint16          NumEntriesRequested;
   };

#define RW_PARITY_SECS_SLIP_LIST_ENTRY_INFO_LEN 16

struct  rw_parity_secs_slip_list_entry_info
   {
   uint64          SuperBlkAddr;
   uint16          SlipCnt;
   uint8           Head;
   uint8           padding1;
   uint32          Cylinder;
   };

#define RW_RETRIEVE_RW_PARITY_SECS_SLIP_LIST_INFO_OUTPUTS_LEN 8

struct  rw_retrieve_rw_parity_secs_slip_list_info_outputs
   {
   uint16          FormatRevision;
   uint16          TotalAllocatedEntryCount;
   uint16          TotalEntryCount;
   uint16          NumEntriesRetrieved;
   };

#define GET_SUPER_PARITY_SLIP_LIST_DSB_LEN 65560

struct  get_super_parity_slip_list_dsb
   {
   dsb_header      Header;
   rw_retrieve_rw_parity_secs_slip_list_info_inputs InputInfo;
   uint32          padding1;
   rw_parity_secs_slip_list_entry_info Entry[4096];
   rw_retrieve_rw_parity_secs_slip_list_info_outputs OutputInfo;
   };

#define CHANNEL_TEMPERATURE_LEN 8

struct  channel_temperature
   {
   uint16          SRCTemperatureInCelsius;
   uint16          MaxSRCTemperatureInCelsius;
   uint16          TemperatureInCelsius;
   uint16          MaxTemperatureInCelsius;
   };

#define CLEAR_DOS_LOG_PAGE_COUNTERS_DSB_LEN 8

struct  clear_dos_log_page_counters_dsb
   {
   dsb_header      Header;
   };

#define CLEAR_DOS_LOG_PAGE_COUNTERS_SDBP_DSB_LEN 16

struct  clear_dos_log_page_counters_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   clear_dos_log_page_counters_dsb Dsb;
   };

#define DIAG_RW_WEDGE_OPTIONS_LEN 56

struct  diag_rw_wedge_options
   {
   uint8           FormattedWedgeTransfer;
   uint8           ContinueOnSyncError;
   uint16          WedgesToSkip;
   uint32          WedgeSizeInNrzSymbols;
   uint16          DataCollectionChannelRegs;
   uint16          DataCollectionChannelRegAddr[16];
   uint8           SwapNrzData;
   uint8           ChannelPatternGeneration;
   uint8           TSpacing;
   uint8           BypassChannelCoderateRegConfiguration;
   uint16          padding1;
   int32           RwBufferBlocks;
   uint8           EnChnInternalPatternGenFwAssistance;
   uint8           padding2[3];
   };

#define RW_TARGET_WEDGE_DFB_LEN 64

struct  rw_target_wedge_dfb
   {
   dfb_header      Header;
   uint8           WriteOp;
   uint8           padding1[3];
   diag_rw_wedge_options Options;
   };

#define WR_PREAMP_REG_DSB_LEN 12

struct  wr_preamp_reg_dsb
   {
   dsb_header      Header;
   uint8           RegPage;
   uint8           RegAddrOffset;
   uint16          RegData;
   };

#define WR_PREAMP_REG_SDBP_DSB_LEN 20

struct  wr_preamp_reg_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   wr_preamp_reg_dsb Dsb;
   };

#define RW_ZONE_INFO_LEN 804

struct  rw_zone_info
   {
   uint32          NumUserZones;
   dependent_user_zone_info DependentUserServoZone[100];
   };

#define GET_RW_ZONE_INFO_DSB_LEN 812

struct  get_rw_zone_info_dsb
   {
   dsb_header      Header;
   rw_zone_info    RwZoneInfo;
   };

#define DOS_POSITION_LEN 16

struct  dos_position
   {
   uint32          ScanUnit;
   uint8           RelativeCylInScanUnit;
   uint8           SurfaceCyl;
   uint16          padding1;
   uint64          TargetLBA;
   };

#define RD_POWER_ASIC_REG_DFB_LEN 8

struct  rd_power_asic_reg_dfb
   {
   dfb_header      Header;
   uint8           RegAddr;
   uint8           padding1;
   uint16          NumOfRegsToRd;
   };

#define RD_POWER_ASIC_REG_SDBP_DFB_LEN 16

struct  rd_power_asic_reg_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rd_power_asic_reg_dfb Dfb;
   };

#define GET_DEVICE_TEMPERATURE_DFB_LEN 6

struct  get_device_temperature_dfb
   {
   dfb_header      Header;
   uint8           DeviceSelect;
   uint8           padding1;
   };

#define GET_DEVICE_TEMPERATURE_SDBP_DFB_LEN 16

struct  get_device_temperature_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_device_temperature_dfb Dfb;
   uint16          padding1;
   };

#define SERVO_SECTOR_ERROR_LOG_ENTRY_LEN 8

struct  servo_sector_error_log_entry
   {
   uint32          Track;
   uint16          Sector;
   uint8           Head;
   uint8           ErrorType;
   };

#define THROUGHPUT_DFB_LEN 60

struct  throughput_dfb
   {
   dfb_header      Header;
   uint32          MaxCylSkew;
   uint32          MinCylSkew;
   uint32          MaxHeadSkew;
   uint32          MinHeadSkew;
   uint32          MaxMiniZoneSkew;
   uint32          MinMiniZoneSkew;
   uint8           Read;
   uint8           ReadSkipWrite;
   uint8           EvenMiniZoneIndex;
   uint8           OddMiniZoneIndex;
   uint8           AllHeads;
   uint8           AllZones;
   uint16          padding1;
   uint32          Head;
   uint32          Zone;
   uint32          SkewStepSize;
   uint32          LengthInTracksOrBands;
   uint32          OffsetInTracksOrBands;
   uint32          MaxNumRetries;
   };

#define THROUGHPUT_SDBP_DFB_LEN 68

struct  throughput_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   throughput_dfb  Dfb;
   };

#define PREAMP_TEMPERATURE_LEN 2

struct  preamp_temperature
   {
   uint16          TemperatureInCelsius;
   };

#define THERMISTOR_TEMPERATURE_LEN 14

struct  thermistor_temperature
   {
   int16           A2DRefVoltage;
   int16           Voltage;
   int16           TemperatureInCelsius;
   uint16          HumidityInTenthsOfPercent;
   int16           RawHumidityInfoSampledFromServo;
   uint16          MixedRatio;
   uint16          Pressure;
   };

#define RW_FAFH_AR_SENSOR_RAW_MEASUREMENT_DATA_LEN 40

struct  rw_fafh_ar_sensor_raw_measurement_data
   {
   uint32          HirpValue; // This is really a 32 bit float value.
   uint32          ArValue0; // This is really a 32 bit float value.
   uint32          ArValueX; // This is really a 32 bit float value.
   uint32          ReaderClearance0; // This is really a 32 bit float value.
   uint32          ReaderClearanceX; // This is really a 32 bit float value.
   uint32          LowFreqAmplitude0;
   uint32          LowFreqAmplitudeX;
   uint32          HighFreqAmplitude0;
   uint32          HighFreqAmplitudeX;
   uint8           HeaterValue;
   uint8           padding1[3];
   };

#define AMPLITUDE_RATIO_SENSOR_OUTPUT_LEN 113776

struct  amplitude_ratio_sensor_output
   {
   uint32          ControlFlags;
   uint32          ChannelFreq; // This is really a 32 bit float value.
   uint16          Ctffr;
   uint16          padding1;
   all_hsc_data    AllHscData;
   hirp_array      HighFreqHirp[256];
   uint32          AmplitudeRatio[256]; // This is really a 32 bit float value.
   uint32          WriteClearance[256]; // This is really a 32 bit float value.
   rw_calculate_track_position_request_response TrkPos;
   all_channel_regs_dump AllChannelRegsDump;
   super_sector_data_dump SuperSectorDataDump;
   channel_calibration_processor_registers ChannelCalProcessorRegs;
   preamp_temperature PreMeasurementPreampTemperature[256];
   preamp_temperature PostMeasurementPreampTemperature[256];
   channel_temperature PostMeasurementChannelTemperature[256];
   thermistor_temperature PostMeasurementDiodeTemperature[256];
   uint32          TimeStamp[256];
   uint8           GainOptiLoopCount;
   uint8           GainOptiLoopPick;
   int8            Attc;
   int8            PreAmpGain;
   int8            AttcRd;
   int8            Att2r;
   int16           Vgar;
   uint32          ChannelGain; // This is really a 32 bit float value.
   uint8           PctOfBpi;
   uint8           padding2[3];
   uint32          AmplitudeRatioStDev; // This is really a 32 bit float value.
   uint32          HighFreqHirpStDev; // This is really a 32 bit float value.
   uint32          ReferenceLowFreqAmpStDev; // This is really a 32 bit float value.
   uint32          ReferenceHighFreqAmpStDev; // This is really a 32 bit float value.
   uint32          ActuatedLowFreqAmpStDev; // This is really a 32 bit float value.
   uint32          ActuatedHighFreqAmpStDev; // This is really a 32 bit float value.
   uint16          HscLength;
   uint16          padding3;
   uint32          LowFreqHarmonicAvg; // This is really a 32 bit float value.
   uint32          HighFreqHarmonicAvg; // This is really a 32 bit float value.
   int16           OptimalLowFreqAmpOffset;
   uint8           Zfr;
   uint8           padding4;
   uint32          DeltaFlyHeight; // This is really a 32 bit float value.
   int16           DacToTarget;
   uint16          padding5;
   rw_fafh_ar_sensor_raw_measurement_data FafhRawArData;
   uint32          ReadClearance[256]; // This is really a 32 bit float value.
   uint32          Gammah; // This is really a 32 bit float value.
   uint16          CalHeaterDac;
   uint16          Vgas;
   uint32          HighFrequencyHarmonic; // This is really a 32 bit float value.
   uint32          LowFrequencyHarmonic; // This is really a 32 bit float value.
   };

#define AMPLITUDE_RATIO_SENSOR_DSB_LEN 113784

struct  amplitude_ratio_sensor_dsb
   {
   dsb_header      Header;
   amplitude_ratio_sensor_output Output;
   };

#define AMPLITUDE_RATIO_SENSOR_SDBP_DSB_LEN 113792

struct  amplitude_ratio_sensor_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   amplitude_ratio_sensor_dsb Dsb;
   };

#define TRANSLATE_ADDR_DFB_LEN 24

struct  translate_addr_dfb
   {
   dfb_header      Header;
   uint8           TranslationType;
   uint8           padding1[3];
   translation_addr TranslationAddr;
   };

#define TRANSLATE_ADDR_SDBP_DFB_LEN 32

struct  translate_addr_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   translate_addr_dfb Dfb;
   };

#define MR_BIAS_SAP_DATA_LEN 28

struct  mr_bias_sap_data
   {
   uint8           SapOperation;
   uint8           Head;
   uint8           MaxHead;
   uint8           padding1;
   uint16          Data[12];
   };

#define RW_STATS_CONTROL_DSB_LEN 12

struct  rw_stats_control_dsb
   {
   dsb_header      Header;
   uint8           StatsEnabled;
   uint8           padding1[3];
   };

#define GET_DOS_SCANS_DUE_DSB_LEN 28

struct  get_dos_scans_due_dsb
   {
   dsb_header      Header;
   uint32          ScanUnitsAboveOughtToThreshold;
   uint32          ScanUnitsAboveNeedToThreshold;
   uint32          WritesSinceLastSave;
   uint32          WorstDOSCount;
   uint32          WorstDOSScanUnit;
   };

#define GET_DOS_SCANS_DUE_SDBP_DSB_LEN 36

struct  get_dos_scans_due_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_scans_due_dsb Dsb;
   };

#define MODIFY_PREAMP_LOCK_DSB_LEN 12

struct  modify_preamp_lock_dsb
   {
   dsb_header      Header;
   uint8           PreampLocked;
   uint8           padding1[3];
   };

#define MODIFY_PREAMP_LOCK_SDBP_DSB_LEN 20

struct  modify_preamp_lock_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   modify_preamp_lock_dsb Dsb;
   };

#define DIAG_SECTOR_SPLIT_INFO_LEN 12

struct  diag_sector_split_info
   {
   uint16          PreceedingServoBurst;
   uint16          SplitServoBurst;
   uint16          FirstFragmentSymbols;
   uint16          LastFragmentSymbols;
   uint16          SplitWedgesCnt;
   uint16          DataSymbolsPerWedge;
   };

#define DIAG_SECTOR_DEFECT_INFO_LEN 16

struct  diag_sector_defect_info
   {
   uint8           ReallocationStatus;
   uint8           padding1[7];
   uint64          ReallocationPba;
   };

#define RW_SECTOR_ATTRIBUTES_LEN 13

struct  rw_sector_attributes
   {
   uint8           InitialPLOLength;
   uint8           PLOLength;
   uint8           InterSectorGap;
   uint8           GapBeforeServo;
   uint8           GapAfterServo;
   uint8           SequencerPLO1;
   uint8           SequencerPLO;
   uint8           SequencerISGWrite;
   uint8           SequencerISGRead1;
   uint8           SequencerISGRead;
   uint8           SequencerSGateToWGate;
   uint8           SequencerSGateToRGate;
   uint8           ReadChannelSyncMarkTimeout;
   };

#define DIAG_SECTOR_INFO_LEN 136

struct  diag_sector_info
   {
   uint8           SystemArea;
   uint8           padding1[7];
   uint64          HostLba;
   uint64          UserLba;
   uint64          ParityLba;
   uint64          SuperBlock;
   uint64          Pba;
   chs_type        PlpChs;
   chs_type        LllChs;
   uint16          WedgeAddr;
   diag_sector_split_info SectorSplitInfo;
   uint16          padding2;
   diag_sector_defect_info SectorDefectInfo;
   uint8           SymbolsFromIndexValid;
   uint8           padding3[3];
   uint32          SymbolsFromIndex;
   uint8           LengthInfoValid;
   uint8           padding4[3];
   uint32          LengthInSymbols;
   uint16          LengthInSectors;
   uint16          LengthInWedges;
   rw_sector_attributes SectorAttributes;
   uint8           ISPValidForUserLBA;
   uint8           SuperBlockValidInPVT;
   uint8           padding5[5];
   };

#define GET_DOS_SCAN_UNIT_FROM_LBA_OPTION_LEN 1

struct  get_dos_scan_unit_from_lba_option
   {
   uint8           Bitfield1  ;
   };

#define get_dos_scan_unit_from_lba_option_OriginalScanUnit_OFFSET                                            0x0000
#define get_dos_scan_unit_from_lba_option_OriginalScanUnit_MASK                                              0x0001

#define get_dos_scan_unit_from_lba_option_Reserved_OFFSET                                                    0x0001
#define get_dos_scan_unit_from_lba_option_Reserved_MASK                                                      0x00FE


#define COPY_CORRECTION_BUFFER_DFB_LEN 10

struct  copy_correction_buffer_dfb
   {
   dfb_header      Header;
   uint16          SourceAddrOffset;
   uint16          DestinationAddrOffset;
   uint16          SymbolCountOfCorrectionBuffer;
   };

#define COPY_CORRECTION_BUFFER_SDBP_DFB_LEN 20

struct  copy_correction_buffer_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   copy_correction_buffer_dfb Dfb;
   uint16          padding1;
   };

#define RW_BLOCK_RANGE_LEN 16

struct  rw_block_range
   {
   uint64          StartBlkAddr;
   uint64          Length;
   };

#define RW_RETRIEVE_DEFECTIVE_SECTORS_LIST_ENTRY_LEN 24

struct  rw_retrieve_defective_sectors_list_entry
   {
   rw_block_range  BlkRange;
   uint8           Flags;
   uint8           padding1[7];
   };

#define GET_G_LIST_DSB_LEN 3624

struct  get_g_list_dsb
   {
   dsb_header      Header;
   uint32          NumEntriesReturned;
   uint32          NumEntriesOnDrive;
   uint8           FileType;
   uint8           padding1[7];
   rw_retrieve_defective_sectors_list_entry GListEntry[100];
   uint32          SymbolsFromIndex[100];
   chs_type        PlpChs[100];
   };

#define GET_G_LIST_SDBP_DSB_LEN 3632

struct  get_g_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_g_list_dsb  Dsb;
   };

#define GET_LOG_FILE_INFO_DFB_LEN 6

struct  get_log_file_info_dfb
   {
   dfb_header      Header;
   uint16          LogId;
   };

#define GLT_ZONE_STRUCT_LEN 16

struct  glt_zone_struct
   {
   uint64          FirstLogTrack;
   uint64          LastLbaTrack;
   };

#define GET_LBA_TRACKS_DSB_LEN 49168

struct  get_lba_tracks_dsb
   {
   dsb_header      Header;
   uint32          MaxHead;
   uint32          MaxZone;
   glt_zone_struct ZoneStructHZ[12][256];
   };

#define GET_LBA_TRACKS_SDBP_DSB_LEN 49176

struct  get_lba_tracks_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_lba_tracks_dsb Dsb;
   };

#define OFFSET_IN_BAND_TYPE_LEN 4

struct  offset_in_band_type
   {
   uint32          Sector;
   uint32          Track;
   };

#define BAND_OFFSET_TYPE_LEN 12

struct  band_offset_type
   {
   uint32          BandId;
   offset_in_band_type Offset;
   uint8           OffsetType;
   uint8           padding1[3];
   };

#define TARGET_ADDR_LEN 16

struct  target_addr
   {
   uint64          Lba;
   uint64          padding1;
   chs_type        Chs;
   uint64          padding2;
   band_offset_type BandOffset;
   uint32          padding3;
   };

#define TEST_SPACE_LBA_MODE_LIMITS_LEN 16

struct  test_space_lba_mode_limits
   {
   uint64          MinLba;
   uint64          MaxLba;
   };

#define TEST_SPACE_CHS_MODE_LIMITS_LEN 100

struct  test_space_chs_mode_limits
   {
   uint8           MinHead;
   uint8           MaxHead;
   uint16          padding1;
   uint32          MinCyl[12];
   uint32          MaxCyl[12];
   };

#define TEST_SPACE_BAND_MODE_LIMITS_LEN 8

struct  test_space_band_mode_limits
   {
   uint32          MinBand;
   uint32          MaxBand;
   };

#define TEST_SPACE_LIMITS_LEN 104

struct  test_space_limits
   {
   test_space_lba_mode_limits LbaMode;
   uint32          padding1[22];
   test_space_chs_mode_limits ChsMode;
   uint32          padding2;
   test_space_band_mode_limits BandMode;
   uint32          padding3[24];
   };

#define SET_TEST_SPACE_DSB_LEN 496

struct  set_test_space_dsb
   {
   dsb_header      Header;
   uint8           TargetAddrMode;
   uint8           padding1[7];
   target_addr     TargetAddr;
   test_space_options Options;
   uint32          padding2;
   test_space_limits CurrentTestSpaceLimits;
   test_space_lba_mode_limits UserLbaModeTestSpaceLimits;
   test_space_lba_mode_limits SystemLbaModeTestSpaceLimits;
   test_space_chs_mode_limits UserLllChsModeTestSpaceLimits;
   test_space_chs_mode_limits SystemLllChsModeTestSpaceLimits;
   test_space_chs_mode_limits PlpChsModeTestSpaceLimits;
   uint32          padding3;
   uint64          TargetBufferSectorOffset;
   test_space_band_mode_limits UserBandModeTestSpaceLimits;
   };

#define DEFECT_LIST_SELECT_LEN 4

struct  defect_list_select
   {
   uint32          Bitfield1  ;
   };

#define defect_list_select_InitUserSlipList_OFFSET                                                           0x0000
#define defect_list_select_InitUserSlipList_MASK                                                             0x0001

#define defect_list_select_Reserved1_OFFSET                                                                  0x0001
#define defect_list_select_Reserved1_MASK                                                                    0x0002

#define defect_list_select_InitUserAltList_OFFSET                                                            0x0002
#define defect_list_select_InitUserAltList_MASK                                                              0x0004

#define defect_list_select_InitServoDefectList_OFFSET                                                        0x0003
#define defect_list_select_InitServoDefectList_MASK                                                          0x0008

#define defect_list_select_Reserved2_OFFSET                                                                  0x0004
#define defect_list_select_Reserved2_MASK                                                                    0x0030

#define defect_list_select_InitNonResidentGrownDst_OFFSET                                                    0x0006
#define defect_list_select_InitNonResidentGrownDst_MASK                                                      0x0040

#define defect_list_select_Reserved3_OFFSET                                                                  0x0007
#define defect_list_select_Reserved3_MASK                                                                    0x0180

#define defect_list_select_InitDataScrubList_OFFSET                                                          0x0009
#define defect_list_select_InitDataScrubList_MASK                                                            0x0200

#define defect_list_select_Reserved4_OFFSET                                                                  0x000A
#define defect_list_select_Reserved4_MASK                                                                    0xFFFFFC00


#define DIAG_DST_STATUS_LEN 20

struct  diag_dst_status
   {
   uint8           DSTStatus;
   uint8           padding1[3];
   uint32          DSTPercentCplt;
   uint32          DSTCurrSubTestRange;
   uint32          DSTCurrSubTestProgress;
   uint8           DSTStopped;
   uint8           padding2[3];
   };

#define GET_DST_STATUS_DSB_LEN 28

struct  get_dst_status_dsb
   {
   dsb_header      Header;
   diag_dst_status DstStatus;
   };

#define GET_DST_STATUS_SDBP_DSB_LEN 36

struct  get_dst_status_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_dst_status_dsb Dsb;
   };

#define FAFH_AR_SENSOR_ATOMIC_MEASUREMENT_ITERATION_DATA_LEN 68

struct  fafh_ar_sensor_atomic_measurement_iteration_data
   {
   uint32          StartTimeInMilliSecs;
   int16           IterationMeasurementTemperatureInCelsius;
   int16           IterationChannelTemperatureInCelsius;
   rw_fafh_ar_sensor_raw_measurement_data RawSensorData;
   int16           HeaterDacToTarget;
   int16           HeaterDacToPi;
   int16           RobustHeaterDacToTarget;
   uint16          padding1;
   uint32          WPredictionInterval; // This is really a 32 bit float value.
   uint32          TargetHirpSlope; // This is really a 32 bit float value.
   uint8           DacToTargetEstimatedFlag;
   uint8           RetryCount;
   uint16          padding2;
   };

#define FAFH_HISTORY_LOG_FRAME_AR_SENSOR_DATA_LEN 360

struct  fafh_history_log_frame_ar_sensor_data
   {
   uint8           IterationCount;
   uint8           padding1[3];
   uint32          Gammah; // This is really a 32 bit float value.
   uint32          PredictedToMeasuredActiveHirpSlopeDelta; // This is really a 32 bit float value.
   uint32          MeasurementFieldTargetClearanceInAngstroms; // This is really a 32 bit float value.
   int16           DacToMaxClrAdjTowardDiskLimit;
   uint16          padding2;
   fafh_ar_sensor_atomic_measurement_iteration_data AtomicMeasurementIterationData[5];
   };

#define FAFH_HISTORY_LOG_FRAME_SENSOR_DATA_LEN 360

struct  fafh_history_log_frame_sensor_data
   {
   fafh_history_log_frame_ar_sensor_data AR;
   };

#define SERVO_SECTOR_ERROR_LOG_DATA_LEN 260

struct  servo_sector_error_log_data
   {
   uint32          ErrorLogLength;
   servo_sector_error_log_entry LogEntry[32];
   };

#define GET_SERVO_SECTOR_ERROR_LOG_DSB_LEN 268

struct  get_servo_sector_error_log_dsb
   {
   dsb_header      Header;
   servo_sector_error_log_data ServoSectorErrorLogData;
   };

#define GET_SERVO_SECTOR_ERROR_LOG_SDBP_DSB_LEN 276

struct  get_servo_sector_error_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_servo_sector_error_log_dsb Dsb;
   };

#define HEATER_ELEMENT_LEN 3

struct  heater_element
   {
   uint8           WritePreheat;
   uint8           WriteHeat;
   uint8           ReadHeat;
   };

#define AFH_PARMS_LEN 56

struct  afh_parms
   {
   heater_element  Writer;
   heater_element  Reader;
   uint16          padding1;
   uint32          WriteLoss; // This is really a 32 bit float value.
   uint32          ReadHeatDeltaDACDueToTemp; // This is really a 32 bit float value.
   uint32          WriteHeatDeltaDACDueToTemp; // This is really a 32 bit float value.
   uint32          ReadFlyHeight; // This is really a 32 bit float value.
   uint32          WriteFlyHeight; // This is really a 32 bit float value.
   uint32          TweakCylinder;
   uint32          Freq;
   uint8           TweakHead;
   uint8           padding2;
   uint16          TweakZone;
   uint32          TweakPartition;
   int8            TweakTemp;
   uint8           WGCInitialHeat;
   uint16          padding3;
   uint32          RdTotalPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          WrTotalPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   };

#define COLLECT_PES_DFB_LEN 6

struct  collect_pes_dfb
   {
   dfb_header      Header;
   uint16          RevsToCollect;
   };

#define READ_CHANNEL_DATA_DEPOSIT_LEN 12288

struct  read_channel_data_deposit
   {
   diag_uint32_statistics_result StatisticData[16];
   uint16          RawData[6016];
   };

#define RW_TARGET_WEDGE_DSB_LEN None

struct  rw_target_wedge_dsb
   {
   dsb_header      Header;
   rw_op_status    RwOpStatus;
   uint16          DataCollectionWedges;
   uint16          DataCollectionChannelRegs;
   uint16          DataCollectionChannelRegAddr[16];
   read_channel_data_deposit ChannelDataDeposit;
   uint8           ErrorLogValid;
   uint8           ErrorLog[376];
   };

#define RW_TARGET_WEDGE_SDBP_DSB_LEN None

struct  rw_target_wedge_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_target_wedge_dsb Dsb;
   };

#define RW_ZAP_TABLE_DFB_LEN 10

struct  rw_zap_table_dfb
   {
   dfb_header      Header;
   uint8           ModifyZapTableEntry;
   uint8           padding1;
   uint16          ZapTableEntryNumber;
   int16           ZapTableEntryData;
   };

#define RW_ZAP_TABLE_SDBP_DFB_LEN 20

struct  rw_zap_table_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rw_zap_table_dfb Dfb;
   uint16          padding1;
   };

#define SET_RW_WORKING_PARMS_DFB_LEN 16

struct  set_rw_working_parms_dfb
   {
   dfb_header      Header;
   uint32          Value;
   uint32          ParameterId;
   uint8           HeadToBeSet;
   uint8           ZoneToBeSet;
   uint8           MediaPartitionId;
   uint8           padding1;
   };

#define SET_RW_WORKING_PARMS_SDBP_DFB_LEN 24

struct  set_rw_working_parms_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_rw_working_parms_dfb Dfb;
   };

#define LOG_DESCRIPTOR_LEN 8

struct  log_descriptor
   {
   uint16          LogId;
   uint8           LogType;
   uint8           LogLocation;
   uint32          LogFile;
   };

#define GET_SKIP_TRACK_INFO_DFB_LEN 6

struct  get_skip_track_info_dfb
   {
   dfb_header      Header;
   uint16          TotalNoOfTracks;
   };

#define GET_SKIP_TRACK_INFO_SDBP_DFB_LEN 16

struct  get_skip_track_info_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_skip_track_info_dfb Dfb;
   uint16          padding1;
   };

#define ASCII_DATA_DSB_LEN 12

struct  ascii_data_dsb
   {
   dsb_header      Header;
   uint8           Data;
   uint8           padding1[3];
   };

#define ASCII_DATA_SDBP_DSB_LEN 20

struct  ascii_data_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   ascii_data_dsb  Dsb;
   };

#define SMART_POWER_ON_TIME_STAMP_LEN 8

struct  smart_power_on_time_stamp
   {
   uint32          TimeStampHours;
   uint32          TimeStampMsecs;
   };

#define INIT_DEFECT_LIST_OPTIONS_LEN 4

struct  init_defect_list_options
   {
   uint32          Bitfield1  ;
   };

#define init_defect_list_options_InitUserSlipList_OFFSET                                                     0x0000
#define init_defect_list_options_InitUserSlipList_MASK                                                       0x0001

#define init_defect_list_options_Reserved1_OFFSET                                                            0x0001
#define init_defect_list_options_Reserved1_MASK                                                              0x0002

#define init_defect_list_options_InitUserAltList_OFFSET                                                      0x0002
#define init_defect_list_options_InitUserAltList_MASK                                                        0x0004

#define init_defect_list_options_Reserved2_OFFSET                                                            0x0003
#define init_defect_list_options_Reserved2_MASK                                                              0x0038

#define init_defect_list_options_InitNonResidentGrownDst_OFFSET                                              0x0006
#define init_defect_list_options_InitNonResidentGrownDst_MASK                                                0x0040

#define init_defect_list_options_Reserved3_OFFSET                                                            0x0007
#define init_defect_list_options_Reserved3_MASK                                                              0x7FFFFF80

#define init_defect_list_options_SaveToDisk_OFFSET                                                           0x001F
#define init_defect_list_options_SaveToDisk_MASK                                                             0x80000000


#define RREV1_INIT_DEFECT_LIST_DFB_LEN 8

struct  rrev1_init_defect_list_dfb
   {
   dfb_header      Header;
   init_defect_list_options Options;
   };

#define RREV1_INIT_DEFECT_LIST_SDBP_DFB_LEN 16

struct  rrev1_init_defect_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_init_defect_list_dfb Dfb;
   };

#define FAFH_PARM_LEN 4

struct  fafh_parm
   {
   uint32          Float; // This is really a 32 bit float value.
   uint16          MinorRev;
   uint16          padding1;
   uint16          TriggerEnables;
   uint16          padding2;
   uint32          DebugEnables;
   uint16          SensorTypesUsed;
   uint16          padding3;
   uint16          CommandStepsUsed;
   uint16          padding4;
   int16           TemperatureChangeTriggerThresholdInCelsius;
   uint16          padding5;
   uint32          HumidityChangeTriggerThresholdInGramsPerKg; // This is really a 32 bit float value.
   int32           AltitudeChangeTriggerThresholdInFeet;
   uint32          SecondsOnRampRequiringSettling;
   uint8           HeadLoadWithSettlingPeriodicTimerIntervalTableEntry;
   uint8           padding6[3];
   uint8           HeadLoadWithoutSettlingPeriodicTimerIntervalTableEntry;
   uint8           padding7[3];
   uint8           PowerUpPeriodicTimerIntervalTableEntry;
   uint8           padding8[3];
   uint16          StartingTimerIntervalInSeconds;
   uint16          padding9;
   uint16          TimerIntervalMultiplier;
   uint16          padding10;
   uint16          TimerIntervalIncrement;
   uint16          padding11;
   uint16          MaxTimerTriggersForEntry;
   uint16          padding12;
   uint8           NextEntry;
   uint8           padding13[3];
   uint8           ClearanceSettlingActive;
   uint8           padding14[3];
   uint32          MinClearanceChangeThresholdInAngstroms; // This is really a 32 bit float value.
   uint32          MaxClearanceAdjAwayFromDiskInAngstroms; // This is really a 32 bit float value.
   uint32          MaxClearanceAdjTowardDiskInAngstroms; // This is really a 32 bit float value.
   uint32          InitialRequestBusIdlePeriodInMsec;
   uint32          InitialRequestGracePeriodInMsec;
   uint32          SuspendRerequestBusIdlePeriodInMsec;
   uint32          SuspendRerequestGracePeriodInMsec;
   uint8           FieldTargetClearanceInAngstroms;
   uint8           padding15[3];
   uint32          EwmaFilterClearanceSettlingTimeTriggerAlpha; // This is really a 32 bit float value.
   uint32          EwmaFilterSteadyStateTimerTriggerAlpha; // This is really a 32 bit float value.
   uint32          SeekSettleTime;
   uint32          FafhHistoryLogSaveToDiskFrequency;
   uint16          TestEnableFlags;
   uint16          padding16;
   uint16          TestFrequency;
   uint16          padding17;
   uint16          OriginalHeadResistance;
   uint16          padding18;
   uint32          MaxAllowedHeadResistancePercentChange; // This is really a 32 bit float value.
   uint32          TrigCountForArConvergenceRateCalc;
   uint32          HdEnableMinTrigPercentWithArConvergence; // This is really a 32 bit float value.
   uint32          MaxAveragedArMeasurementSequences;
   uint32          MaxAveragedAtomicArMeasurements;
   uint32          MaxAvgAtomicArMeasurementTimeInMsec;
   uint8           SensorEnables;
   uint8           padding19[3];
   uint8           SensorType;
   uint8           padding20[3];
   uint32          MeasurementRwCyl;
   uint32          ArSensorHirpVsDacBeta; // This is really a 32 bit float value.
   uint32          ArSensorTargetClearanceMultiplierForSafeDacCalc; // This is really a 32 bit float value.
   uint32          ArSensorSafeDacCalcAlphaForExtrapDistanceLimitExceeded; // This is really a 32 bit float value.
   uint32          ArSensorOptionsFlags;
   uint32          ArSensorCalcPredictedHirpSlopeDeltaTransferFuncCoeff; // This is really a 32 bit float value.
   uint16          ArSensorDiameterDescriptorSize;
   uint16          padding21;
   uint16          ArSensorHeadDescriptorSize;
   uint16          padding22;
   uint8           ArSensorMaxMeasurementIterations;
   uint8           padding23[3];
   uint8           ArSensorConvergenceMaxHeaterDacDif;
   uint8           padding24[3];
   uint32          ArSensorConvergencePredictionIntervalLimit; // This is really a 32 bit float value.
   uint32          ArSensorConvergenceLastIterationPredictionIntervalLimit; // This is really a 32 bit float value.
   uint32          ArSensorConvergenceExtrapDistanceUpperLimit; // This is really a 32 bit float value.
   uint32          ArSensorConvergenceExtrapDistanceLowerLimitTgtClrMultiplier; // This is really a 32 bit float value.
   uint32          ArSensorConvergenceMaxActualToPredictedHirpSlopeDelta; // This is really a 32 bit float value.
   uint8           ArSensorCalRegData;
   uint8           padding25[3];
   uint32          ArSensorChannelFreq; // This is really a 32 bit float value.
   uint16          ArSensorVgar;
   uint16          padding26;
   uint8           ArSensorAtt2r;
   uint8           padding27[3];
   uint32          ArSensorCtffr;
   uint8           ArSensorZfr;
   uint8           padding28[3];
   int16           ArSensorLowFreqAmpOffset;
   uint16          padding29;
   uint32          ArSensorCoeffA; // This is really a 32 bit float value.
   uint8           ArSensorAttcRd;
   uint8           padding30[3];
   uint8           ArSensorPreAmpGain;
   uint8           padding31[3];
   uint16          ArSensorHscStart;
   uint16          padding32;
   uint16          ArSensorHscLength;
   uint16          padding33;
   uint32          ArSensorHirpVsDacTerm; // This is really a 32 bit float value.
   uint32          ArSensorLocalHirpVsDacSlope; // This is really a 32 bit float value.
   uint32          ArSensorSelfTestPassiveHirpSlope; // This is really a 32 bit float value.
   uint32          ArSensorSelfTestPassiveClearance; // This is really a 32 bit float value.
   uint16          ArSensorNrzSymbolCountAtPushFreq;
   uint16          padding34;
   uint8           ArSensorAdjustedSeqSGateToWGate;
   uint8           padding35[3];
   uint8           ArSensorAdjustedSeqSGateToRGate;
   uint8           padding36[3];
   uint32          ArSensorWedgeXferSizeInNrzSymbols;
   uint16          ArSensorFastIoSampleCount;
   uint16          padding37;
   uint8           GenericSensorParm;
   uint8           padding38[3];
   uint16          HeadMask;
   uint16          padding39;
   uint16          QuickCheckHeadMask;
   uint16          padding40;
   uint8           MaxRetryCount;
   uint8           padding41[3];
   uint8           NextStepIfTooFewValidMsrmts;
   uint8           padding42[3];
   uint8           AdjustFlyHeightBasedOnResults;
   uint8           padding43[3];
   uint16          DhsFrequencySelect1;
   uint16          padding44;
   uint16          DhsFrequencySelect2;
   uint16          padding45;
   uint8           ReadChannelRateMultiplier;
   uint8           padding46[3];
   uint8           WriteChannelRateMultiplier;
   uint8           padding47[3];
   uint16          ReadAndWriteChannelRateDivisor;
   uint16          padding48;
   uint16          MDivisor;
   uint16          padding49;
   uint16          DhsWindowLength;
   uint16          padding50;
   uint16          DhsIntegrationLength;
   uint16          padding51;
   uint32          GenericCoeffLFParm; // This is really a 32 bit float value.
   uint32          GenericCoeffHFParm; // This is really a 32 bit float value.
   };

#define SET_FAFH_PARMS_DFB_LEN 40

struct  set_fafh_parms_dfb
   {
   dfb_header      Header;
   fafh_parm       ParmValue;
   uint32          ParmIndex0;
   uint32          ParmIndex1;
   uint32          ParmIndex2;
   uint32          ParmIndex3;
   uint32          ParmIndex4;
   uint32          ParmIndex5;
   uint32          ParmIndex6;
   uint32          ParmIndex7;
   };

#define GET_HARDWARE_JUMPER_SETTING_DSB_LEN 16

struct  get_hardware_jumper_setting_dsb
   {
   dsb_header      Header;
   uint32          HardwareJumperSelect;
   int32           JumperInstalled;
   };

#define WR_POWER_ASIC_REG_DFB_LEN 12

struct  wr_power_asic_reg_dfb
   {
   dfb_header      Header;
   uint8           RegAddr;
   uint8           padding1[3];
   uint32          RegData;
   };

#define WR_POWER_ASIC_REG_SDBP_DFB_LEN 20

struct  wr_power_asic_reg_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   wr_power_asic_reg_dfb Dfb;
   };

#define CLEAN_SUPER_PARITY_BLOCK_DFB_LEN 8

struct  clean_super_parity_block_dfb
   {
   dfb_header      Header;
   uint32          ParitySectorLBA;
   };

#define CLEAN_SUPER_PARITY_BLOCK_SDBP_DFB_LEN 16

struct  clean_super_parity_block_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   clean_super_parity_block_dfb Dfb;
   };

#define RW_DISC_ECCENTRICITY_DATA_LEN 12

struct  rw_disc_eccentricity_data
   {
   uint32          MagnitudeInMicroinches; // This is really a 32 bit float value.
   uint32          Real; // This is really a 32 bit float value.
   uint32          Imag; // This is really a 32 bit float value.
   };

#define MEASURE_DISC_ECCENTRICITY_DSB_LEN 156

struct  measure_disc_eccentricity_dsb
   {
   dsb_header      Header;
   uint8           MaxHead;
   uint8           padding1[3];
   rw_disc_eccentricity_data DiscEccentricity[12];
   };

#define MEASURE_OPTIMUM_SKEW_CYL_SKEW_INFO_LEN 96664

struct  measure_optimum_skew_cyl_skew_info
   {
   uint8           MinDriveZone;
   uint8           MaxDriveZone;
   uint8           ZoneStepSize;
   uint8           MinDriveHead;
   uint8           MaxDriveHead;
   uint8           padding1[3];
   uint32          ZoneHdFirstWriteCyl[2][10][127];
   uint32          ZoneHdEndWriteCyl[2][10][127];
   uint64          ZoneHdStartLba[2][10][127];
   uint64          ZoneHdEndLba[2][10][127];
   uint64          ZoneHdLbaTransferLength[2][10][127];
   uint16          TestMaxTrys;
   uint16          MinTestCylSkew;
   uint16          MaxTestCylSkew;
   uint16          HeadSkew;
   uint16          ZoneHdCylSkewTrialValueInServoBursts[2][10][127];
   uint32          ZoneHdAveCylSkewWriteTimeInUSecs[2][10][127];
   uint32          ZoneHdBestCylSkewWriteTime[2][10];
   uint16          ZoneHdBestTrialCylSkewValue[2][10];
   uint16          DriveBestCylSkewPickInServoBursts;
   uint8           SeekFailure;
   uint8           WriteFailure;
   uint32          padding2;
   };

#define REV_GET_MODIFY_CONGEN_DFB_LEN 518

struct  rev_get_modify_congen_dfb
   {
   dfb_header      Header;
   uint8           CongenString[256];
   uint8           CongenValue[256];
   uint8           SetCongenData;
   uint8           padding1;
   };

#define DIAG_DOS_SCAN_UNIT_STATUS_LEN 1

struct  diag_dos_scan_unit_status
   {
   uint8           Bitfield1  ;
   };

#define diag_dos_scan_unit_status_Reserved_OFFSET                                                            0x0000
#define diag_dos_scan_unit_status_Reserved_MASK                                                              0x00FF


#define DIAG_DOS_SCAN_UNIT_INFO_LEN 56

struct  diag_dos_scan_unit_info
   {
   uint32          ScanUnit;
   uint16          DOSWriteCount;
   diag_dos_scan_unit_status StatusFlag;
   uint8           Head;
   int64           ODStartLBA;
   int64           ODEndLBA;
   int64           IDStartLBA;
   int64           IDEndLBA;
   uint32          FirstPhyCyl;
   uint32          LastPhyCyl;
   uint32          BandID;
   uint32          BandSize;
   };

#define GET_DOS_SCAN_UNIT_INFO_DSB_LEN 57368

struct  get_dos_scan_unit_info_dsb
   {
   dsb_header      Header;
   uint32          StartingSearchScanUnitIndex;
   uint32          NextSearchScanUnitIndex;
   uint32          NumEntriesRetrieved;
   uint32          padding1;
   diag_dos_scan_unit_info ScanUnitInfo[1024];
   };

#define READ_SERVO_SYMBOL_TABLE_AT_INDEX_DFB_LEN 6

struct  read_servo_symbol_table_at_index_dfb
   {
   dfb_header      Header;
   uint16          ServoSymbolTableIndex;
   };

#define GET_SERVO_EVENT_LOG_DSB_LEN 448

struct  get_servo_event_log_dsb
   {
   dsb_header      Header;
   uint16          ServoEventLog[220];
   };

#define DOS_SERPENT_INFO_LEN 48

struct  dos_serpent_info
   {
   uint64          ODScanStartLBA;
   uint64          ODScanEndLBA;
   uint64          IDScanStartLBA;
   uint64          IDScanEndLBA;
   uint32          StartingTrack;
   uint32          EndingTrack;
   uint16          Flags;
   uint16          padding1[3];
   };

#define RW_FORMAT_LOG_FORMAT_MEDIA_ZONE_START_EVENT_INFO_LEN 32

struct  rw_format_log_format_media_zone_start_event_info
   {
   int32           FormatWrite;
   int32           ReFormat;
   uint8           TargetZone;
   uint8           padding1[7];
   uint64          StartBlkAddr;
   uint64          NumSecs;
   };

#define ZONE_POSITION_LEN 48

struct  zone_position
   {
   uint64          LogicalTrkIndex;
   track_position  Track;
   uint8           ZoneGroup;
   uint8           padding1;
   uint16          Zone;
   uint16          ServoZoneGroup;
   uint16          ServoZone;
   uint32          padding2;
   dos_position    DOSPosition;
   };

#define RW_ADDR_POSITION_LEN 56

struct  rw_addr_position
   {
   zone_position   ZonePosition;
   uint16          Sector;
   uint16          padding1[3];
   };

#define RW_FORMAT_LOG_UNRECOVERED_ERROR_EVENT_INFO_LEN 96

struct  rw_format_log_unrecovered_error_event_info
   {
   uint64          FailedLBA;
   uint64          FailedPBA;
   uint32          ErrCode;
   uint32          SuperBlkErrCode;
   uint64          FailedSuperBlk;
   rw_addr_position AddrPosition;
   uint16          PhysicalServoWedge;
   uint16          padding1[3];
   };

#define RW_FORMAT_LOG_DEALLOCATE_DEFECTIVE_BLOCK_EVENT_INFO_LEN 8

struct  rw_format_log_deallocate_defective_block_event_info
   {
   uint64          BlkAddr;
   };

#define RW_FORMAT_LOG_CERTIFY_TRACK_REWRITE_EVENT_INFO_LEN 32

struct  rw_format_log_certify_track_rewrite_event_info
   {
   uint64          RetryBlkAddr;
   uint64          WriteXfrLen;
   uint64          NextAccessedBlkAddr;
   uint32          ErrCode;
   uint8           Status;
   uint8           padding1[3];
   };

#define RW_FORMAT_LOG_CERTIFY_TRACK_REWRITE_COUNTER_UPDATE_EVENT_INFO_LEN 2

struct  rw_format_log_certify_track_rewrite_counter_update_event_info
   {
   uint16          Count;
   };

#define RW_FORMAT_LOG_DEALLOCATE_SERVO_FLAW_EVENT_INFO_LEN 80

struct  rw_format_log_deallocate_servo_flaw_event_info
   {
   uint64          FailedLBA;
   uint64          FailedPBA;
   rw_addr_position AddrPosition;
   uint16          PhysicalServoWedge;
   uint16          padding1[3];
   };

#define RW_FORMAT_LOG_EVENT_INFO_LEN 96

struct  rw_format_log_event_info
   {
   rw_format_log_format_media_zone_start_event_info FormatMediaZoneStart;
   uint32          padding1[16];
   rw_format_log_format_xfr_event_info FormatXfr;
   uint32          padding2[14];
   rw_format_log_unrecovered_error_event_info UnrecoveredError;
   rw_format_log_deallocate_defective_block_event_info DeallocateDefect;
   uint32          padding3[22];
   rw_format_log_certify_track_rewrite_event_info CertifyTrackRewrite;
   uint32          padding4[16];
   rw_format_log_certify_track_rewrite_counter_update_event_info CertifyTrackRewriteCounterUpdate;
   uint16          padding5[47];
   rw_format_log_deallocate_servo_flaw_event_info DeallocateServoFlaw;
   uint32          padding6[4];
   };

#define RW_TRACK_ATTRIBUTES_LEN 96

struct  rw_track_attributes
   {
   uint16          Partition;
   uint16          padding1[3];
   uint64          StartPBA;
   uint32          WedgeSizeInNRZSymbols[4];
   uint16          TrackDataSkew;
   uint16          padding2[3];
   zone_position   ZonePosition;
   uint16          NumPBAsOnTrack;
   uint16          padding3[3];
   };

#define DIAG_TRACK_INFO_LEN 168

struct  diag_track_info
   {
   uint8           PartitionId;
   uint8           SingleHeadZone;
   uint16          padding1;
   uint32          PhysicalCyl;
   uint32          LogicalCyl;
   uint32          NominalCyl;
   uint32          RadiusInMils; // This is really a 32 bit float value.
   uint8           LogicalHead;
   uint8           padding2[3];
   uint64          FirstUserLba;
   uint64          ValidLbas;
   uint64          FirstPba;
   uint64          ValidPbas;
   uint64          LogicalTrackNumber;
   uint16          WedgeSkew;
   uint16          SectorsPerFrame;
   uint16          WedgesPerFrame;
   uint16          WedgesPerTrack;
   rw_track_attributes TrackAttributes;
   };

#define RREV1_GET_TARGET_TRACK_INFO_DSB_LEN 176

struct  rrev1_get_target_track_info_dsb
   {
   dsb_header      Header;
   diag_track_info TrackInfo;
   };

#define RREV2_GET_TARGET_TRACK_INFO_SDBP_DSB_LEN 184

struct  rrev2_get_target_track_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_get_target_track_info_dsb Dsb;
   };

#define SET_CONTROLLER_TEST_PORT_DFB_LEN 8

struct  set_controller_test_port_dfb
   {
   dfb_header      Header;
   uint8           TestPort;
   uint8           TestPortValue;
   uint8           ModifyTestPort;
   uint8           padding1;
   };

#define SET_CONTROLLER_TEST_PORT_SDBP_DFB_LEN 16

struct  set_controller_test_port_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_controller_test_port_dfb Dfb;
   };

#define RW_MERGE_ALT_TO_SLIP_LIST_PAD_INFO_LEN 12

struct  rw_merge_alt_to_slip_list_pad_info
   {
   uint32          RadialPadSizeInTracks;
   uint32          CircumferentialPadSizeInWedgesSingle;
   uint32          CircumferentialPadSizeInWedgesMulti;
   };

#define GET_DOS_SCAN_UNIT_FROM_LBA_DSB_LEN 64

struct  get_dos_scan_unit_from_lba_dsb
   {
   dsb_header      Header;
   diag_dos_scan_unit_info ScanUnitInfo;
   };

#define GET_DOS_SCAN_UNIT_FROM_LBA_SDBP_DSB_LEN 72

struct  get_dos_scan_unit_from_lba_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_scan_unit_from_lba_dsb Dsb;
   };

#define MEASURE_OPTIMUM_SKEW_HEAD_SKEW_INFO_LEN 432320

struct  measure_optimum_skew_head_skew_info
   {
   uint8           MinDriveZone;
   uint8           MaxDriveZone;
   uint8           ZoneStepSize;
   uint8           MinDriveHead;
   uint8           MaxDriveHead;
   uint8           padding1;
   uint16          TestMaxTrys;
   uint16          MinTestHeadSkew;
   uint16          MaxTestHeadSkew;
   uint16          CylSkew;
   uint16          padding2;
   int32           HeadPairLoopMax;
   uint8           ZoneHdHeadSwitchFromHead[2][18][375];
   uint8           ZoneHdHeadSwitchToHead[2][18][375];
   uint32          ZoneHdHeadSwitchFromCyl[2][18][375];
   uint32          ZoneHdHeadSwitchToCyl[2][18][375];
   uint32          padding3;
   uint64          ZoneHdHeadSwitchFromLba[2][18][375];
   uint64          ZoneHdHeadSwitchToLba[2][18][375];
   uint16          ZoneHdHeadSkewTrialValueInServoBursts[2][18][375];
   uint32          ZoneHdAveHeadSkewWriteTimeInUSecs[2][18][375];
   uint8           ZoneHdBestHeadSkewWriteTimeFromHead[2][18];
   uint8           ZoneHdBestHeadSkewWriteTimeToHead[2][18];
   uint32          ZoneHdBestHeadSkewWriteTime[2][18];
   uint16          ZoneHdBestTrialHeadSkewValue[2][18];
   uint16          DriveBestHeadSkewPickInServoBursts;
   uint8           SeekFailure;
   uint8           WriteFailure;
   uint32          padding4;
   };

#define DIAG_ERROR_RECOVERY_PARMS_LEN 32

struct  diag_error_recovery_parms
   {
   uint8           Config;
   uint8           Mode;
   uint16          padding1[3];
   uint64          Options;
   uint32          ModeSelect;
   uint8           MaxReadRetryLevelAllowed;
   uint8           MaxWriteRetryLevelAllowed;
   uint16          SelectedRetryStep;
   uint8           Reserved;
   uint8           padding2;
   uint16          MaxReadRetryCount;
   uint16          MaxWriteRetryCount;
   uint16          padding3;
   };

#define GET_RW_ZONE_INFO_SDBP_DSB_LEN 820

struct  get_rw_zone_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_rw_zone_info_dsb Dsb;
   };

#define MODIFY_READ_CHANNEL_LOCK_DFB_LEN 6

struct  modify_read_channel_lock_dfb
   {
   dfb_header      Header;
   uint8           Operation;
   uint8           padding1;
   };

#define IDLE_TASK_CONTROL_DFB_LEN 8

struct  idle_task_control_dfb
   {
   dfb_header      Header;
   uint32          Action;
   };

#define SUPER_PARITY_RAM_DATA_LEN 4

struct  super_parity_ram_data
   {
   uint16          SuperParityRAMAddrOffset;
   uint16          ReadData;
   };

#define SMART_FRAME_DSB_LEN 36880

struct  smart_frame_dsb
   {
   dsb_header      Header;
   uint32          NumReturnedFactoryFrames;
   uint32          NumReturnedSavedSmartFrames;
   uint8           Data[36864];
   };

#define SMART_FRAME_SDBP_DSB_LEN 36888

struct  smart_frame_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   smart_frame_dsb Dsb;
   };

#define SET_POWER_MODE_DFB_LEN 6

struct  set_power_mode_dfb
   {
   dfb_header      Header;
   uint8           PowerMode;
   uint8           padding1;
   };

#define SET_POWER_MODE_SDBP_DFB_LEN 16

struct  set_power_mode_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_power_mode_dfb Dfb;
   uint16          padding1;
   };

#define GET_LOG_FILE_DFB_LEN 6

struct  get_log_file_dfb
   {
   dfb_header      Header;
   uint16          LogId;
   };

#define GET_LOG_FILE_SDBP_DFB_LEN 16

struct  get_log_file_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_log_file_dfb Dfb;
   uint16          padding1;
   };

#define GET_HARDWARE_JUMPER_SETTING_SDBP_DSB_LEN 24

struct  get_hardware_jumper_setting_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_hardware_jumper_setting_dsb Dsb;
   };

#define SAVE_ADAPTIVES_TO_FLASH_DFB_LEN 12

struct  save_adaptives_to_flash_dfb
   {
   dfb_header      Header;
   uint8           AdaptivesSelect;
   uint8           padding1[3];
   uint32          DebugFlashWriteEnable;
   };

#define SAVE_ADAPTIVES_TO_FLASH_SDBP_DFB_LEN 20

struct  save_adaptives_to_flash_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   save_adaptives_to_flash_dfb Dfb;
   };

#define INIT_LOG_FILE_DFB_LEN 6

struct  init_log_file_dfb
   {
   dfb_header      Header;
   uint16          LogId;
   };

#define SET_INTERFACE_CMD_ECHO_DFB_LEN 6

struct  set_interface_cmd_echo_dfb
   {
   dfb_header      Header;
   uint8           SetInterfaceCommandEchoOption;
   uint8           padding1;
   };

#define FAFH_AVG_MEASUREMENT_INFO_LEN 24

struct  fafh_avg_measurement_info
   {
   uint32          Count;
   uint32          Sum;
   uint32          Last;
   uint32          Minimum;
   uint32          Maximum;
   uint32          Average;
   };

#define FAFH_CLEARANCE_SETTLING_AVG_MEASUREMENT_TIMES_LEN 696

struct  fafh_clearance_settling_avg_measurement_times
   {
   fafh_avg_measurement_info ArMeasurementSequenceTimeInMsec;
   fafh_avg_measurement_info AtomicArMeasurementsPerSequence;
   fafh_avg_measurement_info AtomicArMeasurementTimeInMsec;
   fafh_avg_measurement_info StateMachineOverheadTimeInMsec;
   fafh_avg_measurement_info ClearanceAdjustmentTimeInMsec;
   fafh_avg_measurement_info AtomicArMeasurementsPerSequencePerDiameterAndHead[3][4];
   fafh_avg_measurement_info AtomicArMeasurementTimeInMsecPerDiameterAndHead[3][4];
   };

#define FAFH_STEADY_STATE_AVG_MEASUREMENT_TIMES_LEN 744

struct  fafh_steady_state_avg_measurement_times
   {
   fafh_avg_measurement_info ArMeasurementSequenceTimeInMsec;
   fafh_avg_measurement_info AtomicArMeasurementsPerSequence;
   fafh_avg_measurement_info AtomicArMeasurementTimeInMsec;
   fafh_avg_measurement_info ArMeasurementSequenceSuspendedCount;
   fafh_avg_measurement_info ArMeasurementSequenceSuspendedTimeInMsec;
   fafh_avg_measurement_info StateMachineOverheadTimeInMsec;
   fafh_avg_measurement_info ClearanceAdjustmentTimeInMsec;
   fafh_avg_measurement_info AtomicArMeasurementsPerSequencePerDiameterAndHead[3][4];
   fafh_avg_measurement_info AtomicArMeasurementTimeInMsecPerDiameterAndHead[3][4];
   };

#define AVG_FAFH_MEASUREMENT_TIMES_TEST_RESULTS_LEN 1444

struct  avg_fafh_measurement_times_test_results
   {
   fafh_clearance_settling_avg_measurement_times ClearanceSettling;
   fafh_steady_state_avg_measurement_times SteadyState;
   uint32          HeadMeasurementSequenceTimeScalingFactor; // This is really a 32 bit float value.
   };

#define RW_STATUS_INFO_LEN 48

struct  rw_status_info
   {
   uint32          RwErrorCode;
   uint8           SystemAreaAccess;
   uint8           padding1[3];
   uint64          TargetBlkAddr;
   uint64          StartBlkAddr;
   uint64          XfrLength;
   track_position  TrackPosition;
   uint32          ActuatorState;
   };

#define AVALANCHE_DETECTOR_MEASUREMENT_DATA_LEN 16

struct  avalanche_detector_measurement_data
   {
   uint32          Cylinder;
   uint32          Value;
   uint32          Average;
   uint32          Limit;
   };

#define MEASURE_OPTIMUM_SKEW_TEST_START_INFO_LEN 106

struct  measure_optimum_skew_test_start_info
   {
   uint8           ProductTypeString[64];
   uint8           ProductFamilyId;
   uint8           ProductFamilyMemberId;
   uint8           HdaSerialNumber[32];
   uint8           MaxZone;
   uint8           MaxHead;
   uint16          DefaultCylSkew;
   uint16          DefaultHeadSkew;
   uint16          DefaultMiniZoneSkew;
   };

#define SEEK_TO_TARGET_ADDR_DFB_LEN 10

struct  seek_to_target_addr_dfb
   {
   dfb_header      Header;
   uint8           SeekType;
   uint8           padding1;
   int16           TrackFollowOffset;
   uint8           OffsetIsInPercentOfDataTrack;
   uint8           EnableReloadChannelParameters;
   };

#define SERIAL_IDENTIFY_DSB_LEN 12

struct  serial_identify_dsb
   {
   dsb_header      Header;
   uint8           IdInformation;
   uint8           padding1[3];
   };

#define FIRMWARE_PACKAGE_INFO_LEN 340

struct  firmware_package_info
   {
   uint8           PackageVersionString[33];
   uint8           PartNumberString[33];
   uint8           GlobalIdString[33];
   uint8           LastModificationDateFieldString[33];
   uint8           LastModificationTimeFieldString[33];
   uint8           CfwComponentVersionString[33];
   uint8           SfwComponent1VersionString[33];
   uint8           SfwComponent2VersionString[33];
   uint8           SfwComponent3VersionString[33];
   uint8           SfwComponent4VersionString[33];
   uint16          padding1;
   uint32          PackageBlockPointNumber;
   uint8           PackageInfoTruncationOccurred;
   uint8           padding2[3];
   };

#define CONTROLLER_FIRMWARE_REV_INFO_LEN 224

struct  controller_firmware_rev_info
   {
   uint8           BuildDateString[32];
   uint8           BuildTimeString[32];
   uint8           BuildUserNameString[32];
   uint8           ProductTypeString[32];
   uint8           ChangeListNumberString[32];
   uint8           RevString[32];
   uint8           CustomerReleaseString[32];
   };

#define RAP_CONTENTS_REV_LEN 4

struct  rap_contents_rev
   {
   uint8           Vbar[4];
   uint16          NonVbar;
   uint16          padding1;
   };

#define RAP_REV_INFO_LEN 8

struct  rap_rev_info
   {
   uint8           VbarSupport;
   uint8           FwImplementationKey;
   uint16          FormatRevision;
   rap_contents_rev ContentsRevision;
   };

#define GET_FIRMWARE_REV_DSB_LEN 584

struct  get_firmware_rev_dsb
   {
   dsb_header      Header;
   firmware_package_info FirmwarePackageInfo;
   controller_firmware_rev_info ControllerFirmwareRevInfo;
   uint16          ServoFirmwareRev;
   rap_rev_info    RapRevInfo;
   uint16          padding1;
   };

#define RREV1_GET_FIRMWARE_REV_SDBP_DSB_LEN 592

struct  rrev1_get_firmware_rev_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_firmware_rev_dsb Dsb;
   };

#define GET_DOS_VERSION_DSB_LEN 12

struct  get_dos_version_dsb
   {
   dsb_header      Header;
   uint16          MajorVersion;
   uint16          MinorVersion;
   };

#define RD_POWER_ASIC_REG_INFO_LEN 6

struct  rd_power_asic_reg_info
   {
   uint8           RegAddr;
   uint8           padding1;
   uint16          RegData;
   uint8           RegSize;
   uint8           padding2;
   };

#define POWER_ASIC_INFO_LEN 34

struct  power_asic_info
   {
   uint8           TypeString[32];
   uint16          Revision;
   };

#define GET_BASIC_DRIVE_INFO_DSB_LEN 896

struct  get_basic_drive_info_dsb
   {
   dsb_header      Header;
   firmware_package_info FirmwarePackageInfo;
   uint8           ProductDescriptionString[64];
   uint8           ProductFamilyId;
   uint8           ProductFamilyMemberId;
   uint8           HdaSerialNumber[32];
   uint16          PreampType[2];
   uint16          SpinSpeedInRpm;
   uint16          ServoWedgesPerTrack;
   uint8           NumberOfHeads;
   uint8           OriginalNumberOfHeads;
   uint64          UserLbas;
   uint8           PcbaSerialNumber[32];
   uint8           ControllerTypeString[32];
   uint32          ControllerChipRevision;
   uint8           RdChannelTypeString[32];
   power_asic_info PowerAsicInfo;
   uint16          padding1;
   uint32          BufferSizeInBytes;
   controller_firmware_rev_info ControllerFirmwareRevInfo;
   uint16          ServoFirmwareRev;
   rap_rev_info    RapRevInfo;
   uint8           AfhEnabled;
   uint8           QuadradicEquationAfhEnabled;
   uint8           VbarEnabled;
   uint8           VbarAdjustableZoneBoundariesEnabled;
   uint8           VolumeBasedSparingEnabled;
   uint8           IoedcEnabled;
   uint8           IoeccEnabled;
   uint8           DerpReadRetriesEnabled;
   uint8           Udr2Info;
   uint8           SuperParityEnabled;
   uint8           HumiditySensorEnabled;
   uint8           MediaCachePartitionEnabled;
   uint8           MediaCacheEnabled;
   uint8           BgReliActCriticalEventLoggingEnabled;
   uint16          NumBitsPerSymbol;
   uint16          NumSymbolsPerUserSector;
   uint16          NumSymbolsPerSysSector;
   uint8           IVInfo[8];
   uint8           TornWriteProtectionEnabled;
   uint8           ZoneRemapEnabled;
   uint8           MileStoneSubRelease;
   uint8           CriticalEventLogRevision;
   uint16          padding2;
   uint32          SerialFlashManufacturerID;
   uint32          SerialFlashDeviceID;
   uint16          SerialFlashPartSizeInKB;
   uint16          SerialFlashUsedSizeInKB;
   uint8           FourKSysArea;
   uint8           DRAMMirrorFeature;
   uint8           ActiveBFWContainer;
   uint8           EWPEnabled;
   uint8           DRAMMirrorEnabled;
   uint8           padding3[7];
   };

#define GET_MODIFY_ISP_CONTROL_WORD_DFB_LEN 6

struct  get_modify_isp_control_word_dfb
   {
   dfb_header      Header;
   uint16          Bitfield1  ;
   };

#define get_modify_isp_control_word_dfb_EnableParityErrorRecovery_OFFSET                                     0x0000
#define get_modify_isp_control_word_dfb_EnableParityErrorRecovery_MASK                                       0x0001

#define get_modify_isp_control_word_dfb_DisableParityErrorRecovery_OFFSET                                    0x0001
#define get_modify_isp_control_word_dfb_DisableParityErrorRecovery_MASK                                      0x0002

#define get_modify_isp_control_word_dfb_EnableParityTestMode_OFFSET                                          0x0002
#define get_modify_isp_control_word_dfb_EnableParityTestMode_MASK                                            0x0004

#define get_modify_isp_control_word_dfb_DisableParityTestMode_OFFSET                                         0x0003
#define get_modify_isp_control_word_dfb_DisableParityTestMode_MASK                                           0x0008

#define get_modify_isp_control_word_dfb_EnableParityValidityScan_OFFSET                                      0x0004
#define get_modify_isp_control_word_dfb_EnableParityValidityScan_MASK                                        0x0010

#define get_modify_isp_control_word_dfb_DisableParityValidityScan_OFFSET                                     0x0005
#define get_modify_isp_control_word_dfb_DisableParityValidityScan_MASK                                       0x0020

#define get_modify_isp_control_word_dfb_EnableRWLongParitySectorAccess_OFFSET                                0x0006
#define get_modify_isp_control_word_dfb_EnableRWLongParitySectorAccess_MASK                                  0x0040

#define get_modify_isp_control_word_dfb_DisableRWLongParitySectorAccess_OFFSET                               0x0007
#define get_modify_isp_control_word_dfb_DisableRWLongParitySectorAccess_MASK                                 0x0080

#define get_modify_isp_control_word_dfb_EnableIPTScan_OFFSET                                                 0x0008
#define get_modify_isp_control_word_dfb_EnableIPTScan_MASK                                                   0x0100

#define get_modify_isp_control_word_dfb_DisableIPTScan_OFFSET                                                0x0009
#define get_modify_isp_control_word_dfb_DisableIPTScan_MASK                                                  0xFE00


#define LOG_HEADER_LEN 8

struct  log_header
   {
   uint16          LogId;
   uint8           LogType;
   uint8           padding1;
   uint16          MaxEntries;
   uint16          ValidEntries;
   };

#define SYMBOL_ERROR_MAP_LOG_ENTRY_LEN 8

struct  symbol_error_map_log_entry
   {
   uint16          Sector;
   uint16          StartSymbol;
   uint16          SymbolCount;
   uint16          HitCount;
   };

#define SYMBOL_ERROR_MAP_LOG_LEN 6420

struct  symbol_error_map_log
   {
   log_header      Header;
   uint32          OverflowCount;
   uint32          Cylinder;
   uint8           Head;
   uint8           MergeAllowed;
   symbol_error_map_log_entry Entry[800];
   uint16          padding1;
   };

#define DEPENDENT_SYSTEM_ZONE_GROUP_INFO_LEN 24

struct  dependent_system_zone_group_info
   {
   uint64          StartLba;
   uint32          StartCylinder;
   uint32          CumSlip;
   uint32          NumSpareSecs;
   uint16          NumCylinders;
   uint16          padding1;
   };

#define RREV1_CONVERT_SERVO_PHYSICAL_TO_LOGICAL_DFB_LEN 16

struct  rrev1_convert_servo_physical_to_logical_dfb
   {
   dfb_header      Header;
   uint32          ServoPhysicalCyl;
   int32           TotalOffset;
   uint16          Head;
   uint16          padding1;
   };

#define RREV1_CONVERT_SERVO_PHYSICAL_TO_LOGICAL_SDBP_DFB_LEN 24

struct  rrev1_convert_servo_physical_to_logical_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_convert_servo_physical_to_logical_dfb Dfb;
   };

#define SEQ_THROUGHPUT_BY_LBA_DFB_LEN 32

struct  seq_throughput_by_lba_dfb
   {
   dfb_header      Header;
   uint8           Operation;
   uint8           Options;
   uint16          SampleCount;
   uint64          StartHostLba;
   uint64          EndHostLba;
   uint32          XferLenInHostBlks;
   uint32          padding1;
   };

#define SEQ_THROUGHPUT_BY_LBA_SDBP_DFB_LEN 40

struct  seq_throughput_by_lba_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   seq_throughput_by_lba_dfb Dfb;
   };

#define SEARCH_AND_READ_FILE_OUTPUT_LEN 12

struct  search_and_read_file_output
   {
   uint32          FileDescriptor;
   uint32          FileLengthInBytes;
   uint32          BytesRead;
   };

#define READ_FILE_DSB_LEN 32792

struct  read_file_dsb
   {
   dsb_header      Header;
   uint32          Reserved;
   search_and_read_file_output Output;
   uint8           FileData[32768];
   };

#define READ_FILE_SDBP_DSB_LEN 32800

struct  read_file_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_file_dsb   Dsb;
   };

#define SECTOR_EXTENT_TYPE_LEN 12

struct  sector_extent_type
   {
   chs_type        ChsAddr;
   uint32          NumberOfSectors;
   };

#define RW_SUPER_PARITY_RAM_DFB_LEN 10

struct  rw_super_parity_ram_dfb
   {
   dfb_header      Header;
   uint16          StartAddrOffset;
   uint16          EndAddrOffset;
   uint16          Pattern;
   };

#define GET_MODIFY_ISP_CONTROL_WORD_SDBP_DFB_LEN 16

struct  get_modify_isp_control_word_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_modify_isp_control_word_dfb Dfb;
   uint16          padding1;
   };

#define SET_DIAG_IDLE_MODE_DFB_LEN 16

struct  set_diag_idle_mode_dfb
   {
   dfb_header      Header;
   uint32          IdleMode;
   uint32          IdleModeMask;
   uint8           Toggle;
   uint8           ResetToPowerOnState;
   uint16          padding1;
   };

#define ENABLE_PARITY_SECTOR_RWLONG_DFB_LEN 6

struct  enable_parity_sector_rwlong_dfb
   {
   dfb_header      Header;
   uint8           EnableParitySectorRWLong;
   uint8           padding1;
   };

#define ENABLE_PARITY_SECTOR_RWLONG_SDBP_DFB_LEN 16

struct  enable_parity_sector_rwlong_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   enable_parity_sector_rwlong_dfb Dfb;
   uint16          padding1;
   };

#define NRZ_SYMBOLS_FROM_INDEX_POSITION_LEN 16

struct  nrz_symbols_from_index_position
   {
   track_position  TrackPosition;
   uint32          SymbolsFromIndex;
   };

#define RW_NRZ_SYMBOLS_FROM_INDEX_EXTENT_LEN 20

struct  rw_nrz_symbols_from_index_extent
   {
   nrz_symbols_from_index_position SymbolsFromIndexPosition;
   uint32          LengthInSymbols;
   };

#define GET_MEMORY_BLOCKS_DFB_LEN 12

struct  get_memory_blocks_dfb
   {
   dfb_header      Header;
   uint32          MemoryByteOffset;
   uint16          MemoryBytes;
   uint8           reserved;
   uint8           NumberOfBytes;
   };

#define GET_MEMORY_BLOCK_DATA_LEN 512

struct  get_memory_block_data
   {
   uint8           Bytes1[512];
   uint16          Bytes2[256];
   uint32          Bytes4[128];
   uint64          Bytes8[64];
   };

#define GET_MEMORY_BLOCKS_DSB_LEN 528

struct  get_memory_blocks_dsb
   {
   dsb_header      Header;
   uint32          MemoryAddr;
   uint16          MemoryBytes;
   uint8           NumberOfBytes;
   uint8           padding1;
   get_memory_block_data MemoryData;
   };

#define GET_MEMORY_BLOCKS_SDBP_DSB_LEN 536

struct  get_memory_blocks_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_memory_blocks_dsb Dsb;
   };

#define DIAG_ERROR_RECOVERY_PARM_VALID_FLAGS_LEN 8

struct  diag_error_recovery_parm_valid_flags
   {
   uint8           Mode;
   uint8           Options;
   uint8           MaxReadRetryLevelAllowed;
   uint8           MaxWriteRetryLevelAllowed;
   uint8           SelectedRetryStep;
   uint8           Reserved;
   uint8           MaxReadRetryCount;
   uint8           MaxWriteRetryCount;
   };

#define SET_RETRIES_DFB_LEN 48

struct  set_retries_dfb
   {
   dfb_header      Header;
   diag_error_recovery_parm_valid_flags ErrorRecoveryParmValidFlags;
   uint32          padding1;
   diag_error_recovery_parms ErrorRecoveryParms;
   };

#define CLEAR_DOS_LOG_PAGE_COUNTERS_SDBP_DFB_LEN 12

struct  clear_dos_log_page_counters_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   clear_dos_log_page_counters_dfb Dfb;
   };

#define GET_DEFT_STEP_EXECUTION_TIMES_DFB_LEN 4

struct  get_deft_step_execution_times_dfb
   {
   dfb_header      Header;
   };

#define RW_CORRECTION_BUFFER_DFB_LEN 12

struct  rw_correction_buffer_dfb
   {
   dfb_header      Header;
   uint16          StartAddrOffset;
   uint16          EndAddrOffset;
   uint16          Pattern;
   uint16          CorrectionBufferReadBackOption;
   };

#define REV_GET_MODIFY_CONGEN_SDBP_DFB_LEN 528

struct  rev_get_modify_congen_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rev_get_modify_congen_dfb Dfb;
   uint16          padding1;
   };

#define TOGGLE_EDAC_ENABLE_DFB_LEN 12

struct  toggle_edac_enable_dfb
   {
   dfb_header      Header;
   uint32          ToggleEdacEnable;
   uint32          EdacEnable;
   };

#define TOGGLE_EDAC_ENABLE_SDBP_DFB_LEN 20

struct  toggle_edac_enable_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   toggle_edac_enable_dfb Dfb;
   };

#define TOGGLE_EDAC_ENABLE_DSB_LEN 12

struct  toggle_edac_enable_dsb
   {
   dsb_header      Header;
   uint32          EdacEnabled;
   };

#define RW_MEMORY_DATA_LEN 8

struct  rw_memory_data
   {
   uint64          Bytes8;
   uint32          Bytes4;
   uint32          padding1;
   uint16          Bytes2;
   uint16          padding2[3];
   uint8           Bytes1;
   uint8           padding3[7];
   };

#define RW_MEMORY_DFB_LEN 32

struct  rw_memory_dfb
   {
   dfb_header      Header;
   uint32          reserved;
   uint32          WriteMemory;
   uint8           MemoryType;
   uint8           padding1[3];
   uint32          NumberOfBytes;
   uint32          ByteOffset;
   rw_memory_data  MemoryData;
   };

#define RW_MEMORY_SDBP_DFB_LEN 40

struct  rw_memory_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rw_memory_dfb   Dfb;
   };

#define FINE_RW_OFFSET_DFB_LEN 10

struct  fine_rw_offset_dfb
   {
   dfb_header      Header;
   uint16          TracksToAverage;
   uint16          TrkStepSize;
   uint16          NumberOfGuardTrks;
   };

#define LOG_SENSE_PARAMETERS_LEN 24

struct  log_sense_parameters
   {
   uint8           Bitfield1  ;
   uint8           SubPageCode;
   uint8           Reserved1;
   uint8           padding1;
   uint16          ParameterPointer;
   uint16          AllocationLength;
   uint8           Control;
   uint8           ParamLogCheck;
   uint16          ParamCode;
   uint16          padding2;
   uint32          ParamCodeSpec;
   uint16          BgmsLimit;
   uint16          padding3;
   };

#define log_sense_parameters_SP_OFFSET                                                                       0x0000
#define log_sense_parameters_SP_MASK                                                                         0x0001

#define log_sense_parameters_Obsolete_OFFSET                                                                 0x0001
#define log_sense_parameters_Obsolete_MASK                                                                   0x0000

#define log_sense_parameters_Reserved_OFFSET                                                                 0x0000
#define log_sense_parameters_Reserved_MASK                                                                   0x0000

#define log_sense_parameters_PageCode_OFFSET                                                                 0x0000
#define log_sense_parameters_PageCode_MASK                                                                   0x0001

#define log_sense_parameters_PC_OFFSET                                                                       0x0001
#define log_sense_parameters_PC_MASK                                                                         0x00FE


#define LOG_SENSE_DFB_LEN 28

struct  log_sense_dfb
   {
   dfb_header      Header;
   log_sense_parameters Parameters;
   };

#define LOG_SENSE_SDBP_DFB_LEN 36

struct  log_sense_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   log_sense_dfb   Dfb;
   };

#define RW_MEMORY_DSB_LEN 40

struct  rw_memory_dsb
   {
   dsb_header      Header;
   uint32          MemoryWritten;
   uint8           MemoryType;
   uint8           padding1[3];
   uint32          NumberOfBytes;
   uint32          ByteOffset;
   uint32          ProcessorAddr;
   uint32          padding2;
   rw_memory_data  MemoryData;
   };

#define SET_EIB_TRACING_STATE_DSB_LEN 12

struct  set_eib_tracing_state_dsb
   {
   dsb_header      Header;
   uint32          EibTracingState;
   };

#define SEARCH_AND_WRITE_FILE_INPUT_LEN 16

struct  search_and_write_file_input
   {
   uint16          FileVolume;
   uint16          FileId;
   uint16          FileSelectCopy;
   uint16          padding1;
   uint32          ByteOffset;
   uint32          BytesToWrite;
   };

#define GET_PVT_DFB_LEN 8

struct  get_pvt_dfb
   {
   dfb_header      Header;
   uint32          Options;
   };

#define FAFH_HISTORY_LOG_FRAME_TRIGGER_INFO_LEN 32

struct  fafh_history_log_frame_trigger_info
   {
   uint32          TriggerCount;
   univ_timestamp  TriggerStartingTimestampInUsec;
   uint32          TriggerStartTimeInMilliSecs;
   uint32          LastSensorStartTimeInMilliSecs;
   uint32          AdjustmentStartTimeInMilliSecs;
   uint32          TriggerEndTimeInMilliSecs;
   uint8           Trigger;
   uint8           Reserved[3];
   };

#define RESISTANCE_TEST_RESULTS_LEN 24

struct  resistance_test_results
   {
   uint32          PercentChangeInResistance[4]; // This is really a 32 bit float value.
   uint16          LastMeasuredHeadResistance[4];
   };

#define AR_CONVERGENCE_RATE_TEST_RESULTS_LEN 20

struct  ar_convergence_rate_test_results
   {
   uint32          TriggerCount;
   uint32          MeasurementConvergenceRate[4]; // This is really a 32 bit float value.
   };

#define FAFH_HEAD_TEST_RESULTS_LEN 1588

struct  fafh_head_test_results
   {
   uint32          TriggerCountOfLastRun[16];
   uint16          TestPassedHeadMask[16];
   uint16          CumTestsPassedHeadMask;
   uint16          padding1;
   resistance_test_results Resistance;
   ar_convergence_rate_test_results ArConvergenceRate;
   avg_fafh_measurement_times_test_results AvgMeasurementTime;
   };

#define ENVIRONMENTAL_CONDITIONS_LEN 16

struct  environmental_conditions
   {
   int16           TemperatureInCelsius;
   uint16          padding1;
   uint32          HumidityMixingRatioInGramsPerKg; // This is really a 32 bit float value.
   int32           AltitudeInFeet;
   int16           ChannelTemperatureInCelsius;
   uint16          padding2;
   };

#define ENVIRONMENTAL_CLEARANCE_INFO_LEN 68

struct  environmental_clearance_info
   {
   environmental_conditions CurrentConditions;
   environmental_conditions ChangeInConditions;
   uint32          RdTemperaturePassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          WrTemperaturePassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          ByZoneTcsAdderToTempPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          RdThreeSlopeTcsAdderToTempPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          WrThreeSlopeTcsAdderToTempPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          HumidityPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          PressurePassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          RdTotalPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   uint32          WrTotalPassiveClrDeltaInAngstroms; // This is really a 32 bit float value.
   };

#define FAFH_HISTORY_LOG_FRAME_SENSOR_HEADER_LEN 1092

struct  fafh_history_log_frame_sensor_header
   {
   uint8           ParamSensorType;
   uint8           CommandStep;
   uint8           QuickCheckFlags;
   uint8           padding1;
   uint32          MeasurementStartTimeInMilliSecs[3][4];
   int16           ClearanceUpdateTemperatureInCelsius[3][4];
   uint32          FafhClearanceDeltaInAngstroms[3][4]; // This is really a 32 bit float value.
   uint32          FilteredFafhClearanceDeltaInAngstroms[3][4]; // This is really a 32 bit float value.
   uint16          MeasurementStatusFlags[3][4];
   uint16          AdjustmentStatusFlags[4];
   uint16          ExtendedStatusFlags[3][4];
   environmental_clearance_info EnvironmentalClearanceInfo[3][4];
   uint32          AppliedFafhPassiveClrDeltaInAngstroms[3][4]; // This is really a 32 bit float value.
   };

#define FAFH_HISTORY_LOG_FRAME_SENSOR_INFO_LEN 5412

struct  fafh_history_log_frame_sensor_info
   {
   fafh_history_log_frame_sensor_header Header;
   fafh_history_log_frame_sensor_data Data[3][4];
   };

#define FAFH_HISTORY_LOG_FRAME_LEN 16384

struct  fafh_history_log_frame
   {
   fafh_history_log_frame_trigger_info TriggerInfo;
   fafh_head_test_results HeadTestResults;
   fafh_history_log_frame_sensor_info SensorInfo[2];
   uint8           Reserved[3940];
   };

#define DIAG_DISC_FILE_INFO_LEN 72

struct  diag_disc_file_info
   {
   uint8           Reserved;
   uint8           padding1[3];
   uint32          SimFilePtr;
   uint64          StartingLba;
   chs_type        StartingPlpChs;
   uint32          LengthInBytes;
   uint8           Name[40];
   uint32          padding2;
   };

#define DIAG_DOS_HEAD_SCAN_UNIT_INFO_LEN 16

struct  diag_dos_head_scan_unit_info
   {
   uint16          OughtToScanTreshInWrts;
   uint16          NeedToScanTreshInWrts;
   uint32          StartingScanUnit;
   uint32          EndingScanUnit;
   uint16          ShingledAreaOughtToScanTreshInWrts;
   uint16          ShingledAreaNeedToScanTreshInWrts;
   };

#define SET_RW_TRACING_STATE_DSB_LEN 12

struct  set_rw_tracing_state_dsb
   {
   dsb_header      Header;
   uint32          RwTracingState;
   };

#define SET_RW_TRACING_STATE_SDBP_DSB_LEN 20

struct  set_rw_tracing_state_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_rw_tracing_state_dsb Dsb;
   };

#define DIAG_FORMAT_RETRY_CONFIG_LEN 6

struct  diag_format_retry_config
   {
   uint16          MaxWriteRetryCount;
   uint16          MaxReadRetryCount;
   uint16          MaxIterations;
   };

#define MAX_HEAD_SAP_DATA_LEN 2

struct  max_head_sap_data
   {
   uint8           SapOperation;
   uint8           MaxHead;
   };

#define BIAS_TABLE_SAP_DATA_LEN 2068

struct  bias_table_sap_data
   {
   uint8           SapOperation;
   uint8           padding1;
   uint16          NumberOfValues;
   uint32          Offset;
   uint16          Data[1030];
   };

#define BIAS_HYSTERESIS_TABLE_SAP_DATA_LEN 104

struct  bias_hysteresis_table_sap_data
   {
   uint8           SapOperation;
   uint8           padding1;
   uint16          NumberOfValues;
   uint32          Offset;
   uint16          Data[48];
   };

#define RREV2_READ_MODIFY_SAP_DSB_LEN 2240

struct  rrev2_read_modify_sap_dsb
   {
   dsb_header      Header;
   max_head_sap_data MaxHeadData;
   mr_bias_sap_data MrBiasData;
   mr_bias_sap_data MaxMrBiasData;
   uint16          padding1;
   bias_table_sap_data BiasTableSapData;
   bias_hysteresis_table_sap_data BiasHysteresisTableSapData;
   };

#define LOG_ADDR_LEN 8

struct  log_addr
   {
   uint32          StartingBufferAddr;
   uint32          padding1;
   uint64          StartingDiscLba;
   };

#define GET_LOG_FILE_INFO_DSB_LEN 80

struct  get_log_file_info_dsb
   {
   dsb_header      Header;
   uint8           LogName[40];
   uint16          LogId;
   uint8           LogType;
   uint8           LogLocation;
   uint32          padding1;
   log_addr        LogAddr;
   uint32          LogSizeInBytes;
   uint32          LogEntrySizeInBytes;
   uint16          MaxLogEntries;
   uint16          ValidLogEntries;
   uint32          padding2;
   };

#define GET_LOG_FILE_INFO_SDBP_DSB_LEN 88

struct  get_log_file_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_log_file_info_dsb Dsb;
   };

#define DFT_RESULTS_LEN 12288

struct  dft_results
   {
   uint32          DftFreq[1024]; // This is really a 32 bit float value.
   uint32          DftRe[1024]; // This is really a 32 bit float value.
   uint32          DftIm[1024]; // This is really a 32 bit float value.
   };

#define CONTACT_DETECT_ELEMENT_LEN 2

struct  contact_detect_element
   {
   uint8           CDThreshold;
   uint8           CDBias;
   };

#define RW_PROCESS_GROWTH_DEFECT_LIST_REQUEST_LEN 16

struct  rw_process_growth_defect_list_request
   {
   uint32          RequestOptions;
   rw_merge_alt_to_slip_list_pad_info Pad;
   };

#define REV_MERGE_ALT_TO_SLIP_LIST_DFB_LEN 20

struct  rev_merge_alt_to_slip_list_dfb
   {
   dfb_header      Header;
   rw_process_growth_defect_list_request Request;
   };

#define RW_SELECTED_RETRY_STATE_LEN 12

struct  rw_selected_retry_state
   {
   uint8           Type;
   uint8           PathState;
   uint8           TweakLevel;
   uint8           StateIndex1;
   uint8           Pass;
   uint8           StateIndex2;
   uint8           LoopCntr1;
   uint8           LoopCntr2;
   uint8           SelectedMaxRetryCnt;
   uint8           padding1;
   uint16          BERPIterationsWorked;
   };

#define SET_DERP_RETRY_STATE_DSB_LEN 24

struct  set_derp_retry_state_dsb
   {
   dsb_header      Header;
   uint8           EnableDerpRetryState;
   uint8           padding1;
   rw_selected_retry_state DerpRetryState;
   uint16          padding2;
   };

#define READ_NON_VOLATILE_ADAPTIVE_PARMS_DFB_LEN 8

struct  read_non_volatile_adaptive_parms_dfb
   {
   dfb_header      Header;
   uint8           ReadIap;
   uint8           ReadSap;
   uint8           ReadRap;
   uint8           ReadCap;
   };

#define BUFFER_COPY_DFB_LEN 28

struct  buffer_copy_dfb
   {
   dfb_header      Header;
   uint8           SourceBufferBlockValid;
   uint8           padding1[3];
   int32           SourceBufferBlock;
   uint8           DestinationBufferBlockValid;
   uint8           padding2[3];
   int32           DestinationBufferBlock;
   uint8           BlocksToCopyValid;
   uint8           padding3[3];
   int32           BlocksToCopy;
   };

#define GET_BUFFER_BLOCKS_DSB_LEN 16424

struct  get_buffer_blocks_dsb
   {
   dsb_header      Header;
   uint32          TotalBytesPerBlock;
   uint32          ValidBufferBlockBytes;
   uint32          BufferBlockByteOffset;
   int32           SourceBufferBlock;
   uint32          SourceBufferAddr;
   uint8           SourceBufferBlockData[8192];
   uint8           ReferenceBufferValid;
   uint8           padding1[3];
   int32           ReferenceBufferBlock;
   uint32          ReferenceBufferAddr;
   uint8           ReferenceBufferBlockData[8192];
   };

#define TWEAK_FLY_HEIGHT_VALUES_DFB_LEN 24

struct  tweak_fly_height_values_dfb
   {
   dfb_header      Header;
   uint8           EnableHeatValuesTweak;
   uint8           UseCurrentThermistorTemperature;
   uint8           UseCurrentHumidity;
   uint8           TweakFlyHeightOnCurrentHead;
   uint8           TweakFlyHeightOnCurrentZone;
   uint8           padding1;
   int16           TweakTemperatureInDegreesCelsius;
   uint16          TweakHumidityInTenthsOfPercent;
   uint8           TweakPartitionId;
   uint8           TweakHead;
   uint8           TweakZone;
   heater_element  Writer;
   heater_element  Reader;
   uint8           padding2;
   };

#define RREV1_SET_TRACK_FORMAT_PARMS_DFB_LEN 8

struct  rrev1_set_track_format_parms_dfb
   {
   dfb_header      Header;
   uint8           UserPartitionTrackFormatType;
   uint8           SysPartitionTrackFormatType;
   uint8           TrackFormatUpdateOption;
   uint8           padding1;
   };

#define MODIFY_DEFECT_ADDRESS_ELEMENT_LEN 8

struct  modify_defect_address_element
   {
   uint16          PhysicalSector;
   uint16          padding1[3];
   uint64          Lba;
   };

#define SELECT_WRITE_BUFFER_DFB_LEN 12

struct  select_write_buffer_dfb
   {
   dfb_header      Header;
   int32           StartingBufferBlockNumber;
   int32           BufferBlocks;
   };

#define GET_MODIFY_ISP_CONTROL_WORD_DSB_LEN 12

struct  get_modify_isp_control_word_dsb
   {
   dsb_header      Header;
   uint8           Bitfield1  ;
   uint8           padding1[3];
   };

#define get_modify_isp_control_word_dsb_ParityRecoveryEnable_OFFSET                                          0x0000
#define get_modify_isp_control_word_dsb_ParityRecoveryEnable_MASK                                            0x0001

#define get_modify_isp_control_word_dsb_ParityTestModeEnable_OFFSET                                          0x0001
#define get_modify_isp_control_word_dsb_ParityTestModeEnable_MASK                                            0x0002

#define get_modify_isp_control_word_dsb_ParityValidityScanEnable_OFFSET                                      0x0002
#define get_modify_isp_control_word_dsb_ParityValidityScanEnable_MASK                                        0x0004

#define get_modify_isp_control_word_dsb_RWLongParitySectorAccessEnable_OFFSET                                0x0003
#define get_modify_isp_control_word_dsb_RWLongParitySectorAccessEnable_MASK                                  0x0008

#define get_modify_isp_control_word_dsb_IPTScanEnable_OFFSET                                                 0x0004
#define get_modify_isp_control_word_dsb_IPTScanEnable_MASK                                                   0x00F0


#define GET_MODIFY_ISP_CONTROL_WORD_SDBP_DSB_LEN 20

struct  get_modify_isp_control_word_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_modify_isp_control_word_dsb Dsb;
   };

#define DIAG_GET_TA_LIST_OUTPUTS_LEN 12

struct  diag_get_ta_list_outputs
   {
   uint32          RwError;
   uint32          TotalEntryCount;
   uint32          NumEntriesRetrieved;
   };

#define REV_MERGE_ALT_TO_SLIP_LIST_SDBP_DFB_LEN 28

struct  rev_merge_alt_to_slip_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rev_merge_alt_to_slip_list_dfb Dfb;
   };

#define DIAG_GET_REASSIGNED_SECTORS_LIST_OUTPUTS_LEN 14

struct  diag_get_reassigned_sectors_list_outputs
   {
   uint16          TotalEntryCount;
   uint16          NumEntriesRetrieved;
   uint16          ReassignOpCount;
   uint16          PendReassignCount;
   uint16          RemovedReassignEntryCount;
   uint16          HostPendReassignCount;
   uint16          IsRListEnabled;
   };

#define DIAG_GET_REASSIGNED_SECTORS_LIST_ENTRY_LEN 24

struct  diag_get_reassigned_sectors_list_entry
   {
   uint32          LbaCyl;
   uint32          PbaCyl;
   uint32          PbaSfi;
   uint16          EntryIndex;
   uint16          LbaSector;
   uint16          PbaSector;
   uint8           LbaHead;
   uint8           PbaHead;
   uint16          OriginalWedge;
   uint16          padding1;
   };

#define RW_RETRIEVE_ALT_LIST_ENTRY_LEN 32

struct  rw_retrieve_alt_list_entry
   {
   uint64          ReassignedLBA;
   uint64          AlternatePBA;
   smart_power_on_time_stamp TimeStampInfo;
   uint32          Status;
   uint8           AltBBMMask;
   uint8           padding1[3];
   };

#define GET_REASSIGNED_SECTORS_LIST_DSB_LEN 458784

struct  get_reassigned_sectors_list_dsb
   {
   dsb_header      Header;
   uint32          PassThrough;
   diag_get_reassigned_sectors_list_inputs InputInfo;
   diag_get_reassigned_sectors_list_outputs OutputInfo;
   uint16          padding1;
   diag_get_reassigned_sectors_list_entry DiagAltList[8192];
   rw_retrieve_alt_list_entry RwAltList[8192];
   };

#define GET_REASSIGNED_SECTORS_LIST_SDBP_DSB_LEN 458792

struct  get_reassigned_sectors_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_reassigned_sectors_list_dsb Dsb;
   };

#define SIM_FILES_INFO_DFB_LEN 16

struct  sim_files_info_dfb
   {
   dfb_header      Header;
   uint32          Volume;
   uint32          FileDesc;
   uint32          Options;
   };

#define FAFH_CONFIG_INFO_LEN 64

struct  fafh_config_info
   {
   uint16          FafhBlockReleaseMajor;
   uint16          FafhBlockReleaseMinor;
   uint8           AmplitudeRatioSensorSupported;
   uint8           padding1;
   uint16          FafhParamFileMajorRevision;
   uint16          FafhParamFileMinorRevision;
   uint16          FafhParamFileMaxDiametersSupported;
   uint16          FafhParamFileMaxHeadsSupported;
   uint16          FafhParamFileMaxSensorsSupported;
   uint16          FafhParamFileMaxCommandStepsSupported;
   uint16          FafhParamFileSystemSectors;
   uint32          FafhParamFileAllocatedBytes;
   uint32          FafhParamFileUsedBytes;
   uint32          FafhParamDiskFileOffset;
   uint16          FafhHistoryLogRevisionMajor;
   uint16          FafhHistoryLogRevisionMinor;
   uint16          FafhHistoryLogFileMaxDiametersSupported;
   uint16          FafhHistoryLogFileMaxHeadsSupported;
   uint16          FafhHistoryLogFileMaxSensorConfigsSupported;
   uint16          FafhHistoryLogHeaderSystemSectors;
   uint16          FafhHistoryLogHeaderAllocatedBytes;
   uint16          FafhHistoryLogHeaderUsedBytes;
   uint16          FafhHistoryLogIntervals;
   uint16          FafhHistoryLogFramesPerInterval;
   uint16          FafhHistoryLogSystemSectorsPerFrame;
   uint16          FafhHistoryLogFrameAllocatedBytes;
   uint16          FafhHistoryLogFrameUsedBytes;
   uint16          padding2;
   uint32          FafhHistoryLogBufferFileAllocatedBytes;
   };

#define GET_FAFH_CONFIG_DSB_LEN 72

struct  get_fafh_config_dsb
   {
   dsb_header      Header;
   fafh_config_info FafhConfig;
   };

#define GET_FAFH_CONFIG_SDBP_DSB_LEN 80

struct  get_fafh_config_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_fafh_config_dsb Dsb;
   };

#define SET_SERIAL_PORT_BAUD_RATE_DSB_LEN 100

struct  set_serial_port_baud_rate_dsb
   {
   dsb_header      Header;
   uint8           BaudRateSet;
   uint8           padding1[3];
   uint32          BaudRateCount;
   uint32          BaudRates[20];
   uint32          PreviousBaudRate;
   };

#define RREV1_BINARY_SERVO_DATA_DSB_LEN 30012

struct  rrev1_binary_servo_data_dsb
   {
   dsb_header      Header;
   uint16          NumberOfServoData;
   uint16          ServoData[15000];
   uint16          padding1;
   };

#define RREV1_BINARY_SERVO_DATA_SDBP_DSB_LEN 30020

struct  rrev1_binary_servo_data_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_binary_servo_data_dsb Dsb;
   };

#define RREV2_BINARY_SERVO_DATA_DSB_LEN 30024

struct  rrev2_binary_servo_data_dsb
   {
   dsb_header      Header;
   uint64          PassThrough;
   uint16          NumberOfServoData;
   uint16          ServoData[15000];
   uint16          padding1[3];
   };

#define RREV2_BINARY_SERVO_DATA_SDBP_DSB_LEN 30032

struct  rrev2_binary_servo_data_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev2_binary_servo_data_dsb Dsb;
   };

#define SET_INTERFACE_CMD_ECHO_SDBP_DFB_LEN 16

struct  set_interface_cmd_echo_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_interface_cmd_echo_dfb Dfb;
   uint16          padding1;
   };

#define CORRUPT_LBA_DFB_LEN 1568

struct  corrupt_lba_dfb
   {
   dfb_header      Header;
   uint32          padding1;
   uint64          Lba;
   uint64          NumBlocks;
   uint8           Bitfield1  ;
   uint8           padding2;
   uint16          NumBursts;
   corrupt_burst_info BurstInfo[256];
   uint32          padding3;
   };

#define rev2_corrupt_lba_dfb_EnableEccCorrection_OFFSET                                                      0x0000
#define rev2_corrupt_lba_dfb_EnableEccCorrection_MASK                                                        0x0001

#define rev2_corrupt_lba_dfb_EnableByteUnit_OFFSET                                                           0x0001
#define rev2_corrupt_lba_dfb_EnableByteUnit_MASK                                                             0x0002

#define rev2_corrupt_lba_dfb_EnableParityTestMode_OFFSET                                                     0x0002
#define rev2_corrupt_lba_dfb_EnableParityTestMode_MASK                                                       0x00FC


#define CAL_CLEARANCE_COEFS_ADJ_INPUT_LEN 60

struct  cal_clearance_coefs_adj_input
   {
   uint32          CylOrRadius;
   uint16          Head;
   uint16          Iterations;
   uint32          ControlFlags;
   uint16          PreHeaterStart;
   uint16          HeaterStart;
   uint16          HeaterEnd;
   int16           HeaterIncrement;
   uint16          CorrelationThreshold;
   uint16          MeasureRetries;
   uint8           PctOfBpi;
   uint8           PctOfTgtClr;
   uint16          padding1;
   uint32          UpperHiwpLimit; // This is really a 32 bit float value.
   uint32          LowerHiwpLimit; // This is really a 32 bit float value.
   uint16          AgcValue;
   uint16          CTFFR;
   uint8           ATT2R;
   uint8           padding2;
   uint16          HscLength;
   uint16          APreWrNumSvoWedges;
   uint16          BWrNumSvoWedges;
   uint16          CPostWrNumSvoWedges;
   uint16          DRdNumSvoWedges;
   uint16          ETrailingNumSvoWedges;
   uint16          padding3;
   uint32          DebugFlag;
   };

#define PRIMITIVE_COUNT_CONTROL_OUTPUT_TYPE_LEN 6

struct  primitive_count_control_output_type
   {
   uint8           ReturnStatus;
   uint8           CBsExpected;
   uint16          PortACount;
   uint16          PortBCount;
   };

#define SERVO_WEDGE_POSITION_LEN 16

struct  servo_wedge_position
   {
   track_position  TrackPosition;
   uint16          ServoWedge;
   uint16          padding1;
   };

#define GET_PVT_DSB_LEN 40

struct  get_pvt_dsb
   {
   dsb_header      Header;
   uint64          TotalNumSuperBlocks;
   uint64          NumValidBlocks;
   uint64          NumOutstandingBlocks;
   uint8           IsPVTBestClean;
   uint8           padding1[7];
   };

#define GET_PVT_SDBP_DSB_LEN 48

struct  get_pvt_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_pvt_dsb     Dsb;
   };

#define ENABLE_DISABLE_SHOCK_SENSOR_DFB_LEN 6

struct  enable_disable_shock_sensor_dfb
   {
   dfb_header      Header;
   uint8           ShockSensorControlStatusOperation;
   uint8           padding1;
   };

#define RW_ER_MAX_RETRY_CONFIG_LEN 4

struct  rw_er_max_retry_config
   {
   uint16          ReadRetryCount;
   uint16          WriteRetryCount;
   };

#define RW_FORMAT_RETRY_CONFIG_LEN 16

struct  rw_format_retry_config
   {
   uint64          ErrorModeOptions;
   uint32          OTFCorrectionLevel;
   rw_er_max_retry_config MaxRetryConfig;
   };

#define DISC_SLIP_RESPONSE_DATA_LEN 12

struct  disc_slip_response_data
   {
   rw_sense        RwSense;
   uint8           ServoDiscSlipRecalPending;
   uint8           DiscSlipRecalPerformed;
   uint16          padding1;
   };

#define MODE_SENSE_DSB_LEN 2064

struct  mode_sense_dsb
   {
   dsb_header      Header;
   uint8           SenseData[8];
   uint8           ModeSenseData[2048];
   };

#define MODE_SENSE_SDBP_DSB_LEN 2072

struct  mode_sense_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   mode_sense_dsb  Dsb;
   };

#define MC_NODE_OR_SEGMENT_INFO_LEN 12

struct  mc_node_or_segment_info
   {
   uint32          MaxValue;
   uint32          CurrentValue;
   uint32          CurrentPercentage;
   };

#define SET_TEST_SPACE_SDBP_DFB_LEN 24

struct  set_test_space_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_test_space_dfb Dfb;
   };

#define RW_RETRIEVE_DATA_SCRUB_LIST_INFO_INPUTS_LEN 4

struct  rw_retrieve_data_scrub_list_info_inputs
   {
   uint16          StartIndex;
   uint16          NumEntriesRequested;
   };

#define ENABLE_DISABLE_SERVO_UPDATES_DFB_LEN 6

struct  enable_disable_servo_updates_dfb
   {
   dfb_header      Header;
   uint8           DisableVcmDacUpdates;
   uint8           DisableAtoDUpdates;
   };

#define ENABLE_DISABLE_SERVO_UPDATES_SDBP_DFB_LEN 16

struct  enable_disable_servo_updates_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   enable_disable_servo_updates_dfb Dfb;
   uint16          padding1;
   };

#define GET_MAX_RLA_DSB_LEN 16

struct  get_max_rla_dsb
   {
   dsb_header      Header;
   uint32          ReadMaxRLA;
   uint32          VerifyMaxRLA;
   };

#define RW_PARITY_SECS_SLIP_LIST_ENTRY_LEN 16

struct  rw_parity_secs_slip_list_entry
   {
   uint64          SuperBlkAddr;
   uint16          SlipCnt;
   uint16          padding1[3];
   };

#define CONFIGURE_GPIO_TEST_PINS_DSB_LEN 12

struct  configure_gpio_test_pins_dsb
   {
   dsb_header      Header;
   uint32          ConfigurePinsSubCmd;
   };

#define CONFIGURE_GPIO_TEST_PINS_SDBP_DSB_LEN 20

struct  configure_gpio_test_pins_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   configure_gpio_test_pins_dsb Dsb;
   };

#define SET_TRACKING_OFFSET_DFB_LEN 10

struct  set_tracking_offset_dfb
   {
   dfb_header      Header;
   int16           TrackFollowOffset;
   uint8           OffsetIsPersistent;
   uint8           OffsetIsInPercentUnit;
   uint8           OffsetIsInServoCounts;
   uint8           EnableReloadChannelParameters;
   };

#define RW_XFR_ERROR_STATISTICS_LEN 28

struct  rw_xfr_error_statistics
   {
   uint8           Options;
   uint8           padding1[3];
   uint32          ECCErrorPtr;
   uint32          SyncErrorPtr;
   uint16          MaxErrorLogCount;
   uint8           ErrorLogPtr;
   uint8           padding2;
   uint16          IdOffsetRange;
   uint16          padding3;
   uint32          ErrorStatsByZonePtr;
   uint32          ErrorStatsByIdZonePtr;
   };

#define DIAG_SUPER_BLOCK_INFO_LEN 40

struct  diag_super_block_info
   {
   uint64          SuperBlockNumber;
   uint64          StartParityLba;
   uint64          StartUserLba;
   uint64          NumUserSectors;
   uint32          VbmIndexOfParityData;
   uint8           NumParitySectors;
   uint8           padding1[3];
   };

#define DIAG_SERPENT_INFO_LEN 6

struct  diag_serpent_info
   {
   uint16          SerpentIndex;
   uint16          SerpentTrack;
   uint16          SerpentWidth;
   };

#define DIAG_BAND_INFO_LEN 56

struct  diag_band_info
   {
   uint32          BandID;
   uint32          LogOffset;
   uint32          PhyOffset;
   uint32          padding1;
   uint64          StartBandLBA;
   uint64          StartBandPBA;
   uint32          NumBandLBAs;
   uint32          NumBandPBAs;
   uint32          StartCyl;
   uint32          EndCyl;
   uint32          ShingleDirection;
   uint32          padding2;
   };

#define REVS456_TRANSLATE_ADDR_DSB_LEN 424

struct  revs456_translate_addr_dsb
   {
   dsb_header      Header;
   uint16          TranslationType;
   uint16          padding1[3];
   diag_track_info TrackInfo;
   diag_sector_info SectorInfo;
   diag_super_block_info SuperBlockInfo;
   diag_serpent_info SerpentInfo;
   uint16          padding2;
   diag_band_info  BandInfo;
   };

#define REVS456_TRANSLATE_ADDR_SDBP_DSB_LEN 432

struct  revs456_translate_addr_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   revs456_translate_addr_dsb Dsb;
   };

#define SMART_LOGS_DFB_LEN 4

struct  smart_logs_dfb
   {
   dfb_header      Header;
   };

#define SMART_LOGS_SDBP_DFB_LEN 12

struct  smart_logs_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   smart_logs_dfb  Dfb;
   };

#define LOG_SELECT_DFB_LEN 522

struct  log_select_dfb
   {
   dfb_header      Header;
   uint8           PcrSp;
   uint8           PageCode;
   uint8           SubpageCode;
   uint8           padding1;
   uint16          ParamListLen;
   uint8           LogSelectData[512];
   };

#define LOG_SELECT_SDBP_DFB_LEN 532

struct  log_select_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   log_select_dfb  Dfb;
   uint16          padding1;
   };

#define GET_SERVO_EVENT_LOG_SDBP_DSB_LEN 456

struct  get_servo_event_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_servo_event_log_dsb Dsb;
   };

#define ATA_CMD_HISTORY_STRUCT_LEN 32

struct  ata_cmd_history_struct
   {
   uint32          TimeStampInTicks;
   uint8           Opcode;
   uint8           padding1;
   uint16          Feature;
   int64           LBA;
   uint8           DeviceControl;
   uint8           padding2;
   uint16          Count;
   uint8           DeviceHead;
   uint8           padding3;
   uint16          Tag;
   uint8           DSTSelfTestStatus;
   uint8           padding4[3];
   uint32          LastRequestedPowerProfile;
   };

#define NATIVE_INTERFACE_CMD_HISTORY_LIST_LEN 1280

struct  native_interface_cmd_history_list
   {
   ata_cmd_history_struct Entry[40];
   };

#define RW_CMD_HISTORY_ENTRY_LEN 32

struct  rw_cmd_history_entry
   {
   uint32          StartTimeStamp;
   uint32          EndTimeStamp;
   uint8           Type;
   uint8           padding1[3];
   uint32          Options;
   uint64          Mode;
   uint8           Info;
   uint8           Response;
   uint16          padding2[3];
   };

#define RW_CMD_HISTORY_LIST_LEN 1544

struct  rw_cmd_history_list
   {
   uint16          Index;
   uint16          padding1[3];
   rw_cmd_history_entry Entry[48];
   };

#define GET_NATIVE_INTERFACE_AND_RW_CMD_HISTORY_DSB_LEN 2832

struct  get_native_interface_and_rw_cmd_history_dsb
   {
   dsb_header      Header;
   native_interface_cmd_history_list NativeInterfaceCmdHistoryInfo;
   rw_cmd_history_list RwCmdHistoryInfo;
   };

#define GET_NATIVE_INTERFACE_AND_RW_CMD_HISTORY_SDBP_DSB_LEN 2840

struct  get_native_interface_and_rw_cmd_history_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_native_interface_and_rw_cmd_history_dsb Dsb;
   };

#define BRO_THRESHOLD_SETTINGS_LEN 8

struct  bro_threshold_settings
   {
   uint32          ThresholdForMCSegmentPercentage;
   uint32          ThresholdForMCNodePercentage;
   };

#define ATA_MC_MAINTENANCE_INFO_LEN 44

struct  ata_mc_maintenance_info
   {
   mc_node_or_segment_info McNodeInfo;
   mc_node_or_segment_info McSegmentInfo;
   uint8           LastCleaningBroMode;
   uint8           padding1[3];
   bro_threshold_settings AgressiveBroThresholds;
   bro_threshold_settings IdleBroThresholds;
   };

#define GET_SKIP_TRACK_INFO_DSB_LEN 20

struct  get_skip_track_info_dsb
   {
   dsb_header      Header;
   chs_type        PlpChs;
   uint16          TotalNoOfTracks;
   uint16          NoOfSkipTrack;
   };

#define ENABLE_DISABLE_SHOCK_SENSOR_DSB_LEN 12

struct  enable_disable_shock_sensor_dsb
   {
   dsb_header      Header;
   uint8           ShockSensorEnabled;
   uint8           padding1[3];
   };

#define SMART_CONTROL_DFB_LEN 10

struct  smart_control_dfb
   {
   dfb_header      Header;
   uint8           Command;
   uint8           padding1;
   uint16          VariableInput;
   uint8           BooleanBitValue;
   uint8           padding2;
   };

#define DIAG_BUFFER_FILE_INFO_LEN 76

struct  diag_buffer_file_info
   {
   uint8           Reserved;
   uint8           padding1[3];
   uint32          SimFileDescriptor;
   uint32          SimFilePtr;
   uint32          StartPtr;
   uint32          StartingBufferAddr;
   uint32          LengthInBytes;
   uint8           Name[40];
   uint32          FirstBufferBlock;
   uint32          LastBufferBlock;
   uint16          BytesPerBlock;
   uint16          padding2;
   };

#define DOS_RAP_PARMS_LEN 10

struct  dos_rap_parms
   {
   uint8           STEThresholdScalar;
   uint8           STERange;
   uint8           ATIThresholdScalar;
   uint8           DistalSTEThresholdScalar;
   uint8           ATIThresholdScalarInShingledArea;
   uint8           STEThresholdScalarInShingledArea;
   uint8           STERangeInShingledArea;
   uint8           STEThresholdScalarFatTrack;
   uint8           STERangeFatTrack;
   uint8           ATIThresholdScalarFatTrack;
   };

#define DRIVE_GEOMETRY_SINGLE_HEAD_ZONE_INFO_LEN 48

struct  drive_geometry_single_head_zone_info
   {
   int64           StartingLba;
   uint32          StartingPhysicalCyl;
   uint32          EndingPhysicalCyl;
   uint32          NumPhysicalCyls;
   uint32          StartingLogicalCyl;
   uint32          EndingLogicalCyl;
   uint16          NumSectorsPerTrack;
   uint16          NrzSymbolsPerWedge;
   uint32          NrzSymbolsPerTrack;
   uint32          FrequencyInKilohertz;
   uint16          WedgeOpNrzSymbols[4];
   };

#define SET_POWER_MODE_DSB_LEN 12

struct  set_power_mode_dsb
   {
   dsb_header      Header;
   uint32          CurrentPowerMode;
   };

#define RW_OP_ERROR_LOG_ENTRY_DATA_LEN 48

struct  rw_op_error_log_entry_data
   {
   uint32          RwErrorCode;
   uint32          Bitfield1  ;
   uint64          ErrorLba;
   uint64          ErrorPba;
   chs_type        ErrorLllChs;
   chs_type        ErrorPlpChs;
   uint32          ErrorSymbolsFromIndex;
   uint16          ErrorWedge;
   uint16          padding1;
   };

#define rw_op_error_log_entry_data_SystemAreaAccess_OFFSET                                                   0x0000
#define rw_op_error_log_entry_data_SystemAreaAccess_MASK                                                     0x0001

#define rw_op_error_log_entry_data_WedgeMode_OFFSET                                                          0x0001
#define rw_op_error_log_entry_data_WedgeMode_MASK                                                            0x0002

#define rw_op_error_log_entry_data_Unused_OFFSET                                                             0x0002
#define rw_op_error_log_entry_data_Unused_MASK                                                               0xFFFFFFFC


#define ERROR_LOG_ENTRY_DATA_LEN 48

struct  error_log_entry_data
   {
   rw_op_error_log_entry_data RwOpErrorData;
   };

#define ERROR_LOG_ENTRY_LEN 56

struct  error_log_entry
   {
   uint8           Flag;
   uint8           ErrorType;
   uint16          RepeatCount;
   uint32          ErrorCode;
   error_log_entry_data AdditionalInfo;
   };

#define DIAG_RW_CONTROL_PARM_DIRECT_WRITE_MODE_LEN 2

struct  diag_rw_control_parm_direct_write_mode
   {
   uint8           Options;
   uint8           EnableDirectWriteMode;
   };

#define DIAG_RW_CONTROL_PARMS_LEN 2

struct  diag_rw_control_parms
   {
   diag_rw_control_parm_direct_write_mode DirectWriteMode;
   };

#define SET_RW_CONTROL_DFB_LEN 6

struct  set_rw_control_dfb
   {
   dfb_header      Header;
   diag_rw_control_parms DiagRwControlParms;
   };

#define UINT32_STATISTICS_RESULT_LEN 20

struct  uint32_statistics_result
   {
   uint32          Mean;
   uint32          MeanFloat; // This is really a 32 bit float value.
   uint32          Min;
   uint32          Max;
   uint32          StdDev; // This is really a 32 bit float value.
   };

#define WRITE_SERVO_RAM_AT_INDEX_DFB_LEN 24

struct  write_servo_ram_at_index_dfb
   {
   dfb_header      Header;
   uint16          ServoSymbolTableIndex;
   uint8           NumberOfBytes;
   uint8           padding1;
   rw_memory_data  Data;
   uint32          ByteOffset;
   uint32          padding2;
   };

#define WRITE_SERVO_RAM_AT_INDEX_SDBP_DFB_LEN 32

struct  write_servo_ram_at_index_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   write_servo_ram_at_index_dfb Dfb;
   };

#define CLEAN_TRACK_RANGE_DFB_LEN 16

struct  clean_track_range_dfb
   {
   dfb_header      Header;
   uint32          StartLogicalTrack;
   uint32          EndLogicalTrack;
   uint8           Head;
   uint8           padding1[3];
   };

#define QMON_STATS_LEN 72

struct  qmon_stats
   {
   uint32          XferCnt;
   uint32          HardCnt;
   uint32          FirmCnt;
   uint32          SoftCnt;
   uint64          BadBitCnt;
   uint32          IterationCnt;
   uint32          padding1;
   uint64          LowLlrCnt;
   uint32          DataSyncErrorCnt;
   uint32          ErasureCnt;
   uint32          CodewordCnt;
   uint32          NonconvergentCodewordCnt;
   uint32          AttemptedSectorCnt;
   uint32          BlownRevCnt;
   uint32          RetryCnt;
   uint32          padding2;
   };

#define WRITE_ERR_STATS_LEN 12

struct  write_err_stats
   {
   uint32          XferCnt;
   uint32          HardCnt;
   uint32          RetryCnt;
   };

#define QMON_W_ERR_STATS_LEN 270336

struct  qmon_w_err_stats
   {
   qmon_stats      ReadPerAllHeadsZone[3072];
   write_err_stats WritePerAllHeadsZone[3072];
   uint32          AllHeadsZoneNumber[12][256];
   };

#define QMON_STATS_LOG_ENTRY_LEN 270336

struct  qmon_stats_log_entry
   {
   qmon_w_err_stats QmonStats;
   };

#define QMON_STATS_LOG_LEN 270368

struct  qmon_stats_log
   {
   log_header      Header;
   qmon_stats_log_entry Entry;
   uint32          MaxHead;
   uint32          MaxSingleHeadZone;
   uint32          BitsPerCodeword;
   uint32          SymbolsPerUserSector;
   uint32          BitsPerUserSector;
   uint32          padding1;
   };

#define QMON_STATS_LOG_DSB_LEN 270376

struct  qmon_stats_log_dsb
   {
   dsb_header      Header;
   qmon_stats_log  Log;
   };

#define WR_READ_CHANNEL_REG_DFB_LEN 10

struct  wr_read_channel_reg_dfb
   {
   dfb_header      Header;
   uint16          RegAddr;
   uint16          RegData;
   uint8           DirectRegAccess;
   uint8           padding1;
   };

#define SET_TARGET_ADDR_DSB_LEN 12

struct  set_target_addr_dsb
   {
   dsb_header      Header;
   uint8           TestSpaceWrapped;
   uint8           padding1[3];
   };

#define WRITE_FAULT_TOGGLE_DSB_LEN 12

struct  write_fault_toggle_dsb
   {
   dsb_header      Header;
   uint8           State;
   uint8           padding1[3];
   };

#define WRITE_FAULT_TOGGLE_SDBP_DSB_LEN 20

struct  write_fault_toggle_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   write_fault_toggle_dsb Dsb;
   };

#define DATA_SCRUB_ENTRY_LEN 144

struct  data_scrub_entry
   {
   diag_sector_info SectorInfo;
   uint32          ScrubCount;
   uint32          padding1;
   };

#define LOG_SENSE_LOG_HEADER_LEN 4

struct  log_sense_log_header
   {
   uint8           Bitfield1  ;
   uint8           SubPageCode;
   uint16          PageLength;
   };

#define log_sense_log_header_PageCode_OFFSET                                                                 0x0000
#define log_sense_log_header_PageCode_MASK                                                                   0x003F

#define log_sense_log_header_SPF_OFFSET                                                                      0x0006
#define log_sense_log_header_SPF_MASK                                                                        0x0040

#define log_sense_log_header_DS_OFFSET                                                                       0x0007
#define log_sense_log_header_DS_MASK                                                                         0x0080


#define LOG_SENSE_DSB_LEN 16396

struct  log_sense_dsb
   {
   dsb_header      Header;
   log_sense_log_header LogSenseLogHeader;
   uint8           ParameterData[16384];
   };

#define LOG_SENSE_SDBP_DSB_LEN 16404

struct  log_sense_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   log_sense_dsb   Dsb;
   };

#define DOS_RAP_PARMS_INPUT_LEN 8

struct  dos_rap_parms_input
   {
   uint8           Head;
   uint8           STEThresholdScalar;
   uint8           STERange;
   uint8           ATIThresholdScalar;
   int16           TemperatureThreshold;
   uint8           STERange2;
   uint8           DistalSTEThresholdScalar;
   };

#define SET_DOS_RAP_PARAMETERS_DFB_LEN 14

struct  set_dos_rap_parameters_dfb
   {
   dfb_header      Header;
   uint8           AccessOptions;
   uint8           padding1;
   dos_rap_parms_input InputDOSRAPParms;
   };

#define SET_DOS_RAP_PARAMETERS_SDBP_DFB_LEN 24

struct  set_dos_rap_parameters_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_dos_rap_parameters_dfb Dfb;
   uint16          padding1;
   };

#define TWEAK_WRITE_POWER_DFB_LEN 14

struct  tweak_write_power_dfb
   {
   dfb_header      Header;
   uint8           EnableWritePowerTweak;
   uint8           UseCurrentThermistorTemperature;
   uint8           TweakWritePowerOnCurrentHead;
   uint8           TweakWritePowerOnCurrentZone;
   int16           TweakTemperatureInDegreesCelsius;
   uint8           TweakPartitionId;
   uint8           TweakHead;
   uint8           TweakZone;
   uint8           padding1;
   };

#define TWEAK_WRITE_POWER_SDBP_DFB_LEN 24

struct  tweak_write_power_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   tweak_write_power_dfb Dfb;
   uint16          padding1;
   };

#define RW_RETRIEVE_PARITY_SECS_SLIP_LIST_INFO_LEN 32

struct  rw_retrieve_parity_secs_slip_list_info
   {
   rw_retrieve_rw_parity_secs_slip_list_info_inputs InputInfo;
   uint32          padding1;
   rw_parity_secs_slip_list_entry EntryPtr;
   rw_retrieve_rw_parity_secs_slip_list_info_outputs OutputInfo;
   };

#define READ_SERVO_RAM_AT_INDEX_DFB_LEN 12

struct  read_servo_ram_at_index_dfb
   {
   dfb_header      Header;
   uint16          ServoSymbolTableIndex;
   uint8           NumberOfBytes;
   uint8           padding1;
   uint32          ByteOffset;
   };

#define DIAG_FAFH_LOGICAL_TRACKS_LEN 8

struct  diag_fafh_logical_tracks
   {
   uint32          StartTrack;
   uint32          EndTrack;
   };

#define DRIVE_GEOMETRY_FAFH_INFO_LEN 96

struct  drive_geometry_fafh_info
   {
   diag_fafh_logical_tracks Logical[4][3];
   };

#define MODIFY_CAP_PARM_DFB_LEN 528

struct  modify_cap_parm_dfb
   {
   dfb_header      Header;
   uint8           ParmId;
   uint8           padding1[3];
   uint64          ParmValue[64];
   uint32          ParmArrayBytes;
   uint32          ParmByteArrayOffset;
   };

#define FORMAT_COMPLETE_STATUS_LEN 48

struct  format_complete_status
   {
   uint8           RwSenseStatus;
   uint8           padding1[3];
   uint32          RwErrorCode;
   uint16          FileErrorCode;
   uint16          padding2[3];
   uint64          FailingRwBlockAddr;
   uint8           FailingRwBlockAddrType;
   uint8           padding3[3];
   track_position  FailingRwTrackPosition;
   int32           ZoneReformatSkipped;
   uint32          padding4;
   };

#define LOG_SELECT_DSB_LEN 8

struct  log_select_dsb
   {
   dsb_header      Header;
   };

#define GET_SET_PARTITION_ATTRIBUTES_DFB_LEN 28

struct  get_set_partition_attributes_dfb
   {
   dfb_header      Header;
   uint32          Mask;
   uint32          SectorSizeInBytes;
   uint32          DisableSparing;
   uint32          FormatSettingsRestored;
   uint32          BufferBlocksPerUserSector;
   uint8           ProtectionInformationType;
   uint8           padding1[3];
   };

#define GET_SET_PARTITION_ATTRIBUTES_SDBP_DFB_LEN 36

struct  get_set_partition_attributes_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_set_partition_attributes_dfb Dfb;
   };

#define RREV2_INIT_DEFECT_LIST_DFB_LEN 12

struct  rrev2_init_defect_list_dfb
   {
   dfb_header      Header;
   defect_list_select ListSelect;
   uint8           ListMode;
   uint8           padding1[3];
   };

#define EERT_LOAD_PROCESSOR_DFB_LEN 32772

struct  eert_load_processor_dfb
   {
   dfb_header      Header;
   uint8           EERTScript[32768];
   };

#define FAFH_HISTORY_LOG_FILE_HEADER_INFO_LEN 1796

struct  fafh_history_log_file_header_info
   {
   uint16          FafhHistoryLogRevisionMajor;
   uint16          FafhHistoryLogRevisionMinor;
   uint16          FafhBlockReleaseMajor;
   uint16          FafhBlockReleaseMinor;
   uint32          FileHeaderBytes;
   uint32          FrameBytes;
   uint32          FrameTriggerInfoBytes;
   uint32          FrameHeadTestResultsBytes;
   uint32          FrameSensorInfoBytes;
   uint32          FrameSensorInfoHeaderBytes;
   uint32          FrameSensorInfoDataBytes;
   uint32          SensorAtomicMeasurementIterationDataBytes;
   uint8           NumberOfIntervals;
   uint8           NumberOfFramesPerInterval;
   uint8           MaxSensorConfigsSupported;
   uint8           SensorConfigsUsed;
   uint8           MaxHeadsSupported;
   uint8           HeadsUsed;
   uint8           MaxDiametersSupported;
   uint8           DiametersUsed;
   uint8           MaxSensorAtomicMeasurementIterationsSupported;
   uint8           padding1[3];
   uint32          FafhHealthFlags;
   uint32          FafhHealthCounters[4][3][2];
   uint8           InUseFrameCount[5];
   uint8           CurrentFrame[5];
   uint16          padding2;
   uint32          TriggerEventsLifetimeCount;
   uint32          TriggerEventsSinceLastSmartFrameCount[4];
   uint8           SensorsUsedSinceLastSmartFrame[3][4];
   uint32          PeriodicTimerTriggerDelayedCount;
   uint32          IdleRequestGraceTimerExpiredCount;
   uint32          FafhOpSuspendedCount;
   fafh_head_test_results HeadTestResults;
   };

#define SEARCH_AND_READ_FILE_INPUT_LEN 16

struct  search_and_read_file_input
   {
   uint16          FileVolume;
   uint16          FileId;
   uint16          FileSelectCopy;
   uint16          padding1;
   uint32          ByteOffset;
   uint32          BytesToRead;
   };

#define DIAG_FORMAT_RETRY_CONFIG_STATUS_LEN 10

struct  diag_format_retry_config_status
   {
   diag_format_retry_config RwRetryConfig;
   uint8           CertifyRewriteRetryThresholdSupported;
   uint8           padding1;
   uint16          CertifyRewriteRetryThreshold;
   };

#define DEVICE_TEMPERATURE_DATA_LEN 14

struct  device_temperature_data
   {
   thermistor_temperature Thermistor;
   preamp_temperature Preamp;
   uint32          padding1[3];
   channel_temperature Channel;
   uint16          padding2[3];
   };

#define MEASURE_OPTIMUM_SKEW_MINIZONE_SKEW_INFO_LEN 24040

struct  measure_optimum_skew_minizone_skew_info
   {
   uint8           MinDriveZone;
   uint8           MaxDriveZone;
   uint8           ZoneStepSize;
   uint8           MinDriveHead;
   uint8           MaxDriveHead;
   uint8           padding1;
   uint16          TestMaxTrys;
   uint16          MinTestMiniZoneSkew;
   uint16          MaxTestMiniZoneSkew;
   uint16          CylSkew;
   uint16          HeadSkew;
   uint8           ZoneMiniZoneFromHead[2][375];
   uint8           ZoneMiniZoneToHead[2][375];
   uint32          ZoneMiniZoneFromCyl[2][375];
   uint32          ZoneMiniZoneToCyl[2][375];
   uint32          padding2;
   uint64          ZoneMiniZoneFromLba[2][375];
   uint64          ZoneMiniZoneToLba[2][375];
   uint16          ZoneMiniZoneSkewTrialValueInServoBursts[2][375];
   uint32          ZoneAveMiniZoneSkewWriteTimeInUSecs[2][375];
   uint8           ZoneBestMiniZoneSkewWriteTimeFromHead[2];
   uint8           ZoneBestMiniZoneSkewWriteTimeToHead[2];
   uint32          ZoneBestMiniZoneSkewWriteTime[2];
   uint16          ZoneBestTrialMiniZoneSkewValue[2];
   uint16          DriveBestMiniZoneSkewPickInServoBursts;
   uint8           SeekFailure;
   uint8           WriteFailure;
   };

#define SMART_CRITICAL_EVENT_LOG_ENTRY_TYPE_LEN 32

struct  SMART_critical_event_log_entry_type
   {
   uint8           EntryType;
   uint8           DriveActivity;
   uint16          TimeStampHours;
   uint32          TimeStampMsecs;
   uint32          EntryLBA;
   uint32          ErrorCode;
   uint8           RawTemp;
   uint8           DynamicErrorRecoveryErrorType;
   uint8           DynamicErrorRecoveryRetry;
   uint8           LastATCommand;
   uint32          EntryCylinder;
   uint8           EntryHead;
   uint8           EntryFlags;
   uint16          EntrySector;
   uint16          CurrentIndex;
   uint8           NumberOfTimesHappened;
   uint8           EntryLBAByte4;
   };

#define DETS_CRITICAL_EVENT_LOG_ENTRY_LEN 40

struct  dets_critical_event_log_entry
   {
   uint32          R;
   uint32          Theta;
   SMART_critical_event_log_entry_type SmartCeLogEntry;
   };

#define CRITICAL_EVENT_LOG_DSB_LEN 15372

struct  critical_event_log_dsb
   {
   dsb_header      Header;
   uint32          NumberOfEntries;
   dets_critical_event_log_entry DetsCeEntries[384];
   };

#define GET_DIAG_BUFFER_FILE_INFO_DSB_LEN 7612

struct  get_diag_buffer_file_info_dsb
   {
   dsb_header      Header;
   uint32          DiagBufferFileInfoEntries;
   diag_buffer_file_info DiagBufferFileInfo[100];
   };

#define PARTICLE_SWEEP_DSB_LEN 16

struct  particle_sweep_dsb
   {
   dsb_header      Header;
   rw_sense        RwResponse;
   };

#define PARTICLE_SWEEP_SDBP_DSB_LEN 24

struct  particle_sweep_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   particle_sweep_dsb Dsb;
   };

#define DRIVE_GEOMETRY_MEDIA_PARTITION_INFO_LEN 288

struct  drive_geometry_media_partition_info
   {
   uint8           Valid;
   uint8           padding1;
   uint16          AllHeadsZones;
   uint8           SingleHeadZones;
   uint8           padding2;
   uint16          HeadSkewInWedges;
   uint16          CylSkewInWedges;
   uint16          BandSkewInWedges;
   uint16          NrzSymbolsPerSector;
   uint16          padding3;
   uint64          StartingPba;
   uint64          EndingPba;
   int64           StartingLba;
   int64           EndingLba;
   drive_geometry_media_partition_head_info Head[12];
   };

#define DRIVE_GEOMETRY_INFO_LEN 153432

struct  drive_geometry_info
   {
   uint8           Valid;
   uint8           Heads;
   uint16          WedgesPerTrack;
   uint32          StartingPhysicalCyl[12];
   uint32          EndingPhysicalCyl[12];
   uint32          padding1;
   drive_geometry_media_partition_info Partition[4];
   drive_geometry_single_head_zone_info SingleHeadZone[3168];
   uint64          MediaCacheStartingPba;
   uint64          MediaCacheEndingPba;
   drive_geometry_fafh_info FAFHInfo;
   };

#define GET_DRIVE_GEOMETRY_DSB_LEN 153440

struct  get_drive_geometry_dsb
   {
   dsb_header      Header;
   drive_geometry_info DriveGeometry;
   };

#define MONITOR_BACKGROUND_TASKS_DFB_LEN 8

struct  monitor_background_tasks_dfb
   {
   dfb_header      Header;
   uint32          ClearInternalTaskStatistics;
   };

#define MONITOR_BACKGROUND_TASKS_SDBP_DFB_LEN 16

struct  monitor_background_tasks_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   monitor_background_tasks_dfb Dfb;
   };

#define GET_DOS_GENERIC_INFO_DSB_LEN 376

struct  get_dos_generic_info_dsb
   {
   dsb_header      Header;
   uint16          NeedToGraceMsec;
   uint16          NeedToRegraceMsec;
   uint16          NeedToMinScanMSec;
   uint16          STEScanMaxCyl;
   uint16          MaxRetryCnt;
   uint16          WFSTresh;
   uint16          ScanThresholdMultiplier;
   uint16          STENeedToScanThresholdMultiplier;
   uint32          DOSOughtToSaveThreshold;
   uint32          DOSNeedToSaveThreshold;
   uint8           CapNumHeads;
   uint8           padding1[3];
   diag_dos_head_scan_unit_info HeadScanUnitInfo[12];
   uint16          OughtToScanThreshold;
   uint16          NeedToScanThreshold;
   dos_rap_parms   DOSRAPParameter[12];
   uint8           ProximalSTERange[12];
   uint8           ProximalSTERange[12];
   };

#define GET_DOS_GENERIC_INFO_SDBP_DSB_LEN 384

struct  get_dos_generic_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_generic_info_dsb Dsb;
   };

#define PRIMITIVE_COUNT_CONTROL_INPUT_TYPE_LEN 8

struct  primitive_count_control_input_type
   {
   uint8           CountCommand;
   uint8           Direction;
   uint8           Count;
   uint8           padding1;
   uint32          PrimitiveIdentifier;
   };

#define RREV2_GET_TARGET_TRACK_INFO_DSB_LEN 176

struct  rrev2_get_target_track_info_dsb
   {
   dsb_header      Header;
   diag_track_info TrackInfo;
   };

#define READ_SERVO_RAM_AT_INDEX_SDBP_DFB_LEN 20

struct  read_servo_ram_at_index_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_servo_ram_at_index_dfb Dfb;
   };

#define GET_MEMORY_BLOCKS_SDBP_DFB_LEN 20

struct  get_memory_blocks_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_memory_blocks_dfb Dfb;
   };

#define AT_INTERFACE_CONFIG_LEN 12

struct  at_interface_config
   {
   uint32          NumberOfCyls;
   uint8           NumberOfHds;
   uint8           padding1;
   uint16          NumberOfSectors;
   uint16          MultipleSize;
   uint8           DmaMode;
   uint8           padding2;
   };

#define NATIVE_INTERFACE_CONFIG_LEN 12

struct  native_interface_config
   {
   at_interface_config AT;
   };

#define UPDATE_DATA_SCRUB_LIST_OUTPUT_LEN 8

struct  update_data_scrub_list_output
   {
   uint32          RwErrorCode;
   uint16          NumEntriesUpdated;
   uint16          padding1;
   };

#define UPDATE_DATA_SCRUB_LIST_DSB_LEN 16

struct  update_data_scrub_list_dsb
   {
   dsb_header      Header;
   update_data_scrub_list_output UpdateDataScrubListOutput;
   };

#define SET_TARGET_ADDR_LEN 16

struct  set_target_addr
   {
   uint64          Lba;
   uint64          padding1;
   chs_type        ChsOrChw;
   uint64          padding2;
   uint32          Cyl;
   uint32          padding3[3];
   uint8           Hd;
   uint8           padding4[15];
   uint16          SectorOrWedge;
   uint16          padding5[7];
   band_offset_type BandOffset;
   uint32          padding6;
   };

#define WR_READ_CHANNEL_REG_DSB_LEN 12

struct  wr_read_channel_reg_dsb
   {
   dsb_header      Header;
   uint16          RegAddr;
   uint16          RegData;
   };

#define WR_READ_CHANNEL_REG_SDBP_DSB_LEN 20

struct  wr_read_channel_reg_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   wr_read_channel_reg_dsb Dsb;
   };

#define CRITICAL_EVENT_LOG_SDBP_DSB_LEN 15380

struct  critical_event_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   critical_event_log_dsb Dsb;
   };

#define FINE_RW_OFFSET_DSB_LEN 20

struct  fine_rw_offset_dsb
   {
   dsb_header      Header;
   uint32          PhysicalCyl;
   uint8           LogicalHd;
   uint8           padding1;
   int16           Offset;
   int16           OffsetPerTrack;
   uint16          padding2;
   };

#define BUFFER_SET_PATTERN_DFB_LEN 40

struct  buffer_set_pattern_dfb
   {
   dfb_header      Header;
   uint8           PatternType;
   uint8           Pattern[16];
   uint8           padding1;
   uint16          PatternBitLength;
   uint8           BufferBlockNumberValid;
   uint8           padding2[3];
   int32           BufferBlockNumber;
   uint8           NumberOfBlocksValid;
   uint8           padding3[3];
   int32           NumberOfBlocks;
   };

#define BUFFER_SET_PATTERN_SDBP_DFB_LEN 48

struct  buffer_set_pattern_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   buffer_set_pattern_dfb Dfb;
   };

#define RW_RETRIEVE_DEFECTIVE_TRACKS_LIST_INPUTS_LEN 16

struct  rw_retrieve_defective_tracks_list_inputs
   {
   int32           TargetHeadSpecified;
   uint8           TargetHead;
   uint8           padding1[3];
   uint32          StartIndex;
   uint32          NumEntriesRequested;
   };

#define RW_RETRIEVE_DEFECTIVE_TRACKS_LIST_OUTPUTS_LEN 8

struct  rw_retrieve_defective_tracks_list_outputs
   {
   uint32          TotalEntryCount;
   uint32          NumEntriesRetrieved;
   };

#define RW_RETRIEVE_DEFECTIVE_TRACKS_LIST_ENTRY_LEN 12

struct  rw_retrieve_defective_tracks_list_entry
   {
   uint32          Cylinder;
   uint32          EntryIndex;
   uint8           Head;
   uint8           EntryType;
   uint16          padding1;
   };

#define GET_DEFECTIVE_TRACKS_LIST_DSB_LEN 1232

struct  get_defective_tracks_list_dsb
   {
   dsb_header      Header;
   rw_retrieve_defective_tracks_list_inputs InputInfo;
   rw_retrieve_defective_tracks_list_outputs OutputInfo;
   rw_retrieve_defective_tracks_list_entry DefectiveTracksList[100];
   };

#define GET_DEFECTIVE_TRACKS_LIST_SDBP_DSB_LEN 1240

struct  get_defective_tracks_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_defective_tracks_list_dsb Dsb;
   };

#define RW_OP_STATUS_DSB_LEN None

struct  rw_op_status_dsb
   {
   dsb_header      Header;
   rw_op_status    RwOpStatus;
   };

#define GET_LOG_FILE_INFO_SDBP_DFB_LEN 16

struct  get_log_file_info_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_log_file_info_dfb Dfb;
   uint16          padding1;
   };

#define GET_VGA_DATA_DFB_LEN 12

struct  get_vga_data_dfb
   {
   dfb_header      Header;
   uint8           OpType;
   uint8           padding1;
   uint16          StartHt;
   uint16          EndHt;
   uint16          HtInc;
   };

#define ERROR_LOG_LEN 64

struct  error_log
   {
   log_header      Header;
   error_log_entry Entry;
   };

#define USER_SKEW_DSB_LEN 20

struct  user_skew_dsb
   {
   dsb_header      Header;
   uint16          OldHeadSkew;
   uint16          OldCylSkew;
   uint16          OldMiniZoneSkew;
   uint16          NewHeadSkew;
   uint16          NewCylSkew;
   uint16          NewMiniZoneSkew;
   };

#define INTERNAL_TASK_STATISTIC_TASK_STRUCT_LEN 24

struct  internal_task_statistic_task_struct
   {
   uint16          TotalTaskRunExceedingThreshold;
   uint16          Reserved;
   uint32          TotalTaskRunAsPriority;
   uint32          TotalTaskRun;
   uint32          AverageTaskRunTime;
   univ_timestamp  TimeStampOfLastRun;
   };

#define INTERNAL_TASK_STATISTIC_STRUCT_LEN 1460

struct  internal_task_statistic_struct
   {
   uint32          TotalPriorityTaskDoneInIdle;
   uint32          TotalPriorityTaskDoneInNonIdle;
   uint32          MaxPriorityTaskRunTimeInNonIdle;
   uint32          TotalIdleTaskDone;
   uint32          AverageIdleTime;
   internal_task_statistic_task_struct Task[60];
   };

#define MONITOR_BACKGROUND_TASKS_DSB_LEN 1472

struct  monitor_background_tasks_dsb
   {
   dsb_header      Header;
   uint32          ClearCountersAsciiPassthrough;
   internal_task_statistic_struct InternalTaskStatistics;
   };

#define MD_CONTACT_DETECT_DATA_LEN 40

struct  md_contact_detect_data
   {
   uint16          DataIndex;
   uint16          HeaterDac;
   uint32          AvgByWedge; // This is really a 32 bit float value.
   uint32          AvgByWedgeThresh; // This is really a 32 bit float value.
   uint32          ByWedgeThreshData; // This is really a 32 bit float value.
   uint32          AvgByRev; // This is really a 32 bit float value.
   uint32          AvgByRevThresh; // This is really a 32 bit float value.
   uint32          ByRevThreshData; // This is really a 32 bit float value.
   uint8           AvgByRevCode;
   uint8           padding1;
   int16           DpesContactDac;
   uint16          ByWedgeContactDac;
   uint16          ByRevContactDac;
   uint16          ContactDac;
   uint16          padding2;
   };

#define MD_CONTACT_DETECT_OUTPUT_LEN 88648

struct  md_contact_detect_output
   {
   uint32          ControlFlags;
   md_contact_detect_data MdcdData;
   hsc_control     HscControl;
   uint32          padding1;
   rw_calculate_track_position_request_response TrkPos;
   write_triplets  WrtTriplet;
   all_channel_regs_dump AllChannelRegsDump;
   uint16          padding2;
   super_sector_data_dump SuperSectorDataDump;
   channel_calibration_processor_registers ChannelCalProcessorRegs;
   };

#define PRINT_OUT_SERIAL_PORT_SDBP_DFB_LEN 512

struct  print_out_serial_port_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   print_out_serial_port_dfb Dfb;
   };

#define RREV2_READ_MODIFY_SAP_DFB_LEN 2236

struct  rrev2_read_modify_sap_dfb
   {
   dfb_header      Header;
   max_head_sap_data MaxHeadData;
   mr_bias_sap_data MrBiasData;
   mr_bias_sap_data MaxMrBiasData;
   uint16          padding1;
   bias_table_sap_data BiasTableSapData;
   bias_hysteresis_table_sap_data BiasHysteresisTableSapData;
   };

#define GET_R_LIST_DSB_LEN 5640

struct  get_r_list_dsb
   {
   dsb_header      Header;
   uint32          NumEntriesReturned;
   uint32          NumEntriesRequested;
   diag_get_reassigned_sectors_list_entry RListEntryArray[100];
   rw_retrieve_alt_list_entry RWRListEntryArray[100];
   diag_get_reassigned_sectors_list_outputs OutputInfo;
   uint8           FirstPass;
   uint8           padding1;
   uint32          MaxRListSize;
   uint32          padding2;
   };

#define GET_R_LIST_SDBP_DSB_LEN 5648

struct  get_r_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_r_list_dsb  Dsb;
   };

#define HEAD_SWITCH_TEST_SEQUENCE_INFO_LEN 40

struct  head_switch_test_sequence_info
   {
   uint8           HeadSwitchPairFromHead;
   uint8           HeadSwitchPairToHead;
   uint16          padding1;
   uint32          HeadSwitchPairSwitchFromCyl;
   uint32          HeadSwitchPairSwitchToCyl;
   uint32          padding2;
   uint64          HeadSwitchPairSwitchFromLba;
   uint64          HeadSwitchPairSwitchToLba;
   uint8           HeadSwitchPairFromUserZone;
   uint8           HeadSwitchPairToUserZone;
   uint16          padding3[3];
   };

#define SET_RW_CONTROL_SDBP_DFB_LEN 16

struct  set_rw_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_rw_control_dfb Dfb;
   uint16          padding1;
   };

#define SERVO_BODE_PLOT_DSB_LEN 221204

struct  servo_bode_plot_dsb
   {
   dsb_header      Header;
   uint8           BodeType;
   uint8           padding1;
   uint16          NumberOfFreq;
   uint32          NumberOfSamples;
   uint8           EnableTracing;
   uint8           padding2[3];
   dft_results     Signal1FrequencyResponse;
   dft_results     Signal2FrequencyResponse;
   int16           Signal1TimeDomainData[32768];
   int16           Signal2TimeDomainData[32768];
   int16           SectorNumber[32768];
   };

#define SERVO_BODE_PLOT_SDBP_DSB_LEN 221212

struct  servo_bode_plot_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   servo_bode_plot_dsb Dsb;
   };

#define FAST_IO_INJECTION_TABLE_ENTRY_LEN 4

struct  fast_io_injection_table_entry
   {
   uint32          VariableAddr;
   };

#define TRACK_INFO_LEN 168

struct  track_info
   {
   uint8           PartitionId;
   uint8           SingleHeadZone;
   uint16          padding1;
   uint32          PhysicalCyl;
   uint32          LogicalCyl;
   uint32          NominalCyl;
   uint32          RadiusInMils; // This is really a 32 bit float value.
   uint8           LogicalHead;
   uint8           padding2[3];
   uint64          FirstUserLba;
   uint64          ValidLbas;
   uint64          FirstPba;
   uint64          ValidPbas;
   uint64          LogicalTrackNumber;
   uint16          WedgeSkew;
   uint16          SectorsPerFrame;
   uint16          WedgesPerFrame;
   uint16          WedgesPerTrack;
   rw_track_attributes TrackAttributes;
   };

#define STACK_FILL_INFO_LEN 20

struct  stack_fill_info
   {
   uint8           StackID;
   uint8           padding1[3];
   uint32          StackBase;
   uint16          FillPattern;
   uint16          TotalSizeInBytes;
   uint16          UsedSizeInBytes;
   uint16          padding2;
   uint32          PercentageUsed;
   };

#define GET_BASIC_DRIVE_INFO_SDBP_DSB_LEN 904

struct  get_basic_drive_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_basic_drive_info_dsb Dsb;
   };

#define RW_SUPER_PARITY_RAM_DSB_LEN 32780

struct  rw_super_parity_ram_dsb
   {
   dsb_header      Header;
   uint16          NumberOfRawData;
   super_parity_ram_data RawData[8192];
   uint16          padding1;
   };

#define GET_DEFECTS_REPORT_LISTS_INFO_SDBP_DFB_LEN 12

struct  get_defects_report_lists_info_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_defects_report_lists_info_dfb Dfb;
   };

#define SET_SERIAL_PORT_BAUD_RATE_DFB_LEN 8

struct  set_serial_port_baud_rate_dfb
   {
   dfb_header      Header;
   uint32          RequestedBaudRate;
   };

#define MODIFY_PREAMP_LOCK_DFB_LEN 6

struct  modify_preamp_lock_dfb
   {
   dfb_header      Header;
   uint8           Operation;
   uint8           padding1;
   };

#define MODIFY_PREAMP_LOCK_SDBP_DFB_LEN 16

struct  modify_preamp_lock_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   modify_preamp_lock_dfb Dfb;
   uint16          padding1;
   };

#define SET_SERIAL_PORT_BAUD_RATE_SDBP_DFB_LEN 16

struct  set_serial_port_baud_rate_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_serial_port_baud_rate_dfb Dfb;
   };

#define ENABLE_DISABLE_PES_OUTPUT_DFB_LEN 8

struct  enable_disable_pes_output_dfb
   {
   dfb_header      Header;
   uint8           FetchCurrentSettingOnly;
   uint8           EnablePesOutput;
   uint16          PesLeftShiftNumber;
   };

#define SET_SERVO_TRACING_STATE_DFB_LEN 8

struct  set_servo_tracing_state_dfb
   {
   dfb_header      Header;
   uint32          ServoTracingState;
   };

#define RW_SUPER_PARITY_RAM_SDBP_DFB_LEN 20

struct  rw_super_parity_ram_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rw_super_parity_ram_dfb Dfb;
   uint16          padding1;
   };

#define RW_SPARE_BLOCK_RANGE_LEN 24

struct  rw_spare_block_range
   {
   uint64          StartBlkAddr;
   uint64          Length;
   uint64          ContiguousLength;
   };

#define DISPLAY_PERFORMANCE_STATISTICS_DSB_LEN 84

struct  display_performance_statistics_dsb
   {
   dsb_header      Header;
   ata_fast_performance_prm DiagFastPerformancePrm;
   };

#define DISPLAY_PERFORMANCE_STATISTICS_SDBP_DSB_LEN 92

struct  display_performance_statistics_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   display_performance_statistics_dsb Dsb;
   };

#define DISABLE_ENABLE_SERVO_ZAP_SDBP_DFB_LEN 16

struct  disable_enable_servo_zap_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   disable_enable_servo_zap_dfb Dfb;
   uint16          padding1;
   };

#define SYMBOL_ERROR_MAP_LOG_DSB_LEN 6428

struct  symbol_error_map_log_dsb
   {
   dsb_header      Header;
   symbol_error_map_log Log;
   };

#define GET_DIAG_BUFFER_FILE_INFO_SDBP_DSB_LEN 7620

struct  get_diag_buffer_file_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_diag_buffer_file_info_dsb Dsb;
   };

#define SET_DERP_RETRY_STATE_DFB_LEN 18

struct  set_derp_retry_state_dfb
   {
   dfb_header      Header;
   uint8           EnableDerpRetryState;
   uint8           padding1;
   rw_selected_retry_state DerpRetryState;
   };

#define SET_CONGEN_DFB_LEN 4108

struct  set_congen_dfb
   {
   dfb_header      Header;
   uint8           EnableResetCongen;
   uint8           padding1[3];
   uint32          Dummy32;
   congen_long_page Congen;
   };

#define RREV1_GENERIC_SERVO_FAST_IO_WITH_INJECT_DFB_LEN 4108

struct  rrev1_generic_servo_fast_io_with_inject_dfb
   {
   dfb_header      Header;
   uint8           InjectChannel1Flag;
   uint8           InjectChannel2Flag;
   uint8           InjectServoCmdFlag;
   uint8           Pad;
   uint16          RevsToCollect;
   uint16          RevToInjectServocmd;
   uint16          WedgeToInjectServoCmd;
   uint16          Param[32];
   uint16          TriggerValue;
   uint16          TriggerCommandWord;
   uint16          padding1;
   uint32          AuxPort1Address;
   uint32          AuxPort2Address;
   uint32          AuxPort3Address;
   uint32          AuxPort4Address;
   uint32          Channel1InjectionAddress;
   uint32          Channel2InjectionAddress;
   uint16          Channel1InjectionTrace[1000];
   uint16          Channel2InjectionTrace[1000];
   };

#define CONVERT_TRACK_PERCENTAGE_TO_OFFSET_COUNT_DFB_LEN 6

struct  convert_track_percentage_to_offset_count_dfb
   {
   dfb_header      Header;
   int16           DataTrackPercentage;
   };

#define CONVERT_TRACK_PERCENTAGE_TO_OFFSET_COUNT_SDBP_DFB_LEN 16

struct  convert_track_percentage_to_offset_count_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   convert_track_percentage_to_offset_count_dfb Dfb;
   uint16          padding1;
   };

#define WRITE_FAULT_TOGGLE_DFB_LEN 8

struct  write_fault_toggle_dfb
   {
   dfb_header      Header;
   uint8           WriteFaultToggleOp;
   uint8           padding1;
   uint16          FaultMask;
   };

#define WRITE_FAULT_TOGGLE_SDBP_DFB_LEN 16

struct  write_fault_toggle_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   write_fault_toggle_dfb Dfb;
   };

#define GENERIC_RW_REQUEST_DSB_LEN 12

struct  generic_rw_request_dsb
   {
   dsb_header      Header;
   uint32          RwErrorCode;
   };

#define GET_CAP_PARM_DFB_LEN 6

struct  get_cap_parm_dfb
   {
   dfb_header      Header;
   uint8           ParmId;
   uint8           padding1;
   };

#define RD_READ_CHANNEL_REG_DFB_LEN 10

struct  rd_read_channel_reg_dfb
   {
   dfb_header      Header;
   uint16          RegAddr;
   uint16          NumOfRegsToRd;
   uint8           DirectRegAccess;
   uint8           padding1;
   };

#define RD_READ_CHANNEL_REG_SDBP_DFB_LEN 20

struct  rd_read_channel_reg_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rd_read_channel_reg_dfb Dfb;
   uint16          padding1;
   };

#define GENERIC_RW_REQUEST_DFB_LEN 44

struct  generic_rw_request_dfb
   {
   dfb_header      Header;
   uint32          Parm[10];
   };

#define REV_GET_DEVICE_TEMPERATURE_DSB_LEN 24

struct  rev_get_device_temperature_dsb
   {
   dsb_header      Header;
   uint8           DeviceSelect;
   uint8           padding1;
   device_temperature_data DeviceTemperatureData;
   };

#define GET_SET_PARTITION_ATTRIBUTES_DSB_LEN 48

struct  get_set_partition_attributes_dsb
   {
   dsb_header      Header;
   uint32          SectorSizeInBytes;
   uint32          DisableSparing;
   uint32          FormatSettingsRestored;
   uint32          BufferBlocksPerUserSector;
   uint8           ProtectionInformationType;
   uint8           padding1[7];
   uint64          MaxUserLbaExcludingMediaCache;
   uint64          NumberMediaCacheDiskLbas;
   };

#define GET_DOS_SCAN_UNIT_INFO_SDBP_DSB_LEN 57376

struct  get_dos_scan_unit_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_scan_unit_info_dsb Dsb;
   };

#define GET_DOS_LOG_PAGE_COUNTERS_DSB_LEN 348

struct  get_dos_log_page_counters_dsb
   {
   dsb_header      Header;
   uint8           RapNumHeads;
   uint8           padding1[3];
   uint32          DosWorstOughtToScanStartCount[12];
   uint32          NumberOfDosOughtToScans[12];
   uint32          DosWorstNeedToScanStartCount[12];
   uint32          NumberOfDosNeedToScans[12];
   uint32          DosWorstWriteFaultScanStartCount[12];
   uint32          NumberOfDosWriteFaultScans[12];
   uint32          DosWriteRefreshCount[12];
   };

#define GET_DOS_LOG_PAGE_COUNTERS_SDBP_DSB_LEN 356

struct  get_dos_log_page_counters_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_log_page_counters_dsb Dsb;
   };

#define CIRCUMFERENTIAL_LOCATION_TYPE_LEN 4

struct  circumferential_location_type
   {
   uint16          PhysicalSector;
   uint16          padding1;
   uint16          Wedge;
   uint16          padding2;
   uint32          SymbolsFromIndex;
   };

#define MARK_MEDIA_FLAW_DFB_LEN 32

struct  mark_media_flaw_dfb
   {
   dfb_header      Header;
   uint32          Cylinder;
   uint8           Head;
   uint8           CircumferentialLocationSpecifier;
   uint16          padding1;
   circumferential_location_type CircumferentialLocation;
   uint32          PointerLength;
   uint32          RingWidth;
   uint32          UndisturbedRadius;
   uint8           MarkOdId;
   uint8           padding2[3];
   };

#define MARK_MEDIA_FLAW_SDBP_DFB_LEN 40

struct  mark_media_flaw_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   mark_media_flaw_dfb Dfb;
   };

#define GET_SAP_DSB_LEN 4108

struct  get_sap_dsb
   {
   dsb_header      Header;
   uint16          SVRAMLengthOfSap;
   uint16          F3LengthOfSap;
   uint8           Sap[4096];
   };

#define USER_SKEW_SDBP_DSB_LEN 28

struct  user_skew_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   user_skew_dsb   Dsb;
   };

#define SET_INTERFACE_CMD_ECHO_DSB_LEN 12

struct  set_interface_cmd_echo_dsb
   {
   dsb_header      Header;
   uint8           InterfaceCmdEcho;
   uint8           BackgroundActivitiesEcho;
   uint16          padding1;
   };

#define SET_INTERFACE_CMD_ECHO_SDBP_DSB_LEN 20

struct  set_interface_cmd_echo_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_interface_cmd_echo_dsb Dsb;
   };

#define SET_CHANNEL_PREAMP_TRACING_STATE_DFB_LEN 10

struct  set_channel_preamp_tracing_state_dfb
   {
   dfb_header      Header;
   uint8           EnableChannelTracing;
   uint8           EnablePreampTracing;
   uint16          StartingRetry;
   uint16          EndingRetry;
   };

#define SET_CHANNEL_PREAMP_TRACING_STATE_SDBP_DFB_LEN 20

struct  set_channel_preamp_tracing_state_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_channel_preamp_tracing_state_dfb Dfb;
   uint16          padding1;
   };

#define READ_SERVO_RAM_AT_ADDR_DSB_LEN 24

struct  read_servo_ram_at_addr_dsb
   {
   dsb_header      Header;
   uint32          ServoRamAddr;
   uint8           NumberOfBytes;
   uint8           padding1[3];
   rw_memory_data  Data;
   };

#define THROUGHPUT_DSB_LEN 72

struct  throughput_dsb
   {
   dsb_header      Header;
   uint32          Head;
   uint32          Zone;
   uint64          ThroughputStartLba;
   uint64          ThroughputEndLba;
   uint32          HeadSkewInWedges;
   uint32          CylSkewInWedges;
   uint32          MiniZoneOrBandSkewInWedges;
   uint32          ElapsedTimeInUsecs;
   uint64          BytesTransferred;
   uint32          CalThruput;
   uint8           IgnoreThisPacket;
   uint8           InvalidAddress;
   uint8           ReadFailure;
   uint8           WriteFailure;
   uint8           IsFirstPacket;
   uint8           padding1[7];
   };

#define THROUGHPUT_SDBP_DSB_LEN 80

struct  throughput_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   throughput_dsb  Dsb;
   };

#define WRITE_POWERS_LEN 3

struct  write_powers
   {
   uint8           WriteCurrent;
   uint8           WriteDamping;
   uint8           WriteDampingDur;
   };

#define PRIMITIVE_COUNT_CONTROL_DSB_LEN 16

struct  primitive_count_control_dsb
   {
   dsb_header      Header;
   primitive_count_control_output_type Output;
   uint16          padding1;
   };

#define PRIMITIVE_COUNT_CONTROL_SDBP_DSB_LEN 24

struct  primitive_count_control_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   primitive_count_control_dsb Dsb;
   };

#define RREV1_GENERIC_SERVO_FAST_IO_DSB_LEN 832096

struct  rrev1_generic_servo_fast_io_dsb
   {
   dsb_header      Header;
   uint32          NumberOfServoData;
   uint32          AuxPort1Address;
   uint32          AuxPort2Address;
   uint32          AuxPort3Address;
   uint32          AuxPort4Address;
   uint16          DiagStatus;
   uint16          CmdStatus;
   uint16          DataResponse[32];
   uint16          ChannelData[416000];
   };

#define RREV1_GENERIC_SERVO_FAST_IO_SDBP_DSB_LEN 832104

struct  rrev1_generic_servo_fast_io_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_generic_servo_fast_io_dsb Dsb;
   };

#define SET_TRACKING_OFFSET_SDBP_DFB_LEN 20

struct  set_tracking_offset_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_tracking_offset_dfb Dfb;
   uint16          padding1;
   };

#define GET_SKIP_TRACK_INFO_SDBP_DSB_LEN 28

struct  get_skip_track_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_skip_track_info_dsb Dsb;
   };

#define GET_RW_WORKING_PARMS_DSB_LEN None

struct  get_rw_working_parms_dsb
   {
   dsb_header      Header;
   uint8           MaxHeadCount;
   uint8           MaxUserZoneCount;
   uint8           MaxSystemZoneCount;
      };

#define FIND_MIN_OR_MAX_CYLINDERS_DFB_LEN 20

struct  find_min_or_max_cylinders_dfb
   {
   dfb_header      Header;
   uint8           OperationType;
   uint8           Head;
   uint16          padding1;
   uint32          RangeGain; // This is really a 32 bit float value.
   uint32          RetryCountLimit;
   uint32          FilterTimeConstant;
   };

#define FIND_MIN_OR_MAX_CYLINDERS_SDBP_DFB_LEN 28

struct  find_min_or_max_cylinders_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   find_min_or_max_cylinders_dfb Dfb;
   };

#define READ_SERVO_RAM_AT_INDEX_DSB_LEN 24

struct  read_servo_ram_at_index_dsb
   {
   dsb_header      Header;
   uint16          ServoSymbolTableIndex;
   uint8           NumberOfBytes;
   uint8           padding1[5];
   rw_memory_data  Data;
   };

#define READ_SERVO_RAM_AT_INDEX_SDBP_DSB_LEN 32

struct  read_servo_ram_at_index_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_servo_ram_at_index_dsb Dsb;
   };

#define DATA_SCRUB_LIST_INFO_LEN 36896

struct  data_scrub_list_info
   {
   data_scrub_entry DataScrubList[256];
   uint32          ModeEnabled;
   uint32          FormatRevision;
   uint32          MaxNumScrubAttemptsAllowed;
   uint32          TotalEntryCount;
   uint32          NumEntriesRetrieved;
   uint32          RwErrorCode;
   uint32          RListModeEnabled;
   uint32          padding1;
   };

#define RREVX_GET_FIRMWARE_REV_DSB_LEN 288

struct  rrevx_get_firmware_rev_dsb
   {
   dsb_header      Header;
   uint8           PackageVersionString[33];
   uint8           HdaSerialNumber[32];
   uint8           ChangeListString[32];
   uint8           ModelNumberString[40];
   uint8           Id[4];
   uint8           ProductDescriptionString[100];
   uint8           padding1;
   uint16          ServoFirmwareRev;
   uint8           NumberOfHeads;
   uint8           PcbaSerialNumber[32];
   uint8           padding2[3];
   };

#define GET_DOS_SCAN_UNIT_INFO_DFB_LEN 16

struct  get_dos_scan_unit_info_dfb
   {
   dfb_header      Header;
   uint32          StartingSearchScanUnitIndex;
   uint32          NumEntriesToRetrieve;
   uint16          MinimumCount;
   uint16          padding1;
   };

#define IDLE_TASK_CONTROL_SDBP_DFB_LEN 16

struct  idle_task_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   idle_task_control_dfb Dfb;
   };

#define READ_SERIAL_PORT_TEST_RESULTS_INPUT_LEN 12

struct  read_serial_port_test_results_input
   {
   uint16          SptIndex;
   uint16          padding1;
   uint32          ByteOffset;
   uint32          BytesToRead;
   };

#define FINE_RW_OFFSET_SDBP_DSB_LEN 28

struct  fine_rw_offset_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   fine_rw_offset_dsb Dsb;
   };

#define MEASURE_OPTIMUM_SKEW_SEEK_TIMING_INFO_LEN 176

struct  measure_optimum_skew_seek_timing_info
   {
   uint32          ZoneHdAveSeekTimeInUSecs[2][10];
   uint16          ZoneHdAveSeekTimeInServoBursts[2][10];
   uint16          ZoneHdWorstSeekTimeInServoBursts[2][10];
   uint16          MinDriveZone;
   uint16          MaxDriveZone;
   uint16          ZoneStepSize;
   uint8           MinDriveHead;
   uint8           MaxDriveHead;
   uint16          DriveAveSeekTimeInServoBursts;
   uint16          DriveWorstSeekTimeInServoBursts;
   uint8           SeekFailure;
   uint8           padding1[3];
   };

#define QMON_STATS_LOG_SDBP_DSB_LEN 270384

struct  qmon_stats_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   qmon_stats_log_dsb Dsb;
   };

#define CHANNEL_MEMORY_SIZE_DIAG_LEN 26

struct  channel_memory_size_diag
   {
   uint16          UserSectorSizeInSymbols;
   uint16          MediaSectorSizeInSymbols;
   uint16          UserCodewordSizeInSymbols;
   uint16          MediaCodewordSizeInSymbols;
   uint16          SampleBufferSize;
   uint16          SoftBufferRdSize;
   uint16          SoftBufferWtSize;
   uint16          SmallBufferSize;
   uint16          ErasureInputBufferSize;
   uint16          ErasureOutputBufferSize;
   uint16          ExtrinsicBufferSize;
   uint16          DecoderMicrocodeMemorySize;
   uint16          EncoderMicrocodeMemorySize;
   };

#define ADAPTIVE_INFO_LEN 12

struct  adaptive_info
   {
   uint8           RdAdaptiveReq;
   uint8           padding1[3];
   uint32          DestnAddr;
   uint32          Length;
   };

#define READ_ADAPTIVE_DSB_LEN 56

struct  read_adaptive_dsb
   {
   dsb_header      Header;
   adaptive_info   AdaptiveInfo[4];
   };

#define READ_NON_VOLATILE_ADAPTIVE_PARMS_SDBP_DSB_LEN 64

struct  read_non_volatile_adaptive_parms_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_adaptive_dsb Dsb;
   };

#define CONGEN_PARM_DESCRIPTOR_LEN 16

struct  congen_parm_descriptor
   {
   uint32          ParmNamePtr;
   uint32          padding1;
   uint64          Bitfield1  ;
   };

#define congen_parm_descriptor_Index_OFFSET                                                                  0x0000
#define congen_parm_descriptor_Index_MASK                                                                    0x0FFF

#define congen_parm_descriptor_ParentIndex_OFFSET                                                            0x000C
#define congen_parm_descriptor_ParentIndex_MASK                                                              0xFFF000

#define congen_parm_descriptor_ParmLength_OFFSET                                                             0x0018
#define congen_parm_descriptor_ParmLength_MASK                                                               0x3FF000000

#define congen_parm_descriptor_ParmOffset_OFFSET                                                             0x0022
#define congen_parm_descriptor_ParmOffset_MASK                                                               0x3FFC00000000

#define congen_parm_descriptor_ModePage_OFFSET                                                               0x002E
#define congen_parm_descriptor_ModePage_MASK                                                                 0xFC00000000000

#define congen_parm_descriptor_Group_OFFSET                                                                  0x0034
#define congen_parm_descriptor_Group_MASK                                                                    0x3F0000000000000

#define congen_parm_descriptor_Type_OFFSET                                                                   0x003A
#define congen_parm_descriptor_Type_MASK                                                                     0x7C00000000000000

#define congen_parm_descriptor_IsChangeable_OFFSET                                                           0x003F
#define congen_parm_descriptor_IsChangeable_MASK                                                             0x8000000000000000


#define REV_GET_MODIFY_CONGEN_DSB_LEN 536

struct  rev_get_modify_congen_dsb
   {
   dsb_header      Header;
   congen_parm_descriptor CongenParmDescriptor;
   uint8           CongenString[256];
   uint8           CongenValue[256];
   };

#define REV_GET_MODIFY_CONGEN_SDBP_DSB_LEN 544

struct  rev_get_modify_congen_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rev_get_modify_congen_dsb Dsb;
   };

#define FAFH_HISTORY_LOG_FILE_HEADER_LEN 4096

struct  fafh_history_log_file_header
   {
   fafh_history_log_file_header_info Info;
   uint8           Reserved[2300];
   };

#define GET_DOS_VERSION_SDBP_DSB_LEN 20

struct  get_dos_version_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_version_dsb Dsb;
   };

#define SET_POWER_MODE_SDBP_DSB_LEN 20

struct  set_power_mode_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_power_mode_dsb Dsb;
   };

#define GET_SET_LONG_ERASURE_MASK_TABLE_COUNT_DFB_LEN 12

struct  get_set_long_erasure_mask_table_count_dfb
   {
   dfb_header      Header;
   uint32          Mission;
   uint32          Value;
   };

#define GET_SET_LONG_ERASURE_MASK_TABLE_COUNT_SDBP_DFB_LEN 20

struct  get_set_long_erasure_mask_table_count_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_set_long_erasure_mask_table_count_dfb Dfb;
   };

#define SFI_TO_SECTOR_EXT_DATA_LEN 16

struct  sfi_to_sector_ext_data
   {
   uint32          Cyl;
   uint32          SymbolsFromIndex;
   uint32          LengthInSymbols;
   uint8           Head;
   uint8           Rsvd1;
   uint8           Rsvd2;
   uint8           Mode;
   };

#define AMPLITUDE_RATIO_SENSOR_INPUT_LEN 48

struct  amplitude_ratio_sensor_input
   {
   uint32          CylOrRadius;
   uint8           Head;
   uint8           padding1;
   uint16          NumFastIoCollections;
   uint32          ControlFlags;
   uint16          HeaterStart;
   uint16          HeaterEnd;
   int16           HeaterIncrement;
   uint16          MeasureRetries;
   uint8           PctOfBpi;
   uint8           PctOfTgtClr;
   uint16          Ctffr;
   uint16          HscLength;
   uint16          ChannelPreheatRevs;
   uint8           UseWritesToPreheatChannel;
   uint8           padding2[3];
   uint32          ChannelFreq; // This is really a 32 bit float value.
   uint8           Zfr;
   uint8           padding3[3];
   uint32          CtffrScaler; // This is really a 32 bit float value.
   uint8           Diameter;
   uint8           PreAmpGain;
   uint16          padding4;
   };

#define AMPLITUDE_RATIO_SENSOR_DFB_LEN 52

struct  amplitude_ratio_sensor_dfb
   {
   dfb_header      Header;
   amplitude_ratio_sensor_input UserInput;
   };

#define AMPLITUDE_RATIO_SENSOR_SDBP_DFB_LEN 60

struct  amplitude_ratio_sensor_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   amplitude_ratio_sensor_dfb Dfb;
   };

#define GET_CHANNEL_MEMORY_SIZE_DSB_LEN 36

struct  get_channel_memory_size_dsb
   {
   dsb_header      Header;
   channel_memory_size_diag ChannelMemorySize;
   uint16          padding1;
   };

#define CORRUPT_LBA_SDBP_DFB_LEN 1576

struct  corrupt_lba_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   corrupt_lba_dfb Dfb;
   };

#define RREV1_READ_MODIFY_SAP_DFB_LEN 62

struct  rrev1_read_modify_sap_dfb
   {
   dfb_header      Header;
   max_head_sap_data MaxHeadData;
   mr_bias_sap_data MrBiasData;
   mr_bias_sap_data MaxMrBiasData;
   };

#define RREV1_READ_MODIFY_SAP_SDBP_DFB_LEN 72

struct  rrev1_read_modify_sap_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_read_modify_sap_dfb Dfb;
   uint16          padding1;
   };

#define SET_DERP_RETRY_STATE_SDBP_DFB_LEN 28

struct  set_derp_retry_state_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_derp_retry_state_dfb Dfb;
   uint16          padding1;
   };

#define LOG_SELECT_SDBP_DSB_LEN 16

struct  log_select_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   log_select_dsb  Dsb;
   };

#define RW_RETRIEVE_PLIST_ENTRY_LEN 28

struct  rw_retrieve_plist_entry
   {
   rw_nrz_symbols_from_index_extent DefectLocation;
   uint32          LogicalTrack;
   uint8           DefectFlags;
   uint8           padding1[3];
   };

#define GET_P_LIST_DSB_LEN 28820

struct  get_p_list_dsb
   {
   dsb_header      DsbHeader;
   uint8           MaxHeadIndex;
   uint8           padding1[3];
   uint32          EntryCountPerHead[32];
   uint32          NumberOfEntries;
   uint32          ListIndex;
   rw_retrieve_plist_entry Entry[1024];
   };

#define GET_P_LIST_SDBP_DSB_LEN 28828

struct  get_p_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_p_list_dsb  Dsb;
   };

#define GET_MC_MAINTENANCE_INFO_DSB_LEN 52

struct  get_mc_maintenance_info_dsb
   {
   dsb_header      Header;
   ata_mc_maintenance_info McMaintenanceInfo;
   };

#define CHANNEL_MEMORY_DATA_LEN 50560

struct  channel_memory_data
   {
   uint16          SoftReadData[3][1024];
   uint32          padding1[11104];
   uint16          SoftWriteData[1024];
   uint32          padding2[12128];
   uint16          SmallBufferData[2048];
   uint32          padding3[11616];
   uint16          ErasureOutputData[64];
   uint32          padding4[12608];
   uint16          ErasureInputData[64];
   uint32          padding5[12608];
   uint16          ExtrinsicBufferData[9504];
   uint32          padding6[7888];
   uint32          DecoderMicrocodeData[512];
   uint32          padding7[12128];
   uint16          EncoderMicrocodeData[1024];
   uint32          padding8[12128];
   int8            SampleBufferData[3160][16];
   };

#define GET_CHANNEL_MEMORY_DSB_LEN 50576

struct  get_channel_memory_dsb
   {
   dsb_header      Header;
   uint8           MemoryType;
   uint8           BufferSelect;
   uint16          StartElement;
   uint16          NumberOfElements;
   uint16          padding1;
   channel_memory_data Data;
   };

#define ASCII_LOG_LEN 10

struct  ascii_log
   {
   log_header      Header;
   uint8           Entry;
   uint8           padding1;
   };

#define ASCII_LOG_DSB_LEN 20

struct  ascii_log_dsb
   {
   dsb_header      Header;
   ascii_log       Log;
   uint16          padding1;
   };

#define ASCII_LOG_SDBP_DSB_LEN 28

struct  ascii_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   ascii_log_dsb   Dsb;
   };

#define RREV1_READ_MODIFY_SAP_DSB_LEN 68

struct  rrev1_read_modify_sap_dsb
   {
   dsb_header      Header;
   max_head_sap_data MaxHeadData;
   mr_bias_sap_data MrBiasData;
   mr_bias_sap_data MaxMrBiasData;
   uint16          padding1;
   };

#define RREV1_READ_MODIFY_SAP_SDBP_DSB_LEN 76

struct  rrev1_read_modify_sap_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_read_modify_sap_dsb Dsb;
   };

#define MEASURE_OPTIMUM_SKEW_INFO_LEN 553328

struct  measure_optimum_skew_info
   {
   measure_optimum_skew_test_start_info MeasureOptimumSkewTestStartData;
   uint16          padding1;
   measure_optimum_skew_seek_timing_info MeasureOptimumSkewSeekTimingData;
   uint32          padding2;
   measure_optimum_skew_cyl_skew_info MeasureOptimumSkewCylSkewData;
   measure_optimum_skew_head_skew_info MeasureOptimumSkewHeadSkewData;
   measure_optimum_skew_minizone_skew_info MeasureOptimumSkewMiniZoneSkewData;
   uint32          ElapsedTestTimeHours;
   uint32          ElapsedTestTimeMinutes;
   uint32          ElapsedTestTimeSeconds;
   uint32          padding3;
   };

#define CORRECTION_BUFFER_DATA_LEN 6

struct  correction_buffer_data
   {
   uint16          CorrectionBufferAddrOffset;
   uint16          ReadData;
   uint8           MatchOrMismatch;
   uint8           padding1;
   };

#define RW_CORRECTION_BUFFER_DSB_LEN 98316

struct  rw_correction_buffer_dsb
   {
   dsb_header      Header;
   uint16          NumberOfRawData;
   correction_buffer_data RawData[16384];
   uint16          padding1;
   };

#define MEASURE_OPTIMUM_SKEW_DSB_LEN 553336

struct  measure_optimum_skew_dsb
   {
   dsb_header      Header;
   measure_optimum_skew_info MeasureOptimumSkewData;
   };

#define MEASURE_OPTIMUM_SKEW_SDBP_DSB_LEN 553344

struct  measure_optimum_skew_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   measure_optimum_skew_dsb Dsb;
   };

#define SET_EIB_TRACING_STATE_SDBP_DSB_LEN 20

struct  set_eib_tracing_state_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_eib_tracing_state_dsb Dsb;
   };

#define READ_SERVO_SYMBOL_TABLE_AT_INDEX_DSB_LEN 16

struct  read_servo_symbol_table_at_index_dsb
   {
   dsb_header      Header;
   uint16          ServoSymbolTableIndex;
   uint16          padding1;
   uint32          ServoSymbolTableValue;
   };

#define READ_SERVO_SYMBOL_TABLE_AT_INDEX_SDBP_DSB_LEN 24

struct  read_servo_symbol_table_at_index_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_servo_symbol_table_at_index_dsb Dsb;
   };

#define READ_SMART_LOG_DFB_LEN 12

struct  read_smart_log_dfb
   {
   dfb_header      Header;
   uint16          LogAddress;
   uint16          ByteXfrLen;
   uint16          Offset;
   uint8           Options;
   uint8           padding1;
   };

#define READ_LOG_EXT_DFB_LEN 12

struct  read_log_ext_dfb
   {
   dfb_header      Header;
   read_log_ext_parameters Parameters;
   };

#define SEQ_THROUGHPUT_BY_LBA_SDBP_DSB_LEN 1048592

struct  seq_throughput_by_lba_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   seq_throughput_by_lba_dsb Dsb;
   };

#define RW_TARGET_WEDGE_SDBP_DFB_LEN 72

struct  rw_target_wedge_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rw_target_wedge_dfb Dfb;
   };

#define RSZ_SCAN_TEST_DSB_LEN 420

struct  rsz_scan_test_dsb
   {
   dsb_header      Header;
   uint32          ReservedZoneScanSupported;
   uint32          RSZWriteAccessCount;
   uint32          NumOfSystemFiles;
   uint32          ListOfSystemFiles[100];
   };

#define COLLECT_PES_AND_GET_RRO_NRRO_DFB_LEN 8

struct  collect_pes_and_get_rro_nrro_dfb
   {
   dfb_header      Header;
   uint16          RroRevs;
   uint16          NRroRevs;
   };

#define COLLECT_PES_AND_GET_RRO_NRRO_SDBP_DFB_LEN 16

struct  collect_pes_and_get_rro_nrro_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   collect_pes_and_get_rro_nrro_dfb Dfb;
   };

#define MERGE_ALT_LIST_INTO_SLIP_LIST_DSB_LEN 16

struct  merge_alt_list_into_slip_list_dsb
   {
   dsb_header      Header;
   rw_sense        RwResponse;
   };

#define MERGE_ALT_LIST_INTO_SLIP_LIST_SDBP_DSB_LEN 24

struct  merge_alt_list_into_slip_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   merge_alt_list_into_slip_list_dsb Dsb;
   };

#define WR_READ_CHANNEL_REG_SDBP_DFB_LEN 20

struct  wr_read_channel_reg_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   wr_read_channel_reg_dfb Dfb;
   uint16          padding1;
   };

#define RREV1_CHANGE_WRITE_THRESHOLD_DFB_LEN 12

struct  rrev1_change_write_threshold_dfb
   {
   dfb_header      Header;
   uint8           ChangePositionThreshold;
   uint8           padding1;
   uint16          NewPositionThreshold;
   uint8           ChangeVelocityThreshold;
   uint8           padding2;
   uint16          NewVelocityThreshold;
   };

#define SERVO_BODE_PLOT_DFB_LEN 28

struct  servo_bode_plot_dfb
   {
   dfb_header      Header;
   uint8           BodeType;
   uint8           padding1;
   uint16          InjectedAmplitude;
   uint32          FreqMinInHz;
   uint32          FreqMaxInHz;
   uint16          NumberOfFreq;
   uint16          padding2;
   uint32          NumberOfSamples;
   uint8           EnableTracing;
   uint8           padding3[3];
   };

#define RSZ_SCAN_TEST_SDBP_DSB_LEN 428

struct  rsz_scan_test_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rsz_scan_test_dsb Dsb;
   };

#define GET_CHANNEL_MEMORY_SIZE_SDBP_DSB_LEN 44

struct  get_channel_memory_size_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_channel_memory_size_dsb Dsb;
   };

#define SELECT_ERROR_LOGGING_MODE_DFB_LEN 6

struct  select_error_logging_mode_dfb
   {
   dfb_header      Header;
   uint16          ErrorLoggingMode;
   };

#define RW_XFR_MONITORED_HW_DATA_STATISTICS_LEN 20

struct  rw_xfr_monitored_hw_data_statistics
   {
   uint32          HWAccessPtr;
   uint16          NumIgnoredRawDataFrames;
   uint16          NumValidRawDataFrames;
   uint32          ScratchBufPtr;
   uint8           TrimPercentage;
   uint8           padding1;
   uint16          MaxNumStatisticsDataFrames;
   uint32          StatisticDataPtr;
   };

#define RW_CORRECTION_BUFFER_SDBP_DFB_LEN 20

struct  rw_correction_buffer_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rw_correction_buffer_dfb Dfb;
   };

#define MODIFY_READ_CHANNEL_LOCK_DSB_LEN 12

struct  modify_read_channel_lock_dsb
   {
   dsb_header      Header;
   uint8           ReadChannelLocked;
   uint8           padding1[3];
   };

#define MODIFY_READ_CHANNEL_LOCK_SDBP_DSB_LEN 20

struct  modify_read_channel_lock_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   modify_read_channel_lock_dsb Dsb;
   };

#define SERVO_PZT_TEST_DFB_LEN 8

struct  servo_pzt_test_dfb
   {
   dfb_header      Header;
   uint16          OperationSelectId;
   uint16          DacGain;
   };

#define EERT_LOAD_PROCESSOR_DSB_LEN 12

struct  eert_load_processor_dsb
   {
   dsb_header      Header;
   uint8           LockState;
   uint8           padding1[3];
   };

#define EERT_LOAD_PROCESSOR_SDBP_DSB_LEN 20

struct  eert_load_processor_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   eert_load_processor_dsb Dsb;
   };

#define RREV2_SET_TRACK_FORMAT_PARMS_DFB_LEN 12

struct  rrev2_set_track_format_parms_dfb
   {
   dfb_header      Header;
   uint8           UserPartitionTrackFormatType;
   uint8           SysPartitionTrackFormatType;
   uint8           TrackFormatUpdateOption;
   uint8           padding1;
   uint32          SectorSizeInBytes;
   };

#define RREV2_SET_TRACK_FORMAT_PARMS_SDBP_DFB_LEN 20

struct  rrev2_set_track_format_parms_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev2_set_track_format_parms_dfb Dfb;
   };

#define RREV2_CHANGE_WRITE_THRESHOLD_DFB_LEN 14

struct  rrev2_change_write_threshold_dfb
   {
   dfb_header      Header;
   uint8           ChangePositionThreshold;
   uint8           padding1;
   uint16          NewPositionThreshold;
   uint8           ChangeVelocityThreshold;
   uint8           padding2;
   uint16          NewVelocityThreshold;
   uint8           Head;
   uint8           padding3;
   };

#define GET_MC_MAINTENANCE_INFO_SDBP_DSB_LEN 60

struct  get_mc_maintenance_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_mc_maintenance_info_dsb Dsb;
   };

#define WRITE_SERVO_RAM_AT_ADDR_DFB_LEN 24

struct  write_servo_ram_at_addr_dfb
   {
   dfb_header      Header;
   uint32          ServoRamAddr;
   uint8           NumberOfBytes;
   uint8           padding1[7];
   rw_memory_data  Data;
   };

#define WRITE_SERVO_RAM_AT_ADDR_SDBP_DFB_LEN 32

struct  write_servo_ram_at_addr_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   write_servo_ram_at_addr_dfb Dfb;
   };

#define TWEAK_FLY_HEIGHT_VALUES_SDBP_DFB_LEN 32

struct  tweak_fly_height_values_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   tweak_fly_height_values_dfb Dfb;
   };

#define RREV4_GENERIC_SERVO_FAST_IO_WITH_INJECT_DFB_LEN 4216

struct  rrev4_generic_servo_fast_io_with_inject_dfb
   {
   dfb_header      Header;
   uint8           InjectChannel1Flag;
   uint8           InjectChannel2Flag;
   uint8           InjectServoCmdFlag;
   uint8           AddedChannelsFlag;
   uint16          RevsToCollect;
   uint16          RevToInjectServocmd;
   uint16          WedgeToInjectServoCmd;
   uint16          Param[32];
   uint16          TriggerValue;
   uint16          TriggerCommandWord;
   uint8           CollectOnWriteFlag;
   uint8           SectorOffsetFlag;
   uint32          AuxPortAddressArray[24];
   uint8           AuxPortShiftArray[4];
   uint32          TracingMemoryAddr;
   uint32          TraceRoutineAddr;
   uint32          TraceNothingAddr;
   uint32          TraceVariablesAddr;
   uint32          ServoRequestBase;
   uint32          BufferSectorOffset;
   uint32          Channel1InjectionAddress;
   uint32          Channel2InjectionAddress;
   uint16          Channel1InjectionTrace[1000];
   uint16          Channel2InjectionTrace[1000];
   };

#define GET_HARDWARE_JUMPER_SETTING_DFB_LEN 8

struct  get_hardware_jumper_setting_dfb
   {
   dfb_header      Header;
   uint32          HardwareJumperSelect;
   };

#define GET_HARDWARE_JUMPER_SETTING_SDBP_DFB_LEN 16

struct  get_hardware_jumper_setting_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_hardware_jumper_setting_dfb Dfb;
   };

#define GET_CAP_PARM_SDBP_DFB_LEN 16

struct  get_cap_parm_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_cap_parm_dfb Dfb;
   uint16          padding1;
   };

#define MODIFY_RAP_DFB_LEN 28

struct  modify_rap_dfb
   {
   dfb_header      Header;
   uint32          NewValue;
   uint32          RapParm2;
   uint32          RapParm3;
   uint32          RapParm4;
   uint32          RapParm5;
   uint32          RapParm6;
   };

#define TWEAK_FLY_HEIGHT_PARMS_LEN 56

struct  tweak_fly_height_parms
   {
   afh_parms       TweakedAFHParms;
   };

#define GET_P_LIST_DFB_LEN 24

struct  get_p_list_dfb
   {
   dfb_header      DfbHeader;
   uint32          HeadMask;
   uint8           DefectFlags;
   uint8           Bitfield1  ;
   uint16          padding1;
   uint32          StartLogicalCylinder;
   uint32          EndLogicalCylinder;
   uint32          ListIndex;
   };

#define get_p_list_dfb_SummaryOnly_OFFSET                                                                    0x0000
#define get_p_list_dfb_SummaryOnly_MASK                                                                      0x00FF


#define RD_COMPARE_DSB_LEN 48

struct  rd_compare_dsb
   {
   dsb_header      Header;
   uint8           SystemArea;
   uint8           padding1[7];
   uint64          Lba;
   chs_type        LllChs;
   chs_type        PlpChs;
   uint16          SectorByteOffset;
   uint8           ExpectedByte;
   uint8           ActualByte;
   uint32          padding2;
   };

#define RD_COMPARE_SDBP_DSB_LEN 56

struct  rd_compare_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rd_compare_dsb  Dsb;
   };

#define TWEAK_WRITE_POWER_DSB_LEN 1856

struct  tweak_write_power_dsb
   {
   dsb_header      Header;
   int16           CertReferenceTemperatureInDegreesCelsius;
   int16           TweakedTemperatureInDegreesCelsius;
   uint8           TweakedPartitionId;
   uint8           TweakedFirstHead;
   uint8           TweakedLastHead;
   uint8           TweakedFirstZone;
   uint8           TweakedLastZone;
   tweaked_write_power TweakedWritePower[153][4];
   uint8           padding1[3];
   };

#define GET_STACK_FILL_INFO_DSB_LEN 248

struct  get_stack_fill_info_dsb
   {
   dsb_header      Header;
   stack_fill_info StackInfo[12];
   };

#define PRIMITIVE_COUNT_CONTROL_DFB_LEN 12

struct  primitive_count_control_dfb
   {
   dfb_header      Header;
   primitive_count_control_input_type Input;
   };

#define PRIMITIVE_COUNT_CONTROL_SDBP_DFB_LEN 20

struct  primitive_count_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   primitive_count_control_dfb Dfb;
   };

#define RW_PARTICLE_SWEEP_REQUEST_LEN 20

struct  rw_particle_sweep_request
   {
   uint32          StartCylinder;
   uint32          EndCylinder;
   uint32          DurationInMilliseconds;
   uint32          DwellTimeInMilliseconds;
   uint8           ServoSeekSpeed;
   uint8           padding1[3];
   };

#define PARTICLE_SWEEP_DFB_LEN 24

struct  particle_sweep_dfb
   {
   dfb_header      Header;
   rw_particle_sweep_request SweepRequest;
   };

#define PARTICLE_SWEEP_SDBP_DFB_LEN 32

struct  particle_sweep_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   particle_sweep_dfb Dfb;
   };

#define SET_RW_SCOPE_SYNC_DSB_LEN 12

struct  set_rw_scope_sync_dsb
   {
   dsb_header      Header;
   uint16          Wedge;
   uint16          padding1;
   };

#define CONTROLLER_ADAPTIVE_PARAMETERS_LEN 512

struct  controller_adaptive_parameters
   {
   uint32          ValidationKey;
   uint8           HDASerialNumber[8];
   uint8           PCBASerialNumber[12];
   uint8           PCBAPartNumber[10];
   uint8           HeadCount;
   uint8           NodeNameValidationKey;
   uint8           NodeName[8];
   uint8           ProductFamilyID;
   uint8           ProductFamilyMemberID;
   uint8           PCBABuildCode[6];
   uint8           ASICInformation[140];
   uint8           FirmwareKey[14];
   uint16          FirmwareKeyChecksum;
   uint8           DateOfManufacturing[8];
   uint8           DestrokedBufferSizeIndex;
   uint8           FinalMfgOperation[4];
   uint8           FinalMfgErrorCode[4];
   uint8           SystemAreaPrepState;
   uint8           SPTAutoRunDelay;
   uint8           ReservedBytesOrZGSByteForMBCfg;
   uint8           ExternalModelNumber[40];
   uint8           InternalModelNumber[40];
   uint64          IDEMACapacity;
   uint8           ServoProductFamilyMemberID[2];
   uint8           ReservedBytesNVC[8];
   uint8           FinalAssemblyDate[4];
   uint8           CustomerConfigCode[2];
   uint8           StorTekSerialNumber[6];
   uint8           ReservedBytesZR[26];
   uint8           ReservedByteHFS;
   uint8           ReservedBytes2[79];
   uint8           ReservedBytesLenovo8S[23];
   uint8           NoWaitForSataPHYReadyReserved;
   uint8           ReservedBytes[42];
   uint16          Checksum;
   };

#define READ_CHANNEL_ADDR_LEN 2

struct  read_channel_addr
   {
   uint16          RegisterAddr;
   };

#define SET_CHANNEL_PREAMP_TRACING_STATE_DSB_LEN 12

struct  set_channel_preamp_tracing_state_dsb
   {
   dsb_header      Header;
   uint8           ChannelTracingEnabled;
   uint8           PreampTracingEnabled;
   uint16          padding1;
   };

#define SERVO_SECTOR_ERROR_COUNT_DATA_LEN 34

struct  servo_sector_error_count_data
   {
   uint16          ObserverSectorError;
   uint16          AgcRunningAverageTripError;
   uint16          TimingMarkNotDetected;
   uint16          AgcDeltaTripError;
   uint16          LvDetectedShock;
   uint16          UnsafeErrorOntrack;
   uint16          TimingMarkNotDetectedVelocity;
   uint16          ObserverSectorErrorVelocity;
   uint16          AgcBpFilterTripError;
   uint16          PesDetectedShock;
   uint16          PredictedOfftrack;
   uint16          FalsePredictedOfftrack;
   uint16          RroParityError;
   uint16          InterruptOverrunError;
   uint16          StatespaceTrackingRecoveryError;
   uint16          StatespaceSeekRecoveryError;
   uint16          DualStageLockOut;
   };

#define GET_SERVO_SECTOR_ERROR_COUNT_DSB_LEN 420

struct  get_servo_sector_error_count_dsb
   {
   dsb_header      Header;
   servo_sector_error_count_data ServoSectorErrorCountData[12];
   uint32          MaxHead;
   };

#define RD_POWER_ASIC_REG_DSB_LEN 780

struct  rd_power_asic_reg_dsb
   {
   dsb_header      Header;
   uint8           StartingRegAddr;
   uint8           EndingRegAddr;
   uint16          NumOfRegsRd;
   rd_power_asic_reg_info RegInfo[128];
   };

#define RW_DATA_SCRUB_LIST_ENTRY_LEN 16

struct  rw_data_scrub_list_entry
   {
   uint64          LBA;
   uint8           Count;
   uint8           padding1[7];
   };

#define GET_SAP_SDBP_DSB_LEN 4116

struct  get_sap_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_sap_dsb     Dsb;
   };

#define RW_SEQUENCE_STATE_OPTIONS_LEN 4

struct  rw_sequence_state_options
   {
   uint32          Bitfield1  ;
   };

#define rw_sequence_state_options_RwEntireTestSpace_OFFSET                                                   0x0000
#define rw_sequence_state_options_RwEntireTestSpace_MASK                                                     0x0001

#define rw_sequence_state_options_RotateBufferSectorOffset_OFFSET                                            0x0001
#define rw_sequence_state_options_RotateBufferSectorOffset_MASK                                              0x0002

#define rw_sequence_state_options_UnusedBit2_OFFSET                                                          0x0002
#define rw_sequence_state_options_UnusedBit2_MASK                                                            0x0004

#define rw_sequence_state_options_EnableDynamicSparing_OFFSET                                                0x0003
#define rw_sequence_state_options_EnableDynamicSparing_MASK                                                  0x0008

#define rw_sequence_state_options_ContinueOnError_OFFSET                                                     0x0004
#define rw_sequence_state_options_ContinueOnError_MASK                                                       0x0010

#define rw_sequence_state_options_ContinueOnECCError_OFFSET                                                  0x0005
#define rw_sequence_state_options_ContinueOnECCError_MASK                                                    0x0020

#define rw_sequence_state_options_ContinueOnSyncError_OFFSET                                                 0x0006
#define rw_sequence_state_options_ContinueOnSyncError_MASK                                                   0x0040

#define rw_sequence_state_options_UseFixedIoedcSeed_OFFSET                                                   0x0007
#define rw_sequence_state_options_UseFixedIoedcSeed_MASK                                                     0x0080

#define rw_sequence_state_options_EnableEncryption_OFFSET                                                    0x0008
#define rw_sequence_state_options_EnableEncryption_MASK                                                      0x0100

#define rw_sequence_state_options_SimulateHostIo_OFFSET                                                      0x0009
#define rw_sequence_state_options_SimulateHostIo_MASK                                                        0xFFFFFE00


#define RW_SEQUENCE_STATE_LEN 8

struct  rw_sequence_state
   {
   uint8           Operation;
   uint8           padding1[3];
   rw_sequence_state_options Options;
   };

#define RW_TARGET_ADDR_DFB_LEN 516

struct  rw_target_addr_dfb
   {
   dfb_header      Header;
   rw_sequence_state RwSequence[64];
   };

#define RW_TARGET_ADDR_SDBP_DFB_LEN 524

struct  rw_target_addr_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rw_target_addr_dfb Dfb;
   };

#define DIAG_TA_LIST_ENTRY_LEN 8

struct  diag_ta_list_entry
   {
   uint32          Cylinder;
   uint8           Head;
   uint8           padding1[3];
   };

#define USER_SKEW_DFB_LEN 10

struct  user_skew_dfb
   {
   dfb_header      Header;
   uint16          CylSkew;
   uint16          HeadSkew;
   uint16          MiniZoneSkew;
   };

#define READ_NON_VOLATILE_ADAPTIVE_PARMS_SDBP_DFB_LEN 16

struct  read_non_volatile_adaptive_parms_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_non_volatile_adaptive_parms_dfb Dfb;
   };

#define GET_FAFH_HISTORY_LOG_HEADER_DSB_LEN 4104

struct  get_fafh_history_log_header_dsb
   {
   dsb_header      Header;
   fafh_history_log_file_header FafhHistoryLogHeader;
   };

#define GET_FAFH_HISTORY_LOG_HEADER_SDBP_DSB_LEN 4112

struct  get_fafh_history_log_header_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_fafh_history_log_header_dsb Dsb;
   };

#define PROCESS_DEFECT_LIST_OPTIONS_LEN 4

struct  process_defect_list_options
   {
   uint32          Bitfield1  ;
   };

#define process_defect_list_options_ProcessGrownDefectLists_OFFSET                                           0x0000
#define process_defect_list_options_ProcessGrownDefectLists_MASK                                             0x0001

#define process_defect_list_options_ProcessPrimaryDefectLists_OFFSET                                         0x0001
#define process_defect_list_options_ProcessPrimaryDefectLists_MASK                                           0x0002

#define process_defect_list_options_ProcessActiveErrorLog_OFFSET                                             0x0002
#define process_defect_list_options_ProcessActiveErrorLog_MASK                                               0x0004

#define process_defect_list_options_unused_OFFSET                                                            0x0003
#define process_defect_list_options_unused_MASK                                                              0xFFFFFFF8


#define RW_MEMORY_SDBP_DSB_LEN 48

struct  rw_memory_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_memory_dsb   Dsb;
   };

#define GET_RW_WORKING_PARMS_SDBP_DSB_LEN None

struct  get_rw_working_parms_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_rw_working_parms_dsb Dsb;
   };

#define DEFECTS_REPORT_LISTS_OUTPUT_LEN 416

struct  defects_report_lists_output
   {
   uint8           ListCount;
   uint8           padding1[3];
   uint32          TotalEntryCnt[10];
   uint32          MaxEntryCnt[10];
   uint8           AllDefectsNotAvailable[10];
   uint8           ListDescription[10][32];
   uint16          padding2;
   };

#define GET_DEFECTS_REPORT_LISTS_INFO_DSB_LEN 424

struct  get_defects_report_lists_info_dsb
   {
   dsb_header      Header;
   defects_report_lists_output DefectsReportListsOutput;
   };

#define GET_DEFECTS_REPORT_LISTS_INFO_SDBP_DSB_LEN 432

struct  get_defects_report_lists_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_defects_report_lists_info_dsb Dsb;
   };

#define GET_DOS_LOG_PAGE_COUNTERS_DFB_LEN 4

struct  get_dos_log_page_counters_dfb
   {
   dfb_header      Header;
   };

#define SMART_DRIVE_SELF_TEST_DFB_LEN 6

struct  smart_drive_self_test_dfb
   {
   dfb_header      Header;
   uint8           TestNumber;
   uint8           padding1;
   };

#define SMART_DRIVE_SELF_TEST_SDBP_DFB_LEN 16

struct  smart_drive_self_test_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   smart_drive_self_test_dfb Dfb;
   uint16          padding1;
   };

#define DEPENDENT_USER_ZONE_GROUP_INFO_LEN 128

struct  dependent_user_zone_group_info
   {
   uint64          StartPba;
   uint32          CumSlip;
   uint32          padding1;
   uint64          StartLba;
   uint32          SecsPerZone;
   uint32          PhysicalZoneIndexFromZoneGroupAndHead[12];
   uint32          StartCylinder[12];
   uint32          padding2;
   };

#define RW_ZONE_GROUP_INFO_LEN 394400

struct  rw_zone_group_info
   {
   uint32          NumHeads;
   uint32          NumUserZoneGroups;
   uint32          NumSystemZoneGroups;
   uint32          padding1;
   uint64          NumUserPbas;
   uint64          NumUserLbas;
   dependent_user_zone_group_info DependentUserZoneGroup[3072];
   dependent_system_zone_group_info DependentSystemZoneGroup[48];
   };

#define GET_RW_ZONE_GROUP_INFO_DSB_LEN 394408

struct  get_rw_zone_group_info_dsb
   {
   dsb_header      Header;
   rw_zone_group_info RwZoneGroupInfo;
   };

#define PROCESS_DEFECT_LIST_STATUS_LEN 20

struct  process_defect_list_status
   {
   uint8           RwSenseStatus;
   uint8           padding1[3];
   uint32          RwErrorCode;
   uint32          DefectListOffset;
   uint32          DefectListIndex;
   uint16          FileErrorCode;
   uint16          padding2;
   };

#define RW_FORMAT_OP_INFO_LEN 24

struct  rw_format_op_info
   {
   uint16          FormatProgress;
   uint16          padding1[3];
   uint64          TargetBlkAddr;
   uint32          ErrCode;
   uint8           TargetZone;
   uint8           NumPassesAttempted;
   uint16          padding2;
   };

#define FORMAT_IN_PROGRESS_STATUS_LEN 32

struct  format_in_progress_status
   {
   rw_format_op_info RwFormatOpInfo;
   uint8           PercentComplete;
   uint8           padding1[7];
   };

#define RW_FORMAT_LOG_INFO_LEN 104

struct  rw_format_log_info
   {
   uint8           EventType;
   uint8           padding1[7];
   rw_format_log_event_info EventInfo;
   };

#define FORMAT_PARTITION_ADDITIONAL_STATUS_LEN 104

struct  format_partition_additional_status
   {
   process_defect_list_status ProcessDefectListStatus;
   uint32          padding1[21];
   diag_format_retry_config_status FormatRetryConfigStatus;
   uint16          padding2[47];
   format_in_progress_status FormatInProgressStatus;
   uint32          padding3[18];
   rw_format_log_info FormatEventStatus;
   format_complete_status FormatCompleteStatus;
   uint32          padding4[14];
   };

#define RREV2_READ_MODIFY_SAP_SDBP_DFB_LEN 2244

struct  rrev2_read_modify_sap_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev2_read_modify_sap_dfb Dfb;
   };

#define RW_SUPER_PARITY_RAM_SDBP_DSB_LEN 32788

struct  rw_super_parity_ram_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_super_parity_ram_dsb Dsb;
   };

#define RW_CALCULATE_WRITE_HEAT_DAC_WITH_WRITE_HEAT_REQUEST_LEN 24

struct  rw_calculate_write_heat_dac_with_write_heat_request
   {
   uint8           Head;
   uint8           padding1[3];
   uint32          ScaledNominalCylinder;
   uint8           Zone;
   uint8           padding2[3];
   uint32          Actuation; // This is really a 32 bit float value.
   uint32          WL; // This is really a 32 bit float value.
   uint32          Partition;
   };

#define CHANGE_DEF_DFB_LEN 12

struct  change_def_dfb
   {
   dfb_header      Header;
   uint8           SaveByte;
   uint8           DefinitionParam;
   uint8           VendorSpecificEntry;
   uint8           padding1;
   uint32          Password;
   };

#define CHANGE_DEF_SDBP_DFB_LEN 20

struct  change_def_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   change_def_dfb  Dfb;
   };

#define LDPC_ITERATION_CONTROL_DFB_LEN 28

struct  ldpc_iteration_control_dfb
   {
   dfb_header      Header;
   uint32          LocalIterations;
   uint8           LocalIterationOverride;
   uint8           GlobalIterationControl;
   uint8           BerpOverride;
   uint8           padding1;
   rw_berp_request BerpRequest;
   };

#define LDPC_ITERATION_CONTROL_SDBP_DFB_LEN 36

struct  ldpc_iteration_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   ldpc_iteration_control_dfb Dfb;
   };

#define SMART_LOGS_DSB_LEN 1080

struct  smart_logs_dsb
   {
   dsb_header      Header;
   uint32          FrameSize;
   uint32          FrameDataAvailable;
   uint32          TotalFrameStorageArea;
   uint32          ConfigStructureSize;
   uint32          reserved[8];
   uint8           CurrentSmartConfig[1024];
   };

#define SMART_LOGS_SDBP_DSB_LEN 1088

struct  smart_logs_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   smart_logs_dsb  Dsb;
   };

#define REV_CREATE_RECOVERABLE_READ_ERROR_DSB_LEN 40

struct  rev_create_recoverable_read_error_dsb
   {
   dsb_header      Header;
   uint32          OldWritePreheat;
   uint32          OldWriteHeat;
   uint32          UsedWritePreheat;
   uint32          UsedWriteHeat;
   uint16          Head;
   uint16          Zone;
   uint32          LowCount;
   uint32          HighCount;
   uint32          CreatedSector;
   };

#define RW_XFR_MONITORED_HW_REG_DIRECT_ACCESS_LEN 12

struct  rw_xfr_monitored_hw_reg_direct_access
   {
   uint16          NumReadRegs;
   uint16          padding1;
   uint32          RegAddrPtr;
   uint16          BitMaskPtr;
   uint16          padding2;
   };

#define CONVERT_TRACK_PERCENTAGE_TO_OFFSET_COUNT_DSB_LEN 20

struct  convert_track_percentage_to_offset_count_dsb
   {
   dsb_header      Header;
   uint32          PhysicalCyl;
   uint8           LogicalHd;
   uint8           padding1;
   int16           DataTrackPercentage;
   int16           ServoOffsetCount;
   int16           DataTrackWidthInServoCounts;
   };

#define CONVERT_TRACK_PERCENTAGE_TO_OFFSET_COUNT_SDBP_DSB_LEN 28

struct  convert_track_percentage_to_offset_count_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   convert_track_percentage_to_offset_count_dsb Dsb;
   };

#define TWEAK_FLY_HEIGHT_VALUES_DSB_LEN 34292

struct  tweak_fly_height_values_dsb
   {
   dsb_header      Header;
   int16           TweakedTemperatureInDegreesCelsius;
   uint16          TweakedHumidityInTenthsOfPercent;
   uint8           TweakedPartitionId;
   uint8           TweakedFirstHead;
   uint8           TweakedLastHead;
   uint8           TweakedFirstZone;
   uint8           TweakedLastZone;
   uint8           padding1[3];
   tweak_fly_height_parms TweakedFlyHeightParms[153][4];
   };

#define TWEAK_FLY_HEIGHT_VALUES_SDBP_DSB_LEN 34300

struct  tweak_fly_height_values_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   tweak_fly_height_values_dsb Dsb;
   };

#define HEAD_SMASH_TEST_DFB_LEN 14

struct  head_smash_test_dfb
   {
   dfb_header      Header;
   uint16          HeadDirection;
   uint16          AccelerationTime;
   uint16          DecelerationTime;
   uint16          AccelerationCurrent;
   uint16          DecelerationCurrent;
   };

#define LINEAR_REGRESSION_LEN 32

struct  linear_regression
   {
   uint32          XDataPtr; // This is really a 32 bit float value.
   uint32          YDataPtr; // This is really a 32 bit float value.
   uint16          NumPts;
   uint16          padding1;
   uint32          Slope; // This is really a 32 bit float value.
   uint32          Intercept; // This is really a 32 bit float value.
   uint32          MinRes; // This is really a 32 bit float value.
   uint32          MaxRes; // This is really a 32 bit float value.
   uint32          RSquared; // This is really a 32 bit float value.
   };

#define CURRENT_RW_STATUS_LEN 56

struct  current_rw_status
   {
   int32           Ready;
   uint8           RwSenseStatus;
   uint8           padding1[3];
   uint32          RwErrorCode;
   uint8           SystemAreaAccess;
   uint8           padding2[3];
   uint64          Lba;
   chs_type        LllChs;
   chs_type        PlpChs;
   univ_timestamp  TimeStamp;
   uint32          CurrentPowerSignature;
   uint32          CurrentReadyStatusFlags;
   };

#define FAST_IO_DATA_LEN 14

struct  fast_io_data
   {
   uint16          Status;
   uint16          InjectionData[2];
   uint16          ReadbackData[4];
   };

#define RW_FLOAT_AFH_ADJUSTMENTS_LEN 8

struct  rw_float_afh_adjustments
   {
   uint32          Scaling; // This is really a 32 bit float value.
   uint32          Offset; // This is really a 32 bit float value.
   };

#define RW_FLOAT_HIRP_WIRP_LEN 16

struct  rw_float_hirp_wirp
   {
   rw_float_afh_adjustments Read;
   rw_float_afh_adjustments Write;
   };

#define SPIN_UP_DRIVE_SDBP_DFB_LEN 24

struct  spin_up_drive_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   spin_up_drive_dfb Dfb;
   };

#define RW_ADDR_LEN 32

struct  rw_addr
   {
   uint64          Lba;
   chs_type        Chs;
   band_offset_type BandOffset;
   uint32          padding1;
   };

#define MUX_REGISTER_LEN 24

struct  mux_register
   {
   uint16          Value[8];
   uint8           Enable[8];
   };

#define BUFFER_COMPARE_DFB_LEN 32

struct  buffer_compare_dfb
   {
   dfb_header      Header;
   uint8           SourceBufferBlockValid;
   uint8           padding1[3];
   int32           SourceBufferBlock;
   uint8           ReferenceBufferBlockValid;
   uint8           padding2[3];
   int32           ReferenceBufferBlock;
   uint8           BlocksToCompareValid;
   uint8           padding3[3];
   int32           BlocksToCompare;
   uint8           ContinueOnError;
   uint8           padding4[3];
   };

#define BUFFER_COMPARE_SDBP_DFB_LEN 40

struct  buffer_compare_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   buffer_compare_dfb Dfb;
   };

#define SET_DIAG_IDLE_MODE_SDBP_DFB_LEN 24

struct  set_diag_idle_mode_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_diag_idle_mode_dfb Dfb;
   };

#define WRITE_SMART_LOG_DFB_LEN 32844

struct  write_smart_log_dfb
   {
   dfb_header      Header;
   uint16          LogAddress;
   uint16          ByteXfrLen;
   uint16          Offset;
   uint8           Options;
   uint8           ValueForOptions[64];
   uint8           FileData[32768];
   uint8           padding1;
   };

#define WRITE_SMART_LOG_SDBP_DFB_LEN 32852

struct  write_smart_log_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   write_smart_log_dfb Dfb;
   };

#define GET_P_LIST_SDBP_DFB_LEN 32

struct  get_p_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_p_list_dfb  Dfb;
   };

#define ENABLE_DISABLE_PES_OUTPUT_DSB_LEN 12

struct  enable_disable_pes_output_dsb
   {
   dsb_header      Header;
   uint8           EnablePesOutput;
   uint8           padding1;
   uint16          PesLeftShiftNumber;
   };

#define ENABLE_DISABLE_PES_OUTPUT_SDBP_DSB_LEN 20

struct  enable_disable_pes_output_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   enable_disable_pes_output_dsb Dsb;
   };

#define SET_EIB_TRACING_STATE_DFB_LEN 8

struct  set_eib_tracing_state_dfb
   {
   dfb_header      Header;
   uint32          EibTracingState;
   };

#define SET_EIB_TRACING_STATE_SDBP_DFB_LEN 16

struct  set_eib_tracing_state_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_eib_tracing_state_dfb Dfb;
   };

#define GET_MAX_RLA_SDBP_DSB_LEN 24

struct  get_max_rla_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_max_rla_dsb Dsb;
   };

#define UPDATE_DATA_SCRUB_LIST_SDBP_DSB_LEN 24

struct  update_data_scrub_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   update_data_scrub_list_dsb Dsb;
   };

#define COLLECT_PES_AND_GET_RRO_NRRO_DSB_LEN 6028

struct  collect_pes_and_get_rro_nrro_dsb
   {
   dsb_header      Header;
   uint32          CurrentCylinder;
   uint8           CurrentHead;
   uint8           padding1;
   uint16          ServoSectorsPerTrack;
   uint16          ServoPesCountsPerTrack;
   uint16          WriteThreshold;
   int16           PesData[1000];
   int16           PesMin[1000];
   int16           PesMax[1000];
   uint32          Rro3Sigma; // This is really a 32 bit float value.
   uint32          NRro3Sigma; // This is really a 32 bit float value.
   };

#define COLLECT_PES_AND_GET_RRO_NRRO_SDBP_DSB_LEN 6036

struct  collect_pes_and_get_rro_nrro_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   collect_pes_and_get_rro_nrro_dsb Dsb;
   };

#define SET_RETRIES_SDBP_DFB_LEN 56

struct  set_retries_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_retries_dfb Dfb;
   };

#define RREVX_GET_FIRMWARE_REV_SDBP_DSB_LEN 296

struct  rrevx_get_firmware_rev_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrevx_get_firmware_rev_dsb Dsb;
   };

#define ENABLE_DISABLE_SERVO_UPDATES_DSB_LEN 12

struct  enable_disable_servo_updates_dsb
   {
   dsb_header      Header;
   uint8           VcmDacUpdatesDisabled;
   uint8           AtoDUpdatesDisabled;
   uint16          padding1;
   };

#define ENABLE_DISABLE_SERVO_UPDATES_SDBP_DSB_LEN 20

struct  enable_disable_servo_updates_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   enable_disable_servo_updates_dsb Dsb;
   };

#define GET_DOS_LOG_PAGE_COUNTERS_SDBP_DFB_LEN 12

struct  get_dos_log_page_counters_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_log_page_counters_dfb Dfb;
   };

#define MODIFY_CAP_PARM_SDBP_DFB_LEN 536

struct  modify_cap_parm_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   modify_cap_parm_dfb Dfb;
   };

#define RW_UPDATE_DATA_SCRUB_LIST_INFO_LEN 4

struct  rw_update_data_scrub_list_info
   {
   uint8           UpdateOperation;
   uint8           DiscUpdateRequired;
   uint16          NumListEntries;
   };

#define UPDATE_DATA_SCRUB_LIST_INPUT_LEN 4104

struct  update_data_scrub_list_input
   {
   rw_update_data_scrub_list_info UpdateInfo;
   uint32          padding1;
   rw_data_scrub_list_entry ListEntry[256];
   };

#define UPDATE_DATA_SCRUB_LIST_DFB_LEN 4112

struct  update_data_scrub_list_dfb
   {
   dfb_header      Header;
   uint32          padding1;
   update_data_scrub_list_input UpdateDataScrubListInput;
   };

#define SET_TRACK_FORMAT_PARMS_DSB_LEN 12

struct  set_track_format_parms_dsb
   {
   dsb_header      Header;
   uint8           UserPartitionTrackFormatType;
   uint8           SysPartitionTrackFormatType;
   uint16          NumSectorsOnUserTrack;
   };

#define SET_TRACK_FORMAT_PARMS_SDBP_DSB_LEN 20

struct  set_track_format_parms_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_track_format_parms_dsb Dsb;
   };

#define RESET_DRIVE_SDBP_DFB_LEN 16

struct  reset_drive_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   reset_drive_dfb Dfb;
   uint16          padding1;
   };

#define PROCESS_BIGS_FILE_SDBP_DFB_LEN None

struct  process_bigs_file_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   };

#define GET_BUFFER_BLOCKS_SDBP_DSB_LEN 16432

struct  get_buffer_blocks_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_buffer_blocks_dsb Dsb;
   };

#define DIBIT_OPTIMIZATION_PARAMETERS_LEN 16

struct  dibit_optimization_parameters
   {
   int32           NomrfVal;
   int32           SweepStartVal;
   int32           SweepEndVal;
   uint32          IterationCnt;
   };

#define HEAD_SMASH_TEST_SDBP_DFB_LEN 24

struct  head_smash_test_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   head_smash_test_dfb Dfb;
   uint16          padding1;
   };

#define SET_SEACORDER_CMD_THRESHOLD_DFB_LEN 6

struct  set_seacorder_cmd_threshold_dfb
   {
   dfb_header      Header;
   uint8           Options;
   uint8           FatalCmdTimeoutThreshold;
   };

#define RREV2_CHANGE_WRITE_THRESHOLD_SDBP_DFB_LEN 24

struct  rrev2_change_write_threshold_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev2_change_write_threshold_dfb Dfb;
   uint16          padding1;
   };

#define MODE_SENSE_DFB_LEN 48

struct  mode_sense_dfb
   {
   dfb_header      Header;
   uint8           Options;
   uint8           PageCode;
   uint8           Subpage;
   uint8           BytesInCDB;
   uint8           Rsvd2;
   uint8           Rsvd3;
   uint16          BytesToReturn;
   uint16          ModePageCompare;
   uint16          PageModData1[4];
   uint16          PageModData2[4];
   uint16          PageModData3[4];
   uint16          SkippedPages[5];
   };

#define RW_RETRIEVE_DATA_SCRUB_LIST_INFO_OUTPUTS_LEN 16

struct  rw_retrieve_data_scrub_list_info_outputs
   {
   uint32          ModeEnabled;
   uint16          FormatRevision;
   uint8           MaxNumScrubAttemptsAllowed;
   uint8           padding1;
   uint16          TotalAllocatedEntryCount;
   uint16          TotalEntryCount;
   uint16          NumEntriesRetrieved;
   uint16          padding2;
   };

#define ZONE_FORMAT_BUDGET_PARMS_LEN 16

struct  zone_format_budget_parms
   {
   uint8           InitialPLOLength;
   uint8           PLOLength;
   uint8           InterSectorGap;
   uint8           GapBeforeServo;
   uint8           GapAfterServo;
   uint8           SequencerPLO1;
   uint8           SequencerPLO;
   uint8           SequencerISGWrite;
   uint8           SequencerISGRead1;
   uint8           SequencerISGRead;
   uint8           SequencerSGateToWGate;
   uint8           SequencerSGateToRGate;
   uint8           ReadChannelSyncMarkTimeout;
   uint8           Reserved[3];
   };

#define SET_SERVO_TRACING_STATE_SDBP_DFB_LEN 16

struct  set_servo_tracing_state_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_servo_tracing_state_dfb Dfb;
   };

#define DETS_WRITE_LBA_DFB_LEN 1216

struct  dets_write_lba_dfb
   {
   dfb_header      Header;
   uint16          Pad;
   uint16          PacketTransferLength;
   uint64          StartFrameHostLba;
   uint64          IndexHostLba;
   uint64          EndFrameHostLba;
   uint8           Data[1184];
   };

#define GET_SUPER_PARITY_CONFIG_DSB_LEN 12

struct  get_super_parity_config_dsb
   {
   dsb_header      Header;
   uint16          NumberOfInterleavesOrParitySectorsPerSB;
   uint16          NumberOfUserSectorsPerSB;
   };

#define RW_XFR_MONITORED_CHANNEL_ACCESS_LEN 12

struct  rw_xfr_monitored_channel_access
   {
   uint16          NumReadRegs;
   uint16          padding1;
   uint32          RegAddrPtr;
   uint16          BitMaskPtr;
   uint16          padding2;
   };

#define RW_XFR_MONITORED_HW_ACCESS_LEN 20

struct  rw_xfr_monitored_hw_access
   {
   uint16          Options;
   uint16          padding1;
   uint32          ChannelPtr;
   uint32          HWDirectPtr;
   uint16          MaxNumRawDataFrames;
   uint8           AllocatedRawDataFrameSizeInBytes;
   uint8           padding2;
   uint32          RawDataPtr;
   };

#define DIAG_RW_XFR_MONITORED_HW_DATA_STATISTICS_LEN 36

struct  diag_rw_xfr_monitored_hw_data_statistics
   {
   rw_xfr_monitored_hw_access HWAccessPtr;
   uint16          NumIgnoredRawDataFrames;
   uint16          NumValidRawDataFrames;
   uint32          ScratchBufPtr;
   uint8           TrimPercentage;
   uint8           padding1;
   uint16          MaxNumStatisticsDataFrames;
   uint32          StatisticDataPtr;
   };

#define RW_COLLECT_DATA_DSB_LEN 5276

struct  rw_collect_data_dsb
   {
   dsb_header      Header;
   rw_xfr_error_statistics ErrorStatistics;
   rw_xfr_monitored_channel_access ChannelAccess;
   rw_xfr_monitored_hw_reg_direct_access HwDirectAccess;
   rw_xfr_monitored_hw_access HwAccess;
   diag_rw_xfr_monitored_hw_data_statistics HwDataStatistics;
   uint8           ErrorLog[376];
   uint16          EccErrorSectorCount;
   uint16          ErasureSectorCount;
   uint16          SyncErrorSectorCount;
   read_channel_addr ChannelRegAddr[16];
   uint16          ChannelBitMask[16];
   uint16          padding1;
   uint32          HwDirectRegAddr;
   uint16          HwDirectBitMask;
   uint16          padding2;
   uint32          RawData[752];
   uint32          ScratchBuf[376];
   diag_uint32_statistics_result StatisticsResult[12];
   };

#define RW_COLLECT_DATA_SDBP_DSB_LEN 5284

struct  rw_collect_data_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_collect_data_dsb Dsb;
   };

#define SMART_CONTROL_SDBP_DFB_LEN 20

struct  smart_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   smart_control_dfb Dfb;
   uint16          padding1;
   };

#define RESET_CUST_COUNTERS_IN_MFG_DFB_LEN 6

struct  reset_cust_counters_in_mfg_dfb
   {
   dfb_header      Header;
   uint8           ParmId;
   uint8           padding1;
   };

#define RESET_CUST_COUNTERS_IN_MFG_SDBP_DFB_LEN 16

struct  reset_cust_counters_in_mfg_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   reset_cust_counters_in_mfg_dfb Dfb;
   uint16          padding1;
   };

#define READ_SERVO_SYMBOL_TABLE_AT_INDEX_SDBP_DFB_LEN 16

struct  read_servo_symbol_table_at_index_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_servo_symbol_table_at_index_dfb Dfb;
   uint16          padding1;
   };

#define GET_TA_LIST_DSB_LEN 32796

struct  get_ta_list_dsb
   {
   dsb_header      Header;
   diag_get_ta_list_inputs InputInfo;
   diag_get_ta_list_outputs OutputInfo;
   diag_ta_list_entry TaList[4096];
   };

#define GET_TA_LIST_SDBP_DSB_LEN 32804

struct  get_ta_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_ta_list_dsb Dsb;
   };

#define REV_FORMAT_PARTITION_DSB_LEN 144

struct  rev_format_partition_dsb
   {
   dsb_header      Header;
   uint8           PartitionId;
   uint8           padding1[3];
   uint32          ElapsedTimeInSec;
   uint8           AdditionalStatusType;
   uint8           padding2[7];
   format_partition_additional_status AdditionalStatus;
   uint8           RwRetryConfigOptions2;
   uint8           padding3;
   diag_format_retry_config RwRetryConfig2;
   uint16          MaxDefectiveSectorsPerTrack;
   uint16          FormatBoxPaddingHeight;
   uint16          FormatBoxPaddingWidth;
   uint16          padding4;
   };

#define REV_FORMAT_PARTITION_SDBP_DSB_LEN 152

struct  rev_format_partition_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rev_format_partition_dsb Dsb;
   };

#define GET_SET_PARTITION_ATTRIBUTES_SDBP_DSB_LEN 56

struct  get_set_partition_attributes_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_set_partition_attributes_dsb Dsb;
   };

#define REV_GET_RW_STATUS_DSB_LEN 56

struct  rev_get_rw_status_dsb
   {
   dsb_header      Header;
   rw_status_info  RwStatus;
   };

#define REV_GET_RW_STATUS_SDBP_DSB_LEN 64

struct  rev_get_rw_status_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rev_get_rw_status_dsb Dsb;
   };

#define BUFFER_COMPARE_DSB_LEN 32

struct  buffer_compare_dsb
   {
   dsb_header      Header;
   int32           SourceBufferBlock;
   uint32          SourceBufferAddr;
   uint8           SourceBufferData;
   uint8           padding1[3];
   int32           ReferenceBufferBlock;
   uint32          ReferenceBufferAddr;
   uint8           ReferenceBufferData;
   uint8           padding2[3];
   };

#define CHANGE_WRITE_THRESHOLD_DSB_LEN 60

struct  change_write_threshold_dsb
   {
   dsb_header      Header;
   uint16          TotalHeads;
   uint16          PositionThreshold[12];
   uint16          VelocityThreshold[12];
   uint16          padding1;
   };

#define DISABLE_ENABLE_SERVO_ZAP_DSB_LEN 12

struct  disable_enable_servo_zap_dsb
   {
   dsb_header      Header;
   uint8           ZAPControlMode;
   uint8           padding1[3];
   };

#define GET_SUPER_PARITY_SLIP_LIST_SDBP_DSB_LEN 65568

struct  get_super_parity_slip_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_super_parity_slip_list_dsb Dsb;
   };

#define GET_TARGET_TRACK_AND_SECTOR_INFO_DSB_LEN 408176

struct  get_target_track_and_sector_info_dsb
   {
   dsb_header      Header;
   diag_track_info TrackInfo;
   diag_sector_info SectorInfo[3000];
   };

#define GET_TARGET_TRACK_AND_SECTOR_INFO_SDBP_DSB_LEN 408184

struct  get_target_track_and_sector_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_target_track_and_sector_info_dsb Dsb;
   };

#define SEEK_TO_TARGET_ADDR_SDBP_DFB_LEN 20

struct  seek_to_target_addr_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   seek_to_target_addr_dfb Dfb;
   uint16          padding1;
   };

#define LOAD_UNLOAD_HEADS_DFB_LEN 12

struct  load_unload_heads_dfb
   {
   dfb_header      Header;
   load_unload_heads_parms LoadUnloadParms;
   };

#define LOAD_UNLOAD_HEADS_SDBP_DFB_LEN 20

struct  load_unload_heads_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   load_unload_heads_dfb Dfb;
   };

#define GET_ACTIVE_STATUS_DSB_LEN 64

struct  get_active_status_dsb
   {
   dsb_header      Header;
   current_rw_status CurrentRwStatus;
   };

#define READ_UNLOCK_DDR_BUFFER_DSB_LEN 30024

struct  read_unlock_ddr_buffer_dsb
   {
   dsb_header      Header;
   uint8           DdrDataReturned;
   uint8           padding1;
   uint16          DdrBufferLocked;
   uint16          TotalRevs;
   uint16          RevsAfterEvent;
   uint16          ServosPerRev;
   uint16          DataPerServo;
   uint16          TotalDataNum;
   uint16          DdrData[15000];
   uint16          padding2;
   };

#define READ_UNLOCK_DDR_BUFFER_SDBP_DSB_LEN 30032

struct  read_unlock_ddr_buffer_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_unlock_ddr_buffer_dsb Dsb;
   };

#define SIM_FILES_INFO_SDBP_DFB_LEN 24

struct  sim_files_info_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   sim_files_info_dfb Dfb;
   };

#define GET_BUFFER_BLOCKS_DFB_LEN 20

struct  get_buffer_blocks_dfb
   {
   dfb_header      Header;
   uint8           SourceBufferBlockValid;
   uint8           padding1[3];
   int32           SourceBufferBlock;
   uint8           ReferenceBufferBlockValid;
   uint8           padding2[3];
   int32           ReferenceBufferBlock;
   };

#define GET_BUFFER_BLOCKS_SDBP_DFB_LEN 28

struct  get_buffer_blocks_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_buffer_blocks_dfb Dfb;
   };

#define SET_RW_TRACING_STATE_DFB_LEN 8

struct  set_rw_tracing_state_dfb
   {
   dfb_header      Header;
   uint32          RwTracingState;
   };

#define GET_DATA_SCRUB_LIST_DSB_LEN 36904

struct  get_data_scrub_list_dsb
   {
   dsb_header      Header;
   data_scrub_list_info DataScrubListInfo;
   };

#define GET_DATA_SCRUB_LIST_SDBP_DSB_LEN 36912

struct  get_data_scrub_list_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_data_scrub_list_dsb Dsb;
   };

#define GET_DOS_GENERIC_INFO_DFB_LEN 4

struct  get_dos_generic_info_dfb
   {
   dfb_header      Header;
   };

#define GET_DOS_GENERIC_INFO_SDBP_DFB_LEN 12

struct  get_dos_generic_info_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_generic_info_dfb Dfb;
   };

#define DISABLE_ENABLE_SERVO_ZAP_SDBP_DSB_LEN 20

struct  disable_enable_servo_zap_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   disable_enable_servo_zap_dsb Dsb;
   };

#define RW_CALCULATE_READ_ACTUATION_WITH_READ_HEAT_REQUEST_LEN 12

struct  rw_calculate_read_actuation_with_read_heat_request
   {
   uint32          Cylinder;
   uint8           Dac;
   uint8           Zone;
   uint8           Head;
   uint8           padding1;
   uint32          Partition;
   };

#define USER_SKEW_SDBP_DFB_LEN 20

struct  user_skew_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   user_skew_dfb   Dfb;
   uint16          padding1;
   };

#define READ_SERIAL_PORT_TEST_RESULTS_DFB_LEN 16

struct  read_serial_port_test_results_dfb
   {
   dfb_header      Header;
   read_serial_port_test_results_input Input;
   };

#define READ_SERIAL_PORT_TEST_RESULTS_SDBP_DFB_LEN 24

struct  read_serial_port_test_results_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_serial_port_test_results_dfb Dfb;
   };

#define RD_POWER_ASIC_REG_SDBP_DSB_LEN 788

struct  rd_power_asic_reg_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rd_power_asic_reg_dsb Dsb;
   };

#define WR_POWER_ASIC_REG_DSB_LEN 20

struct  wr_power_asic_reg_dsb
   {
   dsb_header      Header;
   uint8           RegAddr;
   uint8           padding1[3];
   uint32          RegData;
   uint8           RegSize;
   uint8           padding2[3];
   };

#define MODIFY_TRACK_DEFECT_LIST_DFB_LEN 32

struct  modify_track_defect_list_dfb
   {
   dfb_header      Header;
   uint32          Reserve;
   modify_defect_address_element BlockAddress;
   uint8           ModificationType;
   uint8           padding1[3];
   uint32          SourceMask;
   uint8           BBMMask;
   uint8           padding2[7];
   };

#define MODIFY_TRACK_DEFECT_LIST_SDBP_DFB_LEN 40

struct  modify_track_defect_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   modify_track_defect_list_dfb Dfb;
   };

#define SERVO_BODE_PLOT_SDBP_DFB_LEN 36

struct  servo_bode_plot_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   servo_bode_plot_dfb Dfb;
   };

#define SEARCH_AND_WRITE_FILE_OUTPUT_LEN 12

struct  search_and_write_file_output
   {
   uint32          FileDescriptor;
   uint32          FileLengthInBytes;
   uint32          BytesWritten;
   };

#define AVALANCHE_DETECTOR_DATA_LEN 8200

struct  avalanche_detector_data
   {
   uint32          LastCylinderIndex;
   uint32          NumberOfDataSamples;
   avalanche_detector_measurement_data Buffer[512];
   };

#define FIND_MIN_OR_MAX_CYLINDERS_DSB_LEN 8208

struct  find_min_or_max_cylinders_dsb
   {
   dsb_header      Header;
   avalanche_detector_data TestData;
   };

#define FIND_MIN_OR_MAX_CYLINDERS_SDBP_DSB_LEN 8216

struct  find_min_or_max_cylinders_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   find_min_or_max_cylinders_dsb Dsb;
   };

#define CHANGE_WRITE_THRESHOLD_SDBP_DSB_LEN 68

struct  change_write_threshold_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   change_write_threshold_dsb Dsb;
   };

#define GET_DOS_SCAN_UNIT_FROM_LBA_DFB_LEN 16

struct  get_dos_scan_unit_from_lba_dfb
   {
   dfb_header      Header;
   uint32          TargetLbaLow;
   uint32          TargetLbaHigh;
   get_dos_scan_unit_from_lba_option Option;
   uint8           padding1[3];
   };

#define GET_DOS_SCAN_UNIT_FROM_LBA_SDBP_DFB_LEN 24

struct  get_dos_scan_unit_from_lba_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_scan_unit_from_lba_dfb Dfb;
   };

#define WRITE_SAME_DFB_LEN 544

struct  write_same_dfb
   {
   dfb_header      Header;
   uint32          padding1;
   int64           StartingLba;
   int64           TransferLength;
   int32           UsePattern;
   uint16          Options;
   uint8           SectorOrPattern[512];
   uint16          padding2;
   };

#define WRITE_SAME_SDBP_DFB_LEN 552

struct  write_same_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   write_same_dfb  Dfb;
   };

#define GET_FAFH_HISTORY_LOG_FRAME_DFB_LEN 6

struct  get_fafh_history_log_frame_dfb
   {
   dfb_header      Header;
   uint8           Interval;
   uint8           FrameNumber;
   };

#define REALLOCATE_PARITY_SECTOR_DFB_LEN 8

struct  reallocate_parity_sector_dfb
   {
   dfb_header      Header;
   uint32          ParitySectorLBA;
   };

#define SELECT_WRITE_BUFFER_SDBP_DFB_LEN 20

struct  select_write_buffer_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   select_write_buffer_dfb Dfb;
   };

#define SFT_PARM_VALUE_LEN 8

struct  sft_parm_value
   {
   uint32          Cylinder;
   uint32          padding1;
   uint8           Head;
   uint8           padding2[7];
   uint8           Uint8Parm;
   uint8           padding3[7];
   uint16          Uint16Parm;
   uint16          padding4[3];
   uint32          Uint32Parm;
   uint32          padding5;
   uint32          Uint64Parm;
   uint32          padding6;
   int8            Sint8Parm;
   uint8           padding7[7];
   int16           Sint16Parm;
   uint16          padding8[3];
   int32           Sint32Parm;
   uint32          padding9;
   int64           Sint64Parm;
   uint32          FloatParm; // This is really a 32 bit float value.
   uint32          padding10;
   double          DoubleParm;
   };

#define WR_PREAMP_REG_DFB_LEN 10

struct  wr_preamp_reg_dfb
   {
   dfb_header      Header;
   uint8           RegPage;
   uint8           RegAddrOffset;
   uint16          RegData;
   uint16          RegBitMask;
   };

#define SLIST_ENTRY_LEN 20

struct  slist_entry
   {
   servo_wedge_position WedgePosition;
   uint32          LogicalCylinder;
   };

#define GET_PRIMARY_SLIST_DSB_LEN 204828

struct  get_primary_slist_dsb
   {
   dsb_header      Header;
   uint32          EntryCount[4];
   uint16          TotalNumberOfEntries;
   uint16          padding1;
   slist_entry     SlistEntry[10240];
   };

#define GET_PRIMARY_SLIST_SDBP_DSB_LEN 204836

struct  get_primary_slist_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_primary_slist_dsb Dsb;
   };

#define SET_CONGEN_SDBP_DFB_LEN 4116

struct  set_congen_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_congen_dfb  Dfb;
   };

#define RD_PREAMP_REG_DSB_LEN 144

struct  rd_preamp_reg_dsb
   {
   dsb_header      Header;
   uint8           NumOfPreampRegsInPage;
   uint8           RegPage;
   uint8           RegAddrOffset;
   uint8           padding1;
   uint16          NumOfRegsRd;
   uint16          RegData[64];
   uint16          padding2;
   };

#define RD_PREAMP_REG_SDBP_DSB_LEN 152

struct  rd_preamp_reg_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rd_preamp_reg_dsb Dsb;
   };

#define SET_RETRIES_DSB_LEN 40

struct  set_retries_dsb
   {
   dsb_header      Header;
   diag_error_recovery_parms ErrorRecoveryParms;
   };

#define SET_RETRIES_SDBP_DSB_LEN 48

struct  set_retries_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_retries_dsb Dsb;
   };

#define RREV1_GENERIC_SERVO_FAST_IO_SDBP_DFB_LEN 4116

struct  rrev1_generic_servo_fast_io_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_generic_servo_fast_io_with_inject_dfb Dfb;
   };

#define RREV3_GENERIC_SERVO_FAST_IO_DSB_LEN 131252

struct  rrev3_generic_servo_fast_io_dsb
   {
   dsb_header      Header;
   uint32          NumberOfServoData;
   uint32          RecordOfAllFlags;
   uint32          AuxPortAddressArray[24];
   uint16          DiagStatus;
   uint16          CmdStatus;
   uint16          DataResponse[32];
   uint16          ChannelData[65536];
   };

#define RREV3_GENERIC_SERVO_FAST_IO_SDBP_DSB_LEN 131260

struct  rrev3_generic_servo_fast_io_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev3_generic_servo_fast_io_dsb Dsb;
   };

#define GET_RW_ZONE_GROUP_INFO_SDBP_DSB_LEN 394416

struct  get_rw_zone_group_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_rw_zone_group_info_dsb Dsb;
   };

#define GET_FAFH_HISTORY_LOG_FRAME_SDBP_DFB_LEN 16

struct  get_fafh_history_log_frame_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_fafh_history_log_frame_dfb Dfb;
   uint16          padding1;
   };

#define SET_SERIAL_PORT_BAUD_RATE_SDBP_DSB_LEN 108

struct  set_serial_port_baud_rate_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_serial_port_baud_rate_dsb Dsb;
   };

#define RREV1_CHANGE_WRITE_THRESHOLD_SDBP_DFB_LEN 20

struct  rrev1_change_write_threshold_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_change_write_threshold_dfb Dfb;
   };

#define RAW_DATA_DSB_LEN 12

struct  raw_data_dsb
   {
   dsb_header      Header;
   uint8           Data;
   uint8           padding1[3];
   };

#define RAW_DATA_SDBP_DSB_LEN 20

struct  raw_data_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   raw_data_dsb    Dsb;
   };

#define SQMS_DIBIT_WPC_DATA_LEN 28

struct  sqms_dibit_wpc_data
   {
   int32           TestEchoVals;
   int32           CenterLineLeftValues;
   int32           CenterLineRightValues;
   int32           SweepMin;
   int32           SweepMax;
   int32           NomrfVal;
   uint32          NumOfIterations;
   };

#define READ_FILE_DFB_LEN 20

struct  read_file_dfb
   {
   dfb_header      Header;
   search_and_read_file_input Input;
   };

#define READ_FILE_SDBP_DFB_LEN 28

struct  read_file_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_file_dfb   Dfb;
   };

#define CLEAN_TRACK_RANGE_SDBP_DFB_LEN 24

struct  clean_track_range_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   clean_track_range_dfb Dfb;
   };

#define GET_DOS_SCANS_DUE_DFB_LEN 4

struct  get_dos_scans_due_dfb
   {
   dfb_header      Header;
   };

#define SET_RW_SCOPE_SYNC_SDBP_DSB_LEN 20

struct  set_rw_scope_sync_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_rw_scope_sync_dsb Dsb;
   };

#define COLLECT_PES_SDBP_DFB_LEN 16

struct  collect_pes_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   collect_pes_dfb Dfb;
   uint16          padding1;
   };

#define WRITE_LBA_SDBP_DFB_LEN 1224

struct  write_lba_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   dets_write_lba_dfb Dfb;
   };

#define GET_CAP_PARM_DSB_LEN 524

struct  get_cap_parm_dsb
   {
   dsb_header      Header;
   uint8           ParmId;
   controller_adaptive_parameters ParmValue;
   uint8           padding1[3];
   };

#define ENABLE_DISABLE_PES_OUTPUT_SDBP_DFB_LEN 16

struct  enable_disable_pes_output_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   enable_disable_pes_output_dfb Dfb;
   };

#define GET_DOS_SCAN_UNIT_INFO_SDBP_DFB_LEN 24

struct  get_dos_scan_unit_info_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_scan_unit_info_dfb Dfb;
   };

#define GET_TA_LIST_DFB_LEN 12

struct  get_ta_list_dfb
   {
   dfb_header      Header;
   diag_get_ta_list_inputs InputInfo;
   };

#define GET_TA_LIST_SDBP_DFB_LEN 20

struct  get_ta_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_ta_list_dfb Dfb;
   };

#define DIAG_FORMAT_RETRY_CONFIG_OPTIONS_LEN 3

struct  diag_format_retry_config_options
   {
   uint8           SelectMaxWriteRetryCount;
   uint8           SelectMaxReadRetryCount;
   uint8           SelectMaxIterationCount;
   };

#define REV_FORMAT_PARTITION_DFB_LEN 52

struct  rev_format_partition_dfb
   {
   dfb_header      Header;
   uint8           PartitionId;
   uint8           padding1[3];
   format_partition_options FormatOptions;
   process_defect_list_options ProcessDefectListOptions;
   diag_format_retry_config_options RetryConfigOptions;
   uint8           padding2;
   diag_format_retry_config RetryConfig;
   uint8           CertifyRewriteRetryThresholdValid;
   uint8           padding3;
   uint16          CertifyRewriteRetryThreshold;
   uint16          padding4;
   uint32          FormatDataPattern;
   uint8           RetryConfigOptions2;
   uint8           padding5;
   diag_format_retry_config RetryConfig2;
   uint16          MaxDefectiveSectorsPerTrack;
   uint16          FormatBoxPaddingHeight;
   uint16          FormatBoxPaddingWidth;
   uint16          padding6;
   };

#define REV_FORMAT_PARTITION_SDBP_DFB_LEN 60

struct  rev_format_partition_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rev_format_partition_dfb Dfb;
   };

#define TWEAK_WRITE_POWER_SDBP_DSB_LEN 1864

struct  tweak_write_power_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   tweak_write_power_dsb Dsb;
   };

#define GENERIC_SERVO_COMMAND_DFB_LEN 70

struct  generic_servo_command_dfb
   {
   dfb_header      Header;
   uint16          CommandNum;
   uint16          Parameters[32];
   };

#define GENERIC_SERVO_COMMAND_SDBP_DFB_LEN 80

struct  generic_servo_command_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   generic_servo_command_dfb Dfb;
   uint16          padding1;
   };

#define WRITE_FILE_INPUT_LEN 20

struct  write_file_input
   {
   uint32          FileDescriptor;
   uint16          FileSelectCopy;
   uint16          padding1;
   uint32          ByteOffset;
   uint32          BytesToWrite;
   uint8           FileDataPtr;
   uint8           padding2[3];
   };

#define READ_UNLOCK_DDR_BUFFER_DFB_LEN 6

struct  read_unlock_ddr_buffer_dfb
   {
   dfb_header      Header;
   uint8           UnlockDdrBuffer;
   uint8           padding1;
   };

#define READ_UNLOCK_DDR_BUFFER_SDBP_DFB_LEN 16

struct  read_unlock_ddr_buffer_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_unlock_ddr_buffer_dfb Dfb;
   uint16          padding1;
   };

#define RW_CORRECTION_BUFFER_SDBP_DSB_LEN 98324

struct  rw_correction_buffer_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_correction_buffer_dsb Dsb;
   };

#define RREV1_GET_TARGET_TRACK_INFO_SDBP_DSB_LEN 184

struct  rrev1_get_target_track_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_get_target_track_info_dsb Dsb;
   };

#define SET_CHANNEL_PREAMP_TRACING_STATE_SDBP_DSB_LEN 20

struct  set_channel_preamp_tracing_state_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_channel_preamp_tracing_state_dsb Dsb;
   };

#define RW_CALCULATE_READ_HEAT_DAC_WITH_READ_HEAT_REQUEST_LEN 20

struct  rw_calculate_read_heat_dac_with_read_heat_request
   {
   uint8           Head;
   uint8           padding1[3];
   uint32          ScaledNominalCylinder;
   uint8           Zone;
   uint8           padding2[3];
   uint32          Actuation; // This is really a 32 bit float value.
   uint32          Partition;
   };

#define GENERIC_RW_REQUEST_SDBP_DSB_LEN 20

struct  generic_rw_request_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   generic_rw_request_dsb Dsb;
   };

#define MONITOR_BACKGROUND_TASKS_SDBP_DSB_LEN 1480

struct  monitor_background_tasks_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   monitor_background_tasks_dsb Dsb;
   };

#define MODIFY_RAP_SDBP_DFB_LEN 36

struct  modify_rap_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   modify_rap_dfb  Dfb;
   };

#define GET_SERVO_SECTOR_ERROR_COUNT_SDBP_DSB_LEN 428

struct  get_servo_sector_error_count_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_servo_sector_error_count_dsb Dsb;
   };

#define MODIFY_READ_CHANNEL_LOCK_SDBP_DFB_LEN 16

struct  modify_read_channel_lock_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   modify_read_channel_lock_dfb Dfb;
   uint16          padding1;
   };

#define RREV1_CONVERT_SERVO_PHYSICAL_TO_LOGICAL_DSB_LEN 32

struct  rrev1_convert_servo_physical_to_logical_dsb
   {
   dsb_header      Header;
   int32           ServoPhysicalCyl;
   int32           TotalOffset;
   int32           LogicalTrack;
   uint32          DataTrack;
   int32           ServoPhysicalCylError;
   uint8           Head;
   uint8           padding1[3];
   };

#define BUFFER_COMPARE_SDBP_DSB_LEN 40

struct  buffer_compare_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   buffer_compare_dsb Dsb;
   };

#define GENERIC_DSB_LEN 8

struct  generic_dsb
   {
   dsb_header      Header;
   };

#define REALLOCATE_PARITY_SECTOR_SDBP_DFB_LEN 16

struct  reallocate_parity_sector_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   reallocate_parity_sector_dfb Dfb;
   };

#define REV_CREATE_RECOVERABLE_READ_ERROR_SDBP_DSB_LEN 48

struct  rev_create_recoverable_read_error_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rev_create_recoverable_read_error_dsb Dsb;
   };

#define RW_OP_STATUS_SDBP_DSB_LEN None

struct  rw_op_status_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_op_status_dsb Dsb;
   };

#define LOAD_UNLOAD_HEADS_SDBP_DSB_LEN 52

struct  load_unload_heads_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   load_unload_heads_dsb Dsb;
   };

#define SET_DERP_RETRY_STATE_SDBP_DSB_LEN 32

struct  set_derp_retry_state_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_derp_retry_state_dsb Dsb;
   };

#define RW_STATS_CONTROL_SDBP_DSB_LEN 20

struct  rw_stats_control_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_stats_control_dsb Dsb;
   };

#define GET_CHANNEL_MEMORY_DFB_LEN 10

struct  get_channel_memory_dfb
   {
   dfb_header      Header;
   uint8           MemoryType;
   uint8           BufferSelect;
   uint16          StartElement;
   uint16          NumberOfElements;
   };

#define COLLECT_SEEK_PROFILE_DFB_LEN 32

struct  collect_seek_profile_dfb
   {
   dfb_header      Header;
   uint32          padding1;
   uint64          PassThrough;
   uint32          Pes32Bit;
   uint8           WriteSeek;
   uint8           padding2[3];
   int32           SeekLength;
   uint16          ExtraRevNum;
   uint16          padding3;
   };

#define COLLECT_SEEK_PROFILE_SDBP_DFB_LEN 40

struct  collect_seek_profile_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   collect_seek_profile_dfb Dfb;
   };

#define ERROR_LOG_DSB_LEN 72

struct  error_log_dsb
   {
   dsb_header      Header;
   error_log       Log;
   };

#define SET_RW_SCOPE_SYNC_DFB_LEN 8

struct  set_rw_scope_sync_dfb
   {
   dfb_header      Header;
   uint8           Operation;
   uint8           padding1;
   uint16          Wedge;
   };

#define RREV2_READ_MODIFY_SAP_SDBP_DSB_LEN 2248

struct  rrev2_read_modify_sap_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev2_read_modify_sap_dsb Dsb;
   };

#define RW_ZAP_TABLE_DSB_LEN 2012

struct  rw_zap_table_dsb
   {
   dsb_header      Header;
   uint16          ServoSectorsPerTrack;
   int16           ServoData[1000];
   uint16          padding1;
   };

#define RW_ZAP_TABLE_SDBP_DSB_LEN 2020

struct  rw_zap_table_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rw_zap_table_dsb Dsb;
   };

#define MEASURE_DISC_ECCENTRICITY_SDBP_DSB_LEN 164

struct  measure_disc_eccentricity_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   measure_disc_eccentricity_dsb Dsb;
   };

#define GET_DEFECTIVE_TRACKS_LIST_DFB_LEN 20

struct  get_defective_tracks_list_dfb
   {
   dfb_header      Header;
   rw_retrieve_defective_tracks_list_inputs InputInfo;
   };

#define GET_SUPER_PARITY_CONFIG_SDBP_DSB_LEN 20

struct  get_super_parity_config_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_super_parity_config_dsb Dsb;
   };

#define SET_RW_TRACING_STATE_SDBP_DFB_LEN 16

struct  set_rw_tracing_state_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_rw_tracing_state_dfb Dfb;
   };

#define SPIN_UP_OR_DOWN_DRIVE_DSB_LEN 464

struct  spin_up_or_down_drive_dsb
   {
   dsb_header      Header;
   uint8           SpinState;
   uint8           padding1[3];
   uint32          ElapsedTimeInUsec;
   uint8           RwSenseStatus;
   uint8           padding2[3];
   uint32          RwErrorCode;
   uint16          ServoEventLog[220];
   };

#define RW_STATS_CONTROL_DFB_LEN 6

struct  rw_stats_control_dfb
   {
   dfb_header      Header;
   uint8           Mission;
   uint8           padding1;
   };

#define SET_TARGET_ADDR_DFB_LEN 40

struct  set_target_addr_dfb
   {
   dfb_header      Header;
   uint8           TargetAddrMode;
   uint8           UpdateTargetAddrOption;
   uint8           SetTargetAddrOption;
   uint8           padding1;
   set_target_addr TargetAddr;
   uint8           SetTargetTransferLengthOption;
   uint8           padding2[7];
   uint64          TargetTransferLength;
   };

#define RW_CALCULATE_READ_ACTUATION_WITH_WRITE_HEAT_REQUEST_LEN 16

struct  rw_calculate_read_actuation_with_write_heat_request
   {
   uint32          WL; // This is really a 32 bit float value.
   uint32          Cylinder;
   uint8           Dac;
   uint8           Zone;
   uint8           Head;
   uint8           padding1;
   uint32          Partition;
   };

#define GET_DEFT_STEP_EXECUTION_TIMES_SDBP_DFB_LEN 12

struct  get_deft_step_execution_times_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_deft_step_execution_times_dfb Dfb;
   };

#define GENERIC_RW_REQUEST_SDBP_DFB_LEN 52

struct  generic_rw_request_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   generic_rw_request_dfb Dfb;
   };

#define EERT_LOAD_PROCESSOR_SDBP_DFB_LEN 32780

struct  eert_load_processor_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   eert_load_processor_dfb Dfb;
   };

#define GET_DEFECTIVE_TRACKS_LIST_SDBP_DFB_LEN 28

struct  get_defective_tracks_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_defective_tracks_list_dfb Dfb;
   };

#define ENABLE_DISABLE_SHOCK_SENSOR_SDBP_DFB_LEN 16

struct  enable_disable_shock_sensor_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   enable_disable_shock_sensor_dfb Dfb;
   uint16          padding1;
   };

#define GET_PREAMP_HEAD_RESISTANCE_DSB_LEN 36

struct  get_preamp_head_resistance_dsb
   {
   dsb_header      Header;
   uint8           NumOfHeads;
   uint8           padding1;
   uint16          Resistance[12];
   uint16          padding2;
   };

#define GET_PREAMP_HEAD_RESISTANCE_SDBP_DSB_LEN 44

struct  get_preamp_head_resistance_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_preamp_head_resistance_dsb Dsb;
   };

#define RW_DATA_COLLECTION_OPTIONS_LEN 4

struct  rw_data_collection_options
   {
   uint32          Bitfield1  ;
   };

#define rw_data_collection_options_EnableControllerDataCollection_OFFSET                                     0x0000
#define rw_data_collection_options_EnableControllerDataCollection_MASK                                       0x0001

#define rw_data_collection_options_EnableChannelDataCollection_OFFSET                                        0x0001
#define rw_data_collection_options_EnableChannelDataCollection_MASK                                          0x0002

#define rw_data_collection_options_EnableMseDataCollection_OFFSET                                            0x0002
#define rw_data_collection_options_EnableMseDataCollection_MASK                                              0x0004

#define rw_data_collection_options_EnableMseserDibitCollection_OFFSET                                        0x0003
#define rw_data_collection_options_EnableMseserDibitCollection_MASK                                          0x0008

#define rw_data_collection_options_EnableRotatingSeedCollection_OFFSET                                       0x0004
#define rw_data_collection_options_EnableRotatingSeedCollection_MASK                                         0xFFFFFFF0


#define RREV1_CONVERT_SERVO_PHYSICAL_TO_LOGICAL_SDBP_DSB_LEN 40

struct  rrev1_convert_servo_physical_to_logical_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_convert_servo_physical_to_logical_dsb Dsb;
   };

#define SECTOR_EXT_TO_SFI_DATA_LEN 16

struct  sector_ext_to_sfi_data
   {
   uint32          Cyl;
   uint32          Sector;
   uint32          NumOfSectors;
   uint8           Head;
   uint8           Rsvd1;
   uint8           Rsvd2;
   uint8           Mode;
   };

#define ERROR_LOG_SDBP_DSB_LEN 80

struct  error_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   error_log_dsb   Dsb;
   };

#define GET_DEFECT_LISTS_INFO_SDBP_DFB_LEN 32

struct  get_defect_lists_info_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_defect_lists_info_dfb Dfb;
   };

#define SET_DIAG_IDLE_MODE_DSB_LEN 16

struct  set_diag_idle_mode_dsb
   {
   dsb_header      Header;
   uint32          IdleMode;
   uint32          IdleModeMask;
   };

#define SET_SEACORDER_CMD_THRESHOLD_SDBP_DFB_LEN 16

struct  set_seacorder_cmd_threshold_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_seacorder_cmd_threshold_dfb Dfb;
   uint16          padding1;
   };

#define VBM_CACHE_SEARCH_HW_REGS_LEN 48

struct  vbm_cache_search_hw_regs
   {
   uint64          CacheEngineTargetLBA;
   uint16          CacheEngineTargetCount;
   uint16          CacheEngineConfig;
   uint16          CacheEngineMaxCount;
   uint16          CacheEngineCHStatus;
   uint16          CacheEngineTotalHits;
   uint16          CacheEngineBestHit;
   uint32          padding1;
   uint64          CacheEngineDelta;
   uint16          CacheEngineDeltaHigh;
   uint16          ActiveEntry;
   uint16          GLTandLGTCacheEntries;
   uint16          FirstCacheHitEntry;
   uint16          StartEntry;
   uint16          LastCacheHitEntry;
   uint32          padding2;
   };

#define SELECT_ERROR_LOGGING_MODE_SDBP_DFB_LEN 16

struct  select_error_logging_mode_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   select_error_logging_mode_dfb Dfb;
   uint16          padding1;
   };

#define GET_VGA_DATA_SDBP_DFB_LEN 20

struct  get_vga_data_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_vga_data_dfb Dfb;
   };

#define SPIN_UP_OR_DOWN_DRIVE_SDBP_DSB_LEN 472

struct  spin_up_or_down_drive_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   spin_up_or_down_drive_dsb Dsb;
   };

#define GET_DATA_SCRUB_LIST_DFB_LEN 12

struct  get_data_scrub_list_dfb
   {
   dfb_header      Header;
   uint32          StartIndex;
   uint32          NumEntriesRequested;
   };

#define GET_DATA_SCRUB_LIST_SDBP_DFB_LEN 20

struct  get_data_scrub_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_data_scrub_list_dfb Dfb;
   };

#define FAST_IO_CMD_FRAME_LEN 16

struct  fast_io_cmd_frame
   {
   uint16          Unused0;
   uint16          InjectionData[2];
   uint16          Unused1[5];
   };

#define SET_DIAG_IDLE_MODE_SDBP_DSB_LEN 24

struct  set_diag_idle_mode_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_diag_idle_mode_dsb Dsb;
   };

#define GET_STACK_FILL_INFO_SDBP_DSB_LEN 256

struct  get_stack_fill_info_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_stack_fill_info_dsb Dsb;
   };

#define UPDATE_DATA_SCRUB_LIST_SDBP_DFB_LEN 4120

struct  update_data_scrub_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   update_data_scrub_list_dfb Dfb;
   };

#define GET_CHANNEL_MEMORY_SDBP_DFB_LEN 20

struct  get_channel_memory_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_channel_memory_dfb Dfb;
   uint16          padding1;
   };

#define FAFH_DHS_SETUP_LEN 30

struct  fafh_dhs_setup
   {
   uint16          DhsFrequencySelect1;
   uint16          DhsFrequencySelect2;
   uint8           ReadChannelRateMultiplier;
   uint8           WriteChannelRateMultiplier;
   uint16          ReadAndWriteChannelRateDivisor;
   uint16          MDivisor;
   uint16          DhsWindowLength;
   uint16          DhsIntegrationLength;
   uint16          DhsReserved[8];
   };

#define READ_SERVO_RAM_AT_ADDR_SDBP_DSB_LEN 32

struct  read_servo_ram_at_addr_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_servo_ram_at_addr_dsb Dsb;
   };

#define LDPC_ITERATION_CONTROL_SDBP_DSB_LEN 48

struct  ldpc_iteration_control_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   ldpc_iteration_control_dsb Dsb;
   };

#define GET_CAP_PARM_SDBP_DSB_LEN 532

struct  get_cap_parm_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_cap_parm_dsb Dsb;
   };

#define PROCESS_GROWTH_LIST_OPTIONS_LEN 4

struct  process_growth_list_options
   {
   uint32          Bitfield1  ;
   };

#define process_growth_list_options_ProcessGrowthServoFlaws_OFFSET                                           0x0000
#define process_growth_list_options_ProcessGrowthServoFlaws_MASK                                             0x0001

#define process_growth_list_options_InhibitFormatCorrupt_OFFSET                                              0x0001
#define process_growth_list_options_InhibitFormatCorrupt_MASK                                                0x0002

#define process_growth_list_options_ProcessG2PWithPadding_OFFSET                                             0x0002
#define process_growth_list_options_ProcessG2PWithPadding_MASK                                               0x0004

#define process_growth_list_options_ProcessG2PWithUserPadding_OFFSET                                         0x0003
#define process_growth_list_options_ProcessG2PWithUserPadding_MASK                                           0x0008

#define process_growth_list_options_unused_OFFSET                                                            0x0004
#define process_growth_list_options_unused_MASK                                                              0xFFFFFFF0


#define SET_DOS_RAP_PARAMETERS_DSB_LEN 16

struct  set_dos_rap_parameters_dsb
   {
   dsb_header      Header;
   uint8           Head;
   uint8           STEThresholdScalar;
   uint8           STERange;
   uint8           ATIThresholdScalar;
   int16           TemperatureThreshold;
   uint8           STERange2;
   uint8           DistalSTEThresholdScalar;
   };

#define GET_DEFT_STEP_EXECUTION_TIMES_DSB_LEN 12

struct  get_deft_step_execution_times_dsb
   {
   dsb_header      Header;
   uint32          NumberDEFTSteps;
   };

#define GENERIC_DFB_LEN 4

struct  generic_dfb
   {
   dfb_header      Header;
   };

#define ENH_WORKLOAD_MGMT_LOG_CONTROL_DFB_LEN 8

struct  enh_workload_mgmt_log_control_dfb
   {
   dfb_header      Header;
   uint8           Flags;
   uint8           Rsvd1;
   uint16          EnhWorkloadMgmtPeriodIn100msIncrements;
   };

#define ENH_WORKLOAD_MGMT_LOG_CONTROL_SDBP_DFB_LEN 16

struct  enh_workload_mgmt_log_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   enh_workload_mgmt_log_control_dfb DfbInfo;
   };

#define REV_CREATE_RECOVERABLE_READ_ERROR_DFB_LEN 32

struct  rev_create_recoverable_read_error_dfb
   {
   dfb_header      Header;
   uint32          MinRetryCount;
   uint32          MaxRetryCount;
   uint32          padding1;
   uint64          UserLba;
   uint32          SuccessCount;
   uint32          ErrorSeverity;
   };

#define GET_DOS_SCANS_DUE_SDBP_DFB_LEN 12

struct  get_dos_scans_due_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_scans_due_dfb Dfb;
   };

#define RREV3_GENERIC_SERVO_FAST_IO_WITH_INJECT_DFB_LEN 4208

struct  rrev3_generic_servo_fast_io_with_inject_dfb
   {
   dfb_header      Header;
   uint8           InjectChannel1Flag;
   uint8           InjectChannel2Flag;
   uint8           InjectServoCmdFlag;
   uint8           AddedChannelsFlag;
   uint16          RevsToCollect;
   uint16          RevToInjectServocmd;
   uint16          WedgeToInjectServoCmd;
   uint16          Param[32];
   uint16          TriggerValue;
   uint16          TriggerCommandWord;
   uint16          Pad;
   uint32          AuxPortAddressArray[24];
   uint8           AuxPortShiftArray[4];
   uint32          TracingMemoryAddr;
   uint32          TraceRoutineAddr;
   uint32          TraceNothingAddr;
   uint32          TraceVariablesAddr;
   uint32          Channel1InjectionAddress;
   uint32          Channel2InjectionAddress;
   uint16          Channel1InjectionTrace[1000];
   uint16          Channel2InjectionTrace[1000];
   };

#define BIPS_CONTROL_DFB_LEN 8

struct  bips_control_dfb
   {
   dfb_header      Header;
   uint8           Flag;
   uint8           Rsvd1;
   uint8           Rsvd2;
   uint8           Rsvd3;
   };

#define BIPS_CONTROL_SDBP_DFB_LEN 16

struct  bips_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   bips_control_dfb Dfb;
   };

#define READ_LOG_EXT_SDBP_DFB_LEN 20

struct  read_log_ext_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_log_ext_dfb Dfb;
   };

#define GET_FAFH_HISTORY_LOG_FRAME_DSB_LEN 16396

struct  get_fafh_history_log_frame_dsb
   {
   dsb_header      Header;
   uint8           Interval;
   uint8           FrameNumber;
   uint16          padding1;
   fafh_history_log_frame FafhHistoryLogFrame;
   };

#define TRANSLATE_USER_LBA_TO_MEDIA_LBA_SDBP_DSB_LEN None

struct  translate_user_lba_to_media_lba_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   };

#define GENERIC_SDBP_DSB_LEN 16

struct  generic_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   generic_dsb     Dsb;
   };

#define RW_SUPER_BLOCK_RANGE_LEN 16

struct  rw_super_block_range
   {
   uint64          StartSuperBlkAddr;
   uint64          Length;
   };

#define GET_PVT_SDBP_DFB_LEN 16

struct  get_pvt_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_pvt_dfb     Dfb;
   };

#define SET_TARGET_ADDR_SDBP_DFB_LEN 48

struct  set_target_addr_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_target_addr_dfb Dfb;
   };

#define RREV2_INIT_DEFECT_LIST_SDBP_DFB_LEN 20

struct  rrev2_init_defect_list_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev2_init_defect_list_dfb Dfb;
   };

#define SERVO_PZT_TEST_SDBP_DFB_LEN 16

struct  servo_pzt_test_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   servo_pzt_test_dfb Dfb;
   };

#define WR_PREAMP_REG_SDBP_DFB_LEN 20

struct  wr_preamp_reg_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   wr_preamp_reg_dfb Dfb;
   uint16          padding1;
   };

#define RW_STATS_CONTROL_SDBP_DFB_LEN 16

struct  rw_stats_control_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rw_stats_control_dfb Dfb;
   uint16          padding1;
   };

#define SERIAL_IDENTIFY_SDBP_DSB_LEN 20

struct  serial_identify_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   serial_identify_dsb Dsb;
   };

#define GET_SET_LONG_ERASURE_MASK_TABLE_COUNT_DSB_LEN 12

struct  get_set_long_erasure_mask_table_count_dsb
   {
   dsb_header      Header;
   uint32          Data;
   };

#define GET_SET_LONG_ERASURE_MASK_TABLE_COUNT_SDBP_DSB_LEN 20

struct  get_set_long_erasure_mask_table_count_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_set_long_erasure_mask_table_count_dsb Dsb;
   };

#define READ_SERIAL_PORT_TEST_RESULTS_OUTPUT_LEN 8

struct  read_serial_port_test_results_output
   {
   uint32          FileLengthInBytes;
   uint32          BytesRead;
   };

#define READ_SERIAL_PORT_TEST_RESULTS_DSB_LEN 528

struct  read_serial_port_test_results_dsb
   {
   dsb_header      Header;
   read_serial_port_test_results_output Output;
   uint8           FileData[512];
   };

#define ENABLE_DISABLE_SHOCK_SENSOR_SDBP_DSB_LEN 20

struct  enable_disable_shock_sensor_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   enable_disable_shock_sensor_dsb Dsb;
   };

#define SET_CONTROLLER_TEST_PORT_DSB_LEN 32

struct  set_controller_test_port_dsb
   {
   dsb_header      Header;
   mux_register    Mux;
   };

#define GET_ACTIVE_STATUS_SDBP_DSB_LEN 72

struct  get_active_status_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_active_status_dsb Dsb;
   };

#define INIT_LOG_FILE_SDBP_DFB_LEN 16

struct  init_log_file_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   init_log_file_dfb Dfb;
   uint16          padding1;
   };

#define RREV1_SET_TRACK_FORMAT_PARMS_SDBP_DFB_LEN 16

struct  rrev1_set_track_format_parms_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rrev1_set_track_format_parms_dfb Dfb;
   };

#define SERVO_PZT_TEST_DSB_LEN 12

struct  servo_pzt_test_dsb
   {
   dsb_header      Header;
   uint16          CommandStatus;
   uint16          ResponseData;
   };

#define READ_FILE_INPUT_LEN 20

struct  read_file_input
   {
   uint32          FileDescriptor;
   uint16          FileSelectCopy;
   uint16          padding1;
   uint32          ByteOffset;
   uint32          BytesToRead;
   uint8           FileDataPtr;
   uint8           padding2[3];
   };

#define SET_DOS_RAP_PARAMETERS_SDBP_DSB_LEN 24

struct  set_dos_rap_parameters_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_dos_rap_parameters_dsb Dsb;
   };

#define FINE_RW_OFFSET_SDBP_DFB_LEN 20

struct  fine_rw_offset_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   fine_rw_offset_dfb Dfb;
   uint16          padding1;
   };

#define SET_SERVO_TRACING_STATE_SDBP_DSB_LEN 20

struct  set_servo_tracing_state_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_servo_tracing_state_dsb Dsb;
   };

#define BUTTERFLY_SEEK_TEST_DFB_LEN 28

struct  butterfly_seek_test_dfb
   {
   dfb_header      Header;
   uint32          ParmFirstPhysicalCyl;
   uint32          ParmSecondPhysicalCyl;
   uint8           SeekPairTestType;
   uint8           SeekPairRunType;
   uint16          padding1;
   uint32          NumSeekPairs;
   uint32          SecsToSeek;
   uint8           ForceUseOfMinPhysCyl;
   uint8           ForceUseOfMaxPhysCyl;
   uint8           LogicalHead;
   uint8           padding2;
   };

#define BUTTERFLY_SEEK_TEST_SDBP_DFB_LEN 36

struct  butterfly_seek_test_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   butterfly_seek_test_dfb Dfb;
   };

#define GET_CHANNEL_MEMORY_SDBP_DSB_LEN 50584

struct  get_channel_memory_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_channel_memory_dsb Dsb;
   };

#define TOGGLE_EDAC_ENABLE_SDBP_DSB_LEN 20

struct  toggle_edac_enable_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   toggle_edac_enable_dsb Dsb;
   };

#define SET_FAFH_PARMS_SDBP_DFB_LEN 48

struct  set_fafh_parms_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_fafh_parms_dfb Dfb;
   };

#define GET_DRIVE_GEOMETRY_SDBP_DSB_LEN 153448

struct  get_drive_geometry_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_drive_geometry_dsb Dsb;
   };

#define CONFIGURE_GPIO_TEST_PINS_SDBP_DFB_LEN 16

struct  configure_gpio_test_pins_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   configure_GPIO_test_pins_dfb Dfb;
   };

#define GENERIC_SDBP_DFB_LEN 12

struct  generic_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   generic_dfb     Dfb;
   };

#define READ_SMART_LOG_SDBP_DFB_LEN 20

struct  read_smart_log_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   read_smart_log_dfb Dfb;
   };

#define MODE_SENSE_SDBP_DFB_LEN 56

struct  mode_sense_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   mode_sense_dfb  Dfb;
   };

#define SET_RW_SCOPE_SYNC_SDBP_DFB_LEN 16

struct  set_rw_scope_sync_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   set_rw_scope_sync_dfb Dfb;
   };

#define SYMBOL_ERROR_MAP_LOG_SDBP_DSB_LEN 6436

struct  symbol_error_map_log_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   symbol_error_map_log_dsb Dsb;
   };

#define READ_SERIAL_PORT_TEST_RESULTS_SDBP_DSB_LEN 536

struct  read_serial_port_test_results_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   read_serial_port_test_results_dsb Dsb;
   };

#define REV_CREATE_RECOVERABLE_READ_ERROR_SDBP_DFB_LEN 40

struct  rev_create_recoverable_read_error_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   rev_create_recoverable_read_error_dfb Dfb;
   };

#define GET_DEFT_STEP_EXECUTION_TIMES_SDBP_DSB_LEN 20

struct  get_deft_step_execution_times_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_deft_step_execution_times_dsb Dsb;
   };

#define SET_CONTROLLER_TEST_PORT_SDBP_DSB_LEN 40

struct  set_controller_test_port_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_controller_test_port_dsb Dsb;
   };

#define REV_GET_DEVICE_TEMPERATURE_SDBP_DSB_LEN 32

struct  rev_get_device_temperature_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   rev_get_device_temperature_dsb Dsb;
   };

#define RW_USER_DERP_RETRY_LEVEL_LEN 2

struct  rw_user_derp_retry_level
   {
   uint8           Options;
   uint8           DERPRetryLevel;
   };

#define BUFFER_COPY_SDBP_DFB_LEN 36

struct  buffer_copy_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   buffer_copy_dfb Dfb;
   };

#define WR_POWER_ASIC_REG_SDBP_DSB_LEN 28

struct  wr_power_asic_reg_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   wr_power_asic_reg_dsb Dsb;
   };

#define SFI_SECTOR_EXT_DATA_LEN 16

struct  sfi_sector_ext_data
   {
   sector_ext_to_sfi_data SectorExt;
   sfi_to_sector_ext_data Sfi;
   };

#define SERVO_PZT_TEST_SDBP_DSB_LEN 20

struct  servo_pzt_test_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   servo_pzt_test_dsb Dsb;
   };

#define GET_FAFH_HISTORY_LOG_FRAME_SDBP_DSB_LEN 16404

struct  get_fafh_history_log_frame_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   get_fafh_history_log_frame_dsb Dsb;
   };

#define SET_TARGET_ADDR_SDBP_DSB_LEN 20

struct  set_target_addr_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_target_addr_dsb Dsb;
   };

#define SET_TEST_SPACE_SDBP_DSB_LEN 504

struct  set_test_space_sdbp_dsb
   {
   sdbp_packet_header SdbpHeader;
   set_test_space_dsb Dsb;
   };

#define GET_DOS_VERSION_SDBP_DFB_LEN 12

struct  get_dos_version_sdbp_dfb
   {
   sdbp_packet_header SdbpHeader;
   get_dos_version_dfb Dfb;
   };

#define TARGET_MINIZONE_POSITION_INFO_LEN 16

struct  target_minizone_position_info
   {
   uint8           TargetMiniZoneHead;
   uint8           padding1[3];
   uint32          TargetMiniZoneLastCyl;
   uint64          TargetMiniZoneLastLba;
   };

#endif